#I  file="lib/read8.g"

#F  file="lib/overload.g" crc=-100213183
RANK_FILTER_LIST  := [ 40162743, 7, 39418994, 31, 60816554, 13, 25512138, 36, 
  41704214, 21, 58412696, 30, 39418994, 31, 39418994, 31, 7665940, 19, 
  39418994, 31, 64918210, 8, 39418994, 31, 41704214, 21, 58412696, 30, 
  7665940, 19, 48365284, 3, 25512138, 36, 41704214, 21, 48365284, 3, 
  25512138, 36, 41704214, 21, 48365284, 3, 25512138, 36, 41704214, 21, 
  48365284, 3, 41704214, 21, 48365284, 3, 41704214, 21, 48365284, 3, 
  41704214, 21, 48365284, 3, 40162743, 7, 39418994, 31, 25512138, 36, 
  41704214, 21, 58412696, 30, 41704214, 21, 25512138, 36, 41704214, 21 ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/overload.g", -100213183 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/overload.g\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/overload.g");
elif COM_RESULT = 3  then
Revision.overload_g:="@(#)$Id: overload.g,v 4.26 2003/03/10 07:36:13 gap Exp $";
DeclareOperation("CoKernel",[IsObject]);
InstallMethod(CoKernel,[IsGeneralMapping],COM_FUN(1));
DeclareOperation("Degree",[IsObject]);
InstallMethod(Degree,[IsClassFunction],DegreeOfCharacter);
InstallMethod(Degree,[IsRationalFunction],COM_FUN(2));
DeclareOperation("DerivedSeries",[IsObject]);
InstallMethod(DerivedSeries,[IsAlgebra],COM_FUN(3));
InstallMethod(DerivedSeries,[IsGroup],DerivedSeriesOfGroup);
DeclareOperation("Determinant",[IsObject]);
InstallMethod(Determinant,[IsMatrix],DeterminantMat);
InstallMethod(Determinant,[IsClassFunction],DeterminantOfCharacter);
DeclareOperation("Eigenvalues",[IsObject]);
InstallOtherMethod(Eigenvalues,[IsClassFunction,IsPosInt],EigenvaluesChar);
DeclareOperation("IsIrreducible",[IsObject]);
InstallMethod(IsIrreducible,[IsClassFunction],IsIrreducibleCharacter);
InstallMethod(IsIrreducible,[IsRingElement],COM_FUN(4));
DeclareOperation("IsMonomial",[IsObject]);
InstallMethod(IsMonomial,[IsClassFunction],IsMonomialCharacter);
InstallMethod(IsMonomial,[IsGroup],IsMonomialGroup);
InstallMethod(IsMonomial,[IsMatrix],IsMonomialMatrix);
InstallMethod(IsMonomial,[IsPosInt],IsMonomialNumber);
InstallMethod(IsMonomial,[IsOrdinaryTable],IsMonomialCharacterTable);
DeclareOperation("IsNilpotent",[IsObject]);
Add(SOLVABILITY_IMPLYING_FUNCTIONS,IsNilpotent);
InstallMethod(IsNilpotent,[IsAlgebra],COM_FUN(5));
InstallMethod(IsNilpotent,[IsGroup],IsNilpotentGroup);
InstallMethod(IsNilpotent,[IsOrdinaryTable],IsNilpotentCharacterTable);
DeclareOperation("IsSimple",[IsObject]);
InstallMethod(IsSimple,[IsAlgebra],IsSimpleAlgebra);
InstallMethod(IsSimple,[IsGroup],IsSimpleGroup);
InstallMethod(IsSimple,[IsOrdinaryTable],IsSimpleCharacterTable);
DeclareOperation("IsSolvable",[IsObject]);
Add(SOLVABILITY_IMPLYING_FUNCTIONS,IsSolvable);
InstallMethod(IsSolvable,[IsAlgebra],COM_FUN(6));
InstallMethod(IsSolvable,[IsGroup],IsSolvableGroup);
InstallMethod(IsSolvable,[IsOrdinaryTable],IsSolvableCharacterTable);
DeclareOperation("IsSporadicSimple",[IsObject]);
InstallMethod(IsSporadicSimple,[IsGroup],IsSporadicSimpleGroup);
InstallMethod(IsSporadicSimple,[IsOrdinaryTable],IsSporadicSimpleCharacterTable);
DeclareOperation("IsSupersolvable",[IsObject]);
InstallMethod(IsSupersolvable,[IsGroup],IsSupersolvableGroup);
InstallMethod(IsSupersolvable,[IsOrdinaryTable],IsSupersolvableCharacterTable);
DeclareOperation("IsPerfect",[IsObject]);
InstallMethod(IsPerfect,[IsGroup],IsPerfectGroup);
InstallMethod(IsPerfect,[IsOrdinaryTable],IsPerfectCharacterTable);
DeclareOperation("Kernel",[IsObject]);
InstallMethod(Kernel,[IsGeneralMapping],COM_FUN(7));
InstallMethod(Kernel,[IsClassFunction],KernelOfCharacter);
DeclareOperation("LowerCentralSeries",[IsObject]);
InstallMethod(LowerCentralSeries,[IsAlgebra],COM_FUN(8));
InstallMethod(LowerCentralSeries,[IsGroup],LowerCentralSeriesOfGroup);
DeclareOperation("Rank",[IsObject]);
InstallMethod(Rank,[IsMatrix],RankMat);
InstallMethod(Rank,[IsGroup],RankPGroup);
DeclareOperation("UpperCentralSeries",[IsObject]);
InstallMethod(UpperCentralSeries,[IsAlgebra],COM_FUN(9));
InstallMethod(UpperCentralSeries,[IsGroup],UpperCentralSeriesOfGroup);
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/overload.g"

#F  file="lib/compiler.g" crc=-35051890
RANK_FILTER_LIST  := [  ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/compiler.g", -35051890 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/compiler.g\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/compiler.g");
elif COM_RESULT = 3  then
Revision.compiler_g:="@(#)$Id: compiler.g,v 4.3 2002/04/15 10:04:30 sal Exp $";
RatPairString:=COM_FUN(1);
ParseArguments:=COM_FUN(2);
CompileFunc:=COM_FUN(3);
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/compiler.g"

