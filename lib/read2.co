#I  file="lib/read2.g"

#F  file="lib/process.gd" crc=-89289350
RANK_FILTER_LIST  := [  ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/process.gd", -89289350 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/process.gd\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/process.gd");
elif COM_RESULT = 3  then
Revision.process_gd:="@(#)$Id: process.gd,v 4.13 2003/03/04 08:33:22 gap Exp $";
UNBIND_GLOBAL("Process");
DeclareOperation("Process",[IsDirectory,IsString,IsInputStream,IsOutputStream,IsList]);
DeclareGlobalFunction("Exec");
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/process.gd"

#F  file="lib/files.gi" crc=21124270
RANK_FILTER_LIST  := [ 67108760, 5, 2267952, 1, 2267952, 1, 67108280, 2, 
  67108280, 2, 2267952, 1, 67108760, 5, 8193, 2, 67108760, 5, 67108760, 5, 
  67108760, 5, 67108760, 5 ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/files.gi", 21124270 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/files.gi\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/files.gi");
elif COM_RESULT = 3  then
Revision.files_gi:="@(#)$Id: files.gi,v 4.26.2.1 2006/02/20 17:12:22 gap Exp $";
DeclareRepresentation("IsDirectoryRep",IsPositionalObjectRep,[]);
BindGlobal("DirectoryType",NewType(DirectoriesFamily,IsDirectory and IsDirectoryRep));
InstallGlobalFunction(USER_HOME_EXPAND,COM_FUN(1));
InstallMethod(Directory,"string",[IsString],COM_FUN(2));
InstallMethod(EQ,"for two directories",[IsDirectory,IsDirectory],COM_FUN(3));
InstallMethod(ViewObj,"default directory rep",[IsDirectoryRep],COM_FUN(4));
InstallMethod(PrintObj,"default directory rep",[IsDirectoryRep],COM_FUN(5));
InstallOtherMethod(Filename,"for a directory and a string",[IsDirectory,IsString],COM_FUN(6));
InstallMethod(Filename,"for a list and a string",[IsList,IsString],COM_FUN(7));
InstallGlobalFunction(DirectoryContents,COM_FUN(8));
READ_INDENT:="";
InstallMethod(Read,"string",[IsString],COM_FUN(9));
InstallMethod(ReadTest,"string",[IsString],COM_FUN(10));
InstallMethod(ReadAsFunction,"string",[IsString],COM_FUN(11));
InstallGlobalFunction(Edit,COM_FUN(12));
InstallGlobalFunction(CreateCompletionFiles,COM_FUN(13));
InstallGlobalFunction(CheckCompletionFiles,COM_FUN(14));
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/files.gi"

#F  file="lib/streams.gi" crc=-94558304
RANK_FILTER_LIST  := [ 18146737, 2, 18146613, 2, 9072765, 1, 36293937, 2, 
  36293937, 2, 17, 18, 36293937, 2, 41156099, 4, 1025, 1, 5, 1, 41156099, 4, 
  1025, 1, 41156099, 4, 5, 1, 41156099, 4, 36293937, 2, 1025, 1, 5, 1, 
  36293937, 2, 1025, 1, 36293937, 2, 5, 1, 36293937, 2, 36293937, 2, 
  36293937, 2, 36293937, 2, 5479954, 3, 43843465, 3, 67108760, 5, 43843465, 
  3, 67108760, 5, 43843465, 3, 67108760, 5, 21921733, 2, 8193, 2, 21921733, 
  2, 8193, 2, 67108760, 5, 10016816, 5, 10016816, 5, 4535903, 2, 10016816, 5, 
  10016816, 5, 17, 18, 10016816, 5, 10016816, 5, 10016816, 5, 10016816, 5, 
  17, 18, 67108760, 5, 29973428, 4, 29973428, 4, 66268324, 5, 30393586, 2, 
  66268324, 5, 66268324, 5, 66268324, 5, 66268324, 5, 17, 18, 66268324, 5, 
  17, 18, 65427768, 6, 65427768, 6, 24072117, 2, 65427768, 6, 65427768, 6, 
  17, 18, 65427768, 6, 65427768, 6, 65427768, 6, 65427768, 6, 17, 18, 8193, 
  2, 1025, 1, 11431099, 2, 18559509, 5, 8193, 2, 18559509, 5, 17, 18, 
  18559509, 5, 18559509, 5, 1025, 1, 8193, 2, 1025, 1, 8193, 2, 38462700, 4, 
  53256022, 2, 60384432, 5, 17, 18, 60384432, 5, 67108760, 5, 60384432, 5, 
  60384432, 5, 1025, 1, 2688110, 2, 53659984, 6, 8193, 2, 53659984, 6, 17, 
  18, 53659984, 6, 53659984, 6, 1025, 1, 45450329, 6, 45450329, 6, 45450329, 
  6, 45450329, 6, 45450329, 6, 45450329, 6, 17, 18, 45450329, 6, 17, 18, 
  45450329, 6, 67108760, 5, 45450329, 6, 45450329, 6, 21921733, 2, 21921733, 
  2, 1025, 1, 66268324, 5, 60384432, 5, 45450329, 6 ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/streams.gi", -94558304 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/streams.gi\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/streams.gi");
elif COM_RESULT = 3  then
Revision.streams_gi:="@(#)$Id: streams.gi,v 4.43.4.2 2006/03/03 11:57:56 gap Exp $";
ClosedStreamType:=NewType(StreamsFamily,IsClosedStream);
InstallMethod(CloseStream,"non-process streams",[IsStream and IsComponentObjectRep],COM_FUN(1));
InstallMethod(CloseStream,"non-process streams",[IsStream and IsPositionalObjectRep],COM_FUN(2));
InstallMethod(PrintObj,"closed stream",[IsClosedStream],COM_FUN(3));
InstallMethod(ReadAll,"input stream",[IsInputStream],COM_FUN(4));
InstallMethod(ReadAll,"input stream, length limit",[IsInputStream,IsInt],COM_FUN(5));
InstallMethod(ReadLine,"generic, call ReadByte",[IsInputStream],COM_FUN(6));
InstallMethod(ReadAllLine,"iostream,boolean,function",[IsInputOutputStream,IsBool,IsFunction],COM_FUN(7));
InstallOtherMethod(ReadAllLine,"iostream,boolean",[IsInputOutputStream,IsBool],COM_FUN(8));
InstallOtherMethod(ReadAllLine,"iostream,function",[IsInputOutputStream,IsFunction],COM_FUN(9));
InstallOtherMethod(ReadAllLine,"iostream",[IsInputOutputStream],COM_FUN(10));
InstallMethod(ReadAllLine,"stream,boolean,function",[IsInputStream,IsBool,IsFunction],COM_FUN(11));
InstallOtherMethod(ReadAllLine,"stream,boolean",[IsInputStream,IsBool],COM_FUN(12));
InstallOtherMethod(ReadAllLine,"stream,function",[IsInputStream,IsFunction],COM_FUN(13));
InstallOtherMethod(ReadAllLine,"stream",[IsInputStream],ReadLine);
InstallOtherMethod(Read,"input stream",[IsInputStream],COM_FUN(14));
InstallOtherMethod(ReadTest,"input stream",[IsInputStream],COM_FUN(15));
InstallOtherMethod(ReadAsFunction,"input stream",[IsInputStream],READ_AS_FUNC_STREAM);
InstallMethod(RewindStream,"input text stream",[IsInputTextStream],COM_FUN(16));
IN_LOGGING_MODE:=false;
Add(POST_RESTORE_FUNCS,COM_FUN(17));
InstallMethod(LogTo,"for output stream",[IsOutputTextStream],COM_FUN(18));
InstallOtherMethod(LogTo,"for output file",[IsString],COM_FUN(19));
InstallOtherMethod(LogTo,"close log",[],COM_FUN(20));
InstallMethod(InputLogTo,"for output stream",[IsOutputTextStream],COM_FUN(21));
InstallOtherMethod(InputLogTo,"for output file",[IsString],COM_FUN(22));
InstallOtherMethod(InputLogTo,"close log",[],COM_FUN(23));
InstallMethod(OutputLogTo,"for output stream",[IsOutputTextStream],COM_FUN(24));
InstallOtherMethod(OutputLogTo,"for output file",[IsString],COM_FUN(25));
InstallOtherMethod(OutputLogTo,"close log",[],COM_FUN(26));
InstallMethod(WriteAll,"output stream",[IsOutputStream,IsList],COM_FUN(27));
InstallMethod(WriteLine,"output stream",[IsOutputStream,IsList],COM_FUN(28));
InputTextStringType:=NewType(StreamsFamily,IsInputTextStream and IsInputTextStringRep);
InstallMethod(InputTextString,"input text stream from string",[IsString],COM_FUN(29));
InstallMethod(IsEndOfStream,"input text string",[IsInputTextStream and IsInputTextStringRep],COM_FUN(30));
InstallMethod(PositionStream,"input text string",[IsInputTextStream and IsInputTextStringRep],COM_FUN(31));
InstallMethod(PrintObj,"input text string",[IsInputTextStringRep],COM_FUN(32));
InstallMethod(ReadAll,"input text string",[IsInputTextStream and IsInputTextStringRep],COM_FUN(33));
InstallMethod(ReadAll,"input text string and limit",[IsInputTextStream and IsInputTextStringRep,IsInt],COM_FUN(34));
InstallMethod(ReadByte,"input text string",[IsInputTextStream and IsInputTextStringRep],COM_FUN(35));
InstallMethod(ReadLine,"input text string",[IsInputTextStream and IsInputTextStringRep],COM_FUN(36));
InstallMethod(RewindStream,"input text string",[IsInputTextStream and IsInputTextStringRep],COM_FUN(37));
InstallMethod(SeekPositionStream,"input text string",[IsInputTextStream and IsInputTextStringRep,IsInt],COM_FUN(38));
DeclareRepresentation("IsInputTextFileRep",IsPositionalObjectRep,[]);
InputTextFileType:=NewType(StreamsFamily,IsInputTextStream and IsInputTextFileRep);
InputTextFileStillOpen:=[];
InstallMethod(InputTextFile,"input text stream from file",[IsString],COM_FUN(39));
InstallMethod(CloseStream,"input text file",[IsInputStream and IsInputTextFileRep],COM_FUN(40));
InstallAtExit(COM_FUN(41));
InstallMethod(IsEndOfStream,"input text file",[IsInputStream and IsInputTextFileRep],COM_FUN(42));
InstallMethod(PositionStream,"input text file",[IsInputTextStream and IsInputTextFileRep],COM_FUN(43));
InstallMethod(PrintObj,"input text file",[IsInputTextFileRep],COM_FUN(44));
InstallMethod(ReadByte,"input text file",[IsInputTextStream and IsInputTextFileRep],COM_FUN(45));
InstallMethod(ReadLine,"input text file",[IsInputTextStream and IsInputTextFileRep],COM_FUN(46));
InstallMethod(ReadAll,"input text file",true,[IsInputTextStream and IsInputTextFileRep],COM_FUN(47));
InstallMethod(ReadAll,"input text file and limit",[IsInputTextStream and IsInputTextFileRep,IsInt],COM_FUN(48));
InstallMethod(SeekPositionStream,"input text file",[IsInputTextStream and IsInputTextFileRep,IsInt],COM_FUN(49));
DeclareRepresentation("IsInputTextNoneRep",IsPositionalObjectRep,[]);
InputTextNoneType:=NewType(StreamsFamily,IsInputTextNone and IsInputTextNoneRep);
InstallGlobalFunction(InputTextNone,COM_FUN(50));
InstallMethod(IsEndOfStream,"input text none",[IsInputTextNone and IsInputTextNoneRep],COM_FUN(51));
InstallMethod(PositionStream,"input text none",[IsInputTextNone and IsInputTextNoneRep],COM_FUN(52));
InstallMethod(PrintObj,"input text none",[IsInputTextNoneRep],COM_FUN(53));
InstallMethod(ReadAll,"input text none",[IsInputTextNone and IsInputTextNoneRep],COM_FUN(54));
InstallMethod(ReadAll,"input text none and limit",[IsInputTextNone and IsInputTextNoneRep,IsInt],COM_FUN(55));
InstallMethod(ReadByte,"input text none",[IsInputTextNone and IsInputTextNoneRep],ReturnFail);
InstallMethod(ReadLine,"input text none",[IsInputTextNone and IsInputTextNoneRep],ReturnFail);
InstallMethod(RewindStream,"input text none",[IsInputTextNone and IsInputTextNoneRep],RETURN_TRUE);
InstallMethod(SeekPositionStream,"input text none",[IsInputTextNone and IsInputTextNoneRep,IsInt],RETURN_TRUE);
DeclareRepresentation("IsOutputTextStringRep",IsPositionalObjectRep,["string","format"]);
OutputTextStringType:=NewType(StreamsFamily,IsOutputTextStream and IsOutputTextStringRep);
InstallMethod(OutputTextString,"output text stream from string",[IsList,IsBool],COM_FUN(56));
InstallMethod(PrintObj,"output text string",[IsOutputTextStringRep],COM_FUN(57));
InstallMethod(WriteAll,"output text string",[IsOutputTextStream and IsOutputTextStringRep,IsList],COM_FUN(58));
InstallMethod(WriteByte,"output text string",[IsOutputTextStream and IsOutputTextStringRep,IsInt],COM_FUN(59));
InstallMethod(PrintFormattingStatus,"output text string",[IsOutputTextStringRep and IsOutputTextStream],COM_FUN(60));
InstallMethod(SetPrintFormattingStatus,"output text string",[IsOutputTextStringRep and IsOutputTextStream,IsBool],COM_FUN(61));
DeclareRepresentation("IsOutputTextFileRep",IsPositionalObjectRep,["fid","fname","format"]);
OutputTextFileType:=NewType(StreamsFamily,IsOutputTextStream and IsOutputTextFileRep);
OutputTextFileStillOpen:=[];
InstallMethod(OutputTextFile,"output text stream from file",[IsList,IsBool],COM_FUN(62));
InstallOtherMethod(OutputTextFile,"error catching method, append not given",[IsList],-SUM_FLAGS,COM_FUN(63));
InstallMethod(CloseStream,"output text file",[IsOutputStream and IsOutputTextFileRep],COM_FUN(64));
InstallAtExit(COM_FUN(65));
InstallMethod(PrintObj,"output text file",[IsOutputTextFileRep],COM_FUN(66));
InstallMethod(WriteByte,"output text file",[IsOutputTextStream and IsOutputTextFileRep,IsInt],COM_FUN(67));
InstallMethod(WriteAll,"output text file",[IsOutputTextStream and IsOutputTextFileRep,IsString],COM_FUN(68));
InstallMethod(PrintFormattingStatus,"output text file",[IsOutputTextFileRep and IsOutputTextStream],COM_FUN(69));
InstallMethod(SetPrintFormattingStatus,"output text file",[IsOutputTextFileRep and IsOutputTextStream,IsBool],COM_FUN(70));
DeclareRepresentation("IsOutputTextNoneRep",IsPositionalObjectRep,[]);
OutputTextNoneType:=NewType(StreamsFamily,IsOutputTextNone and IsOutputTextNoneRep);
InstallGlobalFunction(OutputTextNone,COM_FUN(71));
InstallMethod(PrintObj,"output text none",[IsOutputTextNoneRep],COM_FUN(72));
InstallMethod(WriteAll,"output text none",[IsOutputTextNone and IsOutputTextNoneRep,IsList],COM_FUN(73));
InstallMethod(WriteByte,"output text none",[IsOutputTextNone and IsOutputTextNoneRep,IsInt],COM_FUN(74));
InstallMethod(PrintFormattingStatus,"output text none",[IsOutputTextNoneRep and IsOutputTextNone],ReturnFalse);
InstallMethod(SetPrintFormattingStatus,"output text none",[IsOutputTextNoneRep and IsOutputTextNone,IsBool],COM_FUN(75));
InstallGlobalFunction(InputTextUser,COM_FUN(76));
InstallGlobalFunction(OutputTextUser,COM_FUN(77));
DeclareRepresentation("IsInputOutputStreamByPtyRep",IsPositionalObjectRep,[]);
InputOutputStreamByPtyDefaultType:=NewType(StreamsFamily,IsInputOutputStreamByPtyRep and IsInputOutputStream);
InstallGlobalFunction(InputOutputLocalProcess,COM_FUN(78));
InstallMethod(ViewObj,[IsInputOutputStreamByPtyRep and IsInputOutputStream,],COM_FUN(79));
InstallMethod(PrintObj,[IsInputOutputStreamByPtyRep and IsInputOutputStream],COM_FUN(80));
InstallMethod(ReadByte,[IsInputOutputStreamByPtyRep and IsInputOutputStream],COM_FUN(81));
InstallMethod(ReadLine,[IsInputOutputStreamByPtyRep and IsInputOutputStream],COM_FUN(82));
BindGlobal("ReadAllIoStreamByPty",COM_FUN(83));
InstallMethod(ReadAll,[IsInputOutputStreamByPtyRep and IsInputOutputStream],COM_FUN(84));
InstallMethod(ReadAll,[IsInputOutputStreamByPtyRep and IsInputOutputStream,IsInt],COM_FUN(85));
InstallMethod(WriteByte,[IsInputOutputStreamByPtyRep and IsInputOutputStream,IsInt],COM_FUN(86));
InstallMethod(WriteAll,[IsInputOutputStreamByPtyRep and IsInputOutputStream,IsString],COM_FUN(87));
InstallMethod(IsEndOfStream,[IsInputOutputStreamByPtyRep and IsInputOutputStream],COM_FUN(88));
InstallMethod(CloseStream,[IsInputOutputStreamByPtyRep and IsInputOutputStream],COM_FUN(89));
InstallMethod(PrintFormattingStatus,"for non-text output stream",[IsOutputStream],COM_FUN(90));
InstallMethod(SetPrintFormattingStatus,"for non-text output stream",[IsOutputStream,IsBool],COM_FUN(91));
InstallMethod(FileDescriptorOfStream,[IsInputTextStream and IsInputTextFileRep],COM_FUN(92));
InstallMethod(FileDescriptorOfStream,[IsOutputTextStream and IsOutputTextFileRep],COM_FUN(93));
InstallMethod(FileDescriptorOfStream,[IsInputOutputStreamByPtyRep and IsInputOutputStream],COM_FUN(94));
InstallValue(OnCharReadHookInFuncs,[]);
InstallValue(OnCharReadHookInFds,[]);
InstallValue(OnCharReadHookInStreams,[]);
InstallValue(OnCharReadHookOutFuncs,[]);
InstallValue(OnCharReadHookOutFds,[]);
InstallValue(OnCharReadHookOutStreams,[]);
InstallValue(OnCharReadHookExcFuncs,[]);
InstallValue(OnCharReadHookExcFds,[]);
InstallValue(OnCharReadHookExcStreams,[]);
OnCharReadHookActive:=false;
InstallGlobalFunction("InstallCharReadHookFunc",COM_FUN(95));
InstallGlobalFunction("UnInstallCharReadHookFunc",COM_FUN(96));
Unbind(OnCharReadHookActive);
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/streams.gi"

#F  file="lib/process.gi" crc=-114688533
RANK_FILTER_LIST  := [ 32662137, 3, 67108760, 5, 10960867, 4, 20578050, 4, 
  8193, 2, 32662137, 3, 67108760, 5, 66268324, 5, 20578050, 4, 8193, 2, 
  32662137, 3, 67108760, 5, 10960867, 4, 60384432, 5, 8193, 2, 32662137, 3, 
  67108760, 5, 66268324, 5, 60384432, 5, 8193, 2, 32662137, 3, 67108760, 5, 
  5479954, 3, 43843465, 3, 8193, 2 ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/process.gi", -114688533 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/process.gi\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/process.gi");
elif COM_RESULT = 3  then
Revision.process_gi:="@(#)$Id: process.gi,v 4.15.2.1 2004/04/27 19:23:09 gap Exp $";
InstallMethod(Process,[IsDirectory and IsDirectoryRep,IsString,IsInputTextNone,IsOutputTextNone,IsList],COM_FUN(1));
InstallMethod(Process,[IsDirectory and IsDirectoryRep,IsString,IsInputTextStream and IsInputTextFileRep,IsOutputTextNone,IsList],COM_FUN(2));
InstallMethod(Process,[IsDirectory and IsDirectoryRep,IsString,IsInputTextNone,IsOutputTextStream and IsOutputTextFileRep,IsList],COM_FUN(3));
EXECUTE_PROCESS_FILE_STREAM:=COM_FUN(4);
InstallMethod(Process,[IsDirectory and IsDirectoryRep,IsString,IsInputTextStream and IsInputTextFileRep,IsOutputTextStream and IsOutputTextFileRep,IsList],EXECUTE_PROCESS_FILE_STREAM);
PROCESS_INPUT_TEMPORARY:=fail;
PROCESS_OUTPUT_TEMPORARY:=fail;
InstallMethod(Process,[IsDirectory and IsDirectoryRep,IsString,IsInputTextStream,IsOutputTextStream,IsList],COM_FUN(5));
InstallGlobalFunction(Exec,COM_FUN(6));
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/process.gi"

#F  file="lib/combinat.gd" crc=29520648
RANK_FILTER_LIST  := [  ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/combinat.gd", 29520648 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/combinat.gd\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/combinat.gd");
elif COM_RESULT = 3  then
Revision.combinat_gd:="@(#)$Id: combinat.gd,v 4.13 2003/03/10 08:14:19 gap Exp $";
DeclareGlobalFunction("Factorial");
DeclareGlobalFunction("Binomial");
DeclareGlobalFunction("Bell");
DeclareGlobalFunction("Stirling1");
DeclareGlobalFunction("Stirling2");
DeclareGlobalFunction("Combinations");
DeclareGlobalFunction("NrCombinations");
DeclareGlobalFunction("Arrangements");
DeclareGlobalFunction("NrArrangements");
DeclareGlobalFunction("UnorderedTuples");
DeclareGlobalFunction("NrUnorderedTuples");
DeclareGlobalFunction("Tuples");
DeclareGlobalFunction("EnumeratorOfTuples");
DeclareGlobalFunction("NrTuples");
DeclareGlobalFunction("PermutationsList");
DeclareGlobalFunction("NrPermutationsList");
DeclareGlobalFunction("Derangements");
DeclareGlobalFunction("NrDerangements");
DeclareGlobalFunction("PartitionsSet");
DeclareGlobalFunction("NrPartitionsSet");
DeclareGlobalFunction("PartitionsRecursively");
DeclareGlobalFunction("Partitions");
DeclareGlobalFunction("NrPartitions");
DeclareGlobalFunction("PartitionsGreatestLE");
DeclareGlobalFunction("PartitionsGreatestEQ");
DeclareGlobalFunction("OrderedPartitions");
DeclareGlobalFunction("NrOrderedPartitions");
DeclareGlobalFunction("RestrictedPartitions");
DeclareGlobalFunction("NrRestrictedPartitions");
DeclareGlobalFunction("SignPartition");
DeclareGlobalFunction("AssociatedPartition");
DeclareGlobalFunction("PowerPartition");
DeclareGlobalFunction("PartitionTuples");
DeclareGlobalFunction("NrPartitionTuples");
DeclareGlobalFunction("Lucas");
DeclareGlobalFunction("Fibonacci");
DeclareGlobalFunction("Bernoulli");
DeclareGlobalFunction("Permanent");
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/combinat.gd"

#F  file="lib/combinat.gi" crc=119544282
RANK_FILTER_LIST  := [  ];
RANK_FILTER_COUNT := 1;

#C  load module, file, or complete
COM_RESULT := COM_FILE( "lib/combinat.gi", 119544282 );
if COM_RESULT = fail  then
Error("cannot locate file \"lib/combinat.gi\"");
elif COM_RESULT = 1  then
;
elif COM_RESULT = 2  then
;
elif COM_RESULT = 4  then
READ_CHANGED_GAP_ROOT("lib/combinat.gi");
elif COM_RESULT = 3  then
Revision.combinat_gi:="@(#)$Id: combinat.gi,v 4.19.2.1 2004/05/05 14:57:20 gap Exp $";
InstallGlobalFunction(Factorial,COM_FUN(1));
InstallGlobalFunction(Binomial,COM_FUN(2));
InstallGlobalFunction(Bell,COM_FUN(3));
InstallGlobalFunction(Stirling1,COM_FUN(4));
InstallGlobalFunction(Stirling2,COM_FUN(5));
CombinationsA:=COM_FUN(6);
MakeReadOnlyGlobal("CombinationsA");
CombinationsK:=COM_FUN(7);
MakeReadOnlyGlobal("CombinationsK");
InstallGlobalFunction(Combinations,COM_FUN(8));
BindGlobal("NrCombinationsX",COM_FUN(9));
BindGlobal("NrCombinationsSetA",COM_FUN(10));
BindGlobal("NrCombinationsMSetA",COM_FUN(11));
BindGlobal("NrCombinationsSetK",COM_FUN(12));
BindGlobal("NrCombinationsMSetK",COM_FUN(13));
InstallGlobalFunction(NrCombinations,COM_FUN(14));
ArrangementsA:=COM_FUN(15);
MakeReadOnlyGlobal("ArrangementsA");
ArrangementsK:=COM_FUN(16);
MakeReadOnlyGlobal("ArrangementsK");
InstallGlobalFunction(Arrangements,COM_FUN(17));
BindGlobal("NrArrangementsX",COM_FUN(18));
BindGlobal("NrArrangementsSetA",COM_FUN(19));
BindGlobal("NrArrangementsMSetA",COM_FUN(20));
BindGlobal("NrArrangementsSetK",COM_FUN(21));
BindGlobal("NrArrangementsMSetK",COM_FUN(22));
InstallGlobalFunction(NrArrangements,COM_FUN(23));
UnorderedTuplesK:=COM_FUN(24);
MakeReadOnlyGlobal("UnorderedTuplesK");
InstallGlobalFunction(UnorderedTuples,COM_FUN(25));
InstallGlobalFunction(NrUnorderedTuples,COM_FUN(26));
TuplesK:=COM_FUN(27);
MakeReadOnlyGlobal("TuplesK");
InstallGlobalFunction(Tuples,COM_FUN(28));
InstallGlobalFunction(EnumeratorOfTuples,COM_FUN(29));
InstallGlobalFunction(NrTuples,COM_FUN(30));
PermutationsListK:=COM_FUN(31);
MakeReadOnlyGlobal("PermutationsListK");
InstallGlobalFunction(PermutationsList,COM_FUN(32));
InstallGlobalFunction(NrPermutationsList,COM_FUN(33));
DerangementsK:=COM_FUN(34);
MakeReadOnlyGlobal("DerangementsK");
InstallGlobalFunction(Derangements,COM_FUN(35));
NrDerangementsK:=COM_FUN(36);
MakeReadOnlyGlobal("NrDerangementsK");
InstallGlobalFunction(NrDerangements,COM_FUN(37));
Permanent2:=COM_FUN(38);
MakeReadOnlyGlobal("Permanent2");
InstallGlobalFunction(Permanent,COM_FUN(39));
PartitionsSetA:=COM_FUN(40);
MakeReadOnlyGlobal("PartitionsSetA");
PartitionsSetK:=COM_FUN(41);
MakeReadOnlyGlobal("PartitionsSetK");
InstallGlobalFunction(PartitionsSet,COM_FUN(42));
InstallGlobalFunction(NrPartitionsSet,COM_FUN(43));
PartitionsA:=COM_FUN(44);
MakeReadOnlyGlobal("PartitionsA");
PartitionsK:=COM_FUN(45);
MakeReadOnlyGlobal("PartitionsK");
InstallGlobalFunction(PartitionsRecursively,COM_FUN(46));
BindGlobal("GPartitionsEasy",COM_FUN(47));
BindGlobal("GPartitions",COM_FUN(48));
BindGlobal("GPartitionsNrPartsHelper",COM_FUN(49));
BindGlobal("GPartitionsNrParts",COM_FUN(50));
InstallGlobalFunction(Partitions,COM_FUN(51));
InstallGlobalFunction(NrPartitions,COM_FUN(52));
BindGlobal("GPartitionsGreatestLEEasy",COM_FUN(53));
BindGlobal("GPartitionsGreatestLE",COM_FUN(54));
InstallGlobalFunction(PartitionsGreatestLE,COM_FUN(55));
BindGlobal("GPartitionsGreatestEQHelper",COM_FUN(56));
BindGlobal("GPartitionsGreatestEQ",COM_FUN(57));
InstallGlobalFunction(PartitionsGreatestEQ,COM_FUN(58));
OrderedPartitionsA:=COM_FUN(59);
MakeReadOnlyGlobal("OrderedPartitionsA");
OrderedPartitionsK:=COM_FUN(60);
MakeReadOnlyGlobal("OrderedPartitionsK");
InstallGlobalFunction(OrderedPartitions,COM_FUN(61));
InstallGlobalFunction(NrOrderedPartitions,COM_FUN(62));
RestrictedPartitionsA:=COM_FUN(63);
MakeReadOnlyGlobal("RestrictedPartitionsA");
RestrictedPartitionsK:=COM_FUN(64);
MakeReadOnlyGlobal("RestrictedPartitionsK");
InstallGlobalFunction(RestrictedPartitions,COM_FUN(65));
NrRestrictedPartitionsK:=COM_FUN(66);
MakeReadOnlyGlobal("NrRestrictedPartitionsK");
InstallGlobalFunction(NrRestrictedPartitions,COM_FUN(67));
InstallGlobalFunction(SignPartition,COM_FUN(68));
InstallGlobalFunction(AssociatedPartition,COM_FUN(69));
InstallGlobalFunction(PowerPartition,COM_FUN(70));
InstallGlobalFunction(PartitionTuples,COM_FUN(71));
InstallGlobalFunction(NrPartitionTuples,COM_FUN(72));
InstallGlobalFunction(Lucas,COM_FUN(73));
InstallGlobalFunction(Fibonacci,COM_FUN(74));
BindGlobal("Bernoulli2",[-1/2,1/6,0,-1/30,0,1/42,0,-1/30,0,5/66,0,-691/2730,0,7/6]);
InstallGlobalFunction(Bernoulli,COM_FUN(75));
else
Error("unknown result code ", COM_RESULT );
fi;

#U  unbind temporary variables
Unbind(RANK_FILTER_LIST);
Unbind(RANK_FILTER_COUNT);
Unbind(COM_RESULT);
#E  file="lib/combinat.gi"

