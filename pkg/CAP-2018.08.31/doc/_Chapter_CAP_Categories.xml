<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_CAP_Categories">
<Heading>CAP Categories</Heading>

<P/>
Categories are the main GAP objects in CAP.
They are used to associate GAP objects which represent objects and
morphisms with their category. By associating a GAP object to the
category, one of two filters belonging to the category (ObjectFilter/MorphismFilter)
are set to true.
Via Add methods, functions for specific existential quantifiers can be
associated to the category and after that can be applied to GAP objects in the category.
A GAP category object also knows which constructions
are currently possible in this category.

<Section Label="Chapter_CAP_Categories_Section_Categories">
<Heading>Categories</Heading>

<ManSection>
  <Filt Arg="object" Name="IsCapCategory" Label="for IsObject"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The GAP category of CAP categories. Objects of this type handle
the CAP category information, the caching, and filters for objects in the CAP category.
Please note that the object itself is not related to methods, you only need it
as a handler and a presentation of the CAP category.
 </Description>
</ManSection>


<ManSection>
  <Filt Arg="object" Name="IsCapCategoryCell" Label="for IsObject"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The GAP category of CAP category cells.
Every object, morphism, and <Math>2</Math>-cell
of a CAP category lies in this GAP category.
 </Description>
</ManSection>


<ManSection>
  <Filt Arg="object" Name="IsCapCategoryObject" Label="for IsCapCategoryCell"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The GAP category of CAP category objects.
Every object of a CAP category lies in
this GAP category.
 </Description>
</ManSection>


<ManSection>
  <Filt Arg="object" Name="IsCapCategoryMorphism" Label="for IsCapCategoryCell"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The GAP category of CAP category morphisms.
Every morphism of a CAP category lies in
this GAP category.
 </Description>
</ManSection>


<ManSection>
  <Filt Arg="object" Name="IsCapCategoryTwoCell" Label="for IsCapCategoryCell"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The GAP category of CAP category <Math>2</Math>-cells.
Every <Math>2</Math>-cell of a CAP category lies in
this GAP category.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_CAP_Categories_Section_Constructor">
<Heading>Constructor</Heading>

<ManSection>
  <Oper Arg="" Name="CreateCapCategory" />
 <Returns>a category
</Returns>
 <Description>
Creates a new CAP category from scratch.
It gets a generic name.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="s" Name="CreateCapCategory" Label="for IsString"/>
 <Returns>a category
</Returns>
 <Description>
The argument is a string <Math>s</Math>.
This operation creates a new CAP category from scratch.
Its name is set to <Math>s</Math>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_CAP_Categories_Section_Internal_Attributes">
<Heading>Internal Attributes</Heading>

Each category <Math>C</Math> stores various filters.
They are used to apply the right functions in the method selection.
<ManSection>
  <Attr Arg="C" Name="CategoryFilter" Label="for IsCapCategory"/>
 <Returns>a filter
</Returns>
 <Description>
The argument is a category <Math>C</Math>.
The output is a filter in which <Math>C</Math> lies.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="CellFilter" Label="for IsCapCategory"/>
 <Returns>a filter
</Returns>
 <Description>
The argument is a category <Math>C</Math>.
The output is a filter in which all cells
of <Math>C</Math> shall lie.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="ObjectFilter" Label="for IsCapCategory"/>
 <Returns>a filter
</Returns>
 <Description>
The argument is a category <Math>C</Math>.
The output is a filter in which all objects
of <Math>C</Math> shall lie.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="MorphismFilter" Label="for IsCapCategory"/>
 <Returns>a filter
</Returns>
 <Description>
The argument is a category <Math>C</Math>.
The output is a filter in which all morphisms
of <Math>C</Math> shall lie.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="TwoCellFilter" Label="for IsCapCategory"/>
 <Returns>a filter
</Returns>
 <Description>
The argument is a category <Math>C</Math>.
The output is a filter in which all <Math>2</Math>-cells
of <Math>C</Math> shall lie.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="C" Name="CommutativeRingOfLinearCategory" Label="for IsCapCategory"/>
 <Returns>a ring
</Returns>
 <Description>
The argument is a category <Math>C</Math> which is expected to lie in the
filter <C>IsLinearCategoryOverCommutativeRing</C>.
The output is a commutative ring over which the category is linear.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_CAP_Categories_Section_Logic_switcher">
<Heading>Logic switcher</Heading>

<ManSection>
  <Func Arg="C" Name="CapCategorySwitchLogicOn" />
 <Description>
Activates the predicate implication logic for the category <A>C</A>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="C" Name="CapCategorySwitchLogicOff" />
 <Description>
Deactivates the predicate implication logic for the category <A>C</A>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_CAP_Categories_Section_Tool_functions">
<Heading>Tool functions</Heading>

<ManSection>
  <Oper Arg="C,s" Name="CanCompute" Label="for IsCapCategory, IsString"/>
 <Returns><C>true</C> or <C>false</C>
</Returns>
 <Description>
The argument is a category <Math>C</Math> and a string <Math>s</Math>,
which should be the name of a primitive operation, e.g., PreCompose.
If applying this method is possible in <Math>C</Math>, the method returns <C>true</C>, <C>false</C> otherwise.
If the string is not the name of a primitive operation, an error is raised.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="C,s" Name="CheckConstructivenessOfCategory" Label="for IsCapCategory, IsString"/>
 <Returns>a list
</Returns>
 <Description>
The arguments are a category <Math>C</Math> and a string <Math>s</Math>.
If <Math>s</Math> is a categorical property (e.g. <C>"IsAbelianCategory"</C>),
the output is a list of strings with basic operations
which are missing in <Math>C</Math> to have the categorical property
constructively.
If <Math>s</Math> is not a categorical property, an error is raised.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_CAP_Categories_Section_Well-Definedness_of_Cells">
<Heading>Well-Definedness of Cells</Heading>

<ManSection>
  <Prop Arg="c" Name="IsWellDefined" Label="for IsCapCategoryCell"/>
 <Returns>a boolean
</Returns>
 <Description>
The argument is a cell <Math>c</Math>.
The output is <C>true</C> if <Math>c</Math> is well-defined,
otherwise the output is <C>false</C>.
 </Description>
</ManSection>


</Section>



<Section Label="Chapter_CAP_Categories_Section_Type_check">
<Heading>Type check</Heading>

<ManSection Label="AutoDoc_generated_group1">
  <Func Arg="category" Name="DisableBasicOperationTypeCheck" />
  <Func Arg="arg" Name="EnablePartialBasicOperationTypeCheck" />
  <Func Arg="arg" Name="EnableFullBasicOperationTypeCheck" />
 <Description>
Most operations have prefunctions, that perform additional checks on
the arguments. The checks can either be partial (enabled by default),
full, or disabled. With the following commands you can either
enable the full checks, just the basic checks, or, for performance,
disable the checks alltogether.
<P/>
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_CAP_Categories_Section_Disable_add_in_functions">
<Heading>Disable add in functions</Heading>

<ManSection Label="AutoDoc_generated_group2">
  <Func Arg="C" Name="DisableAddForCategoricalOperations" />
  <Func Arg="arg" Name="EnableAddForCategoricalOperations" />
 <Description>
Enables/disables the call of add for the output
of primitively added functions for the category <A>C</A>.
This can be savely done if the all objects and morphisms
are added to the category by their constructors.
<P/>
 </Description>
</ManSection>


</Section>


<P/>
</Chapter>

