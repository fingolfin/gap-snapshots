<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Commands">
<Heading>Commands</Heading>

<Section Label="Chapter_Commands_Section_Installing_and_updating_packages">
<Heading>Installing and updating packages</Heading>

<ManSection>
  <Func Arg="string[, interactive]" Name="InstallPackage" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to download and install a package.  The argument <Code>string</Code> should
   be a string containing one of the following:
<List>
<Item>
the name of a package;
</Item>
<Item>
the URL of a package archive, ending in <Code>.tar.gz</Code> or <Code>.tar.bz2</Code>;
</Item>
<Item>
the URL of a git repository, ending in <Code>.git</Code>;
</Item>
<Item>
the URL of a mercurial repository;
</Item>
<Item>
the URL of a valid <Code>PackageInfo.g</Code> file.
</Item>
</List>
<P/>
   The package will then be downloaded and installed, along with any
   additional packages that are required in order for it to be loaded.  Its
   documentation will also be built if necessary.  If this installation is
   successful, or if this package is already installed, <Code>true</Code> is returned;
   otherwise, <Code>false</Code> is returned.
<P/>
   By default, packages will be installed in user's home directory at
   <Code>~/.gap/pkg</Code>.  Note that this location is not the default user pkg location
   on Mac OSX, but it will be created on any system if not already present.
   Note also that starting GAP with the <Code>-r</Code> flag will cause all packages in
   this directory to be ignored.
<P/>
   Certain decisions, such as installing newer versions of packages, will be
   confirmed by the user via an interactive shell - to avoid this
   interactivity and use sane defaults instead, the optional second argument
   <Code>interactive</Code> can be set to <Code>false</Code>.
<P/>
   To see more information about this process while it is ongoing, see
   <Code>InfoPackageManager</Code>.
<P/>
<Example><![CDATA[
gap> InstallPackage("digraphs");
true
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <Func Arg="name[, interactive]" Name="UpdatePackage" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to update an installed package to the latest version.  The first
   argument <Code>name</Code> should be a string specifying the name of a package
   installed in the user GAP root (for example, one installed using <Ref
   Func="InstallPackage" />).  The second argument <Code>interactive</Code> is optional,
   and should be a boolean specifying whether to confirm interactively before
   any directories are deleted (default value <Code>true</Code>).
<P/>
   If the package was installed via archive, the new version will be installed
   in a new directory, and the old version will be deleted.  If installed via
   git or mercurial, it will be updated using <Code>git pull</Code> or <Code>hg pull -u</Code>, so
   long as there are no outstanding changes.  If no newer version is
   available, no changes will be made.
<P/>
   This process will also attempt to fix the package if it is broken, for
   example if it needs to be recompiled or if one of its dependencies is
   missing or broken.
<P/>
   Returns <Code>true</Code> if a newer version was installed successfully, or if no
   newer version is available.  Returns <Code>false</Code> otherwise.
<P/>
<Example><![CDATA[
gap> UpdatePackage("io");
#I  io version 4.6.0 will be installed, replacing 4.5.4
#I  Saved archive to /tmp/tm7r5Ug7/io-4.6.0.tar.gz
Remove old version of io at /home/user/.gap/pkg/io-4.5.4 ? [y/N] y
true
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <InfoClass Name="InfoPackageManager" />
 <Description>
   Info class for the PackageManager package.  Set this to the following
   levels for different levels of information:
<List>
<Item>
0 - No messages
</Item>
<Item>
1 - Problems only: messages describing what went wrong, with no
           messages if an operation is successful
</Item>
<Item>
2 - Directories and versions: also displays informations about package
           versions and installation directories
</Item>
<Item>
3 - Progress: also shows step-by-step progress of operations
</Item>
<Item>
4 - All: includes extra information such as whether curlInterface is
           being used
</Item>
</List>
<P/>
   Set this using, for example <Code>SetInfoLevel(InfoPackageManager, 1)</Code>.
   Default value is 3.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="name[, interactive]" Name="InstallPackageFromName" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to download and install a package given only its name.  Returns
   <Code>false</Code> if something went wrong, and <Code>true</Code> otherwise.
<P/>
   Certain decisions, such as installing newer versions of packages, will be
   confirmed by the user via an interactive shell - to avoid this
   interactivity and use sane defaults instead, the optional second argument
   <Code>interactive</Code> can be set to <Code>false</Code>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="info" Name="InstallPackageFromInfo" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to download and install a package from a valid PackageInfo.g file.
   The argument <Code>info</Code> should be either a valid package info record, or a URL
   that points to a valid PackageInfo.g file.  Returns <Code>true</Code> if the
   installation was successful, and <Code>false</Code> otherwise.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="url" Name="InstallPackageFromArchive" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to download and install a package from an archive located at the
   given URL.  Returns <Code>true</Code> if the installation was successful, and <Code>false</Code>
   otherwise.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="url[, interactive][, branch]" Name="InstallPackageFromGit" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to download and install a package from a git repository located at
   the given URL.  Returns <Code>false</Code> if something went wrong, and <Code>true</Code>
   otherwise.
<P/>
   If the optional string argument <Code>branch</Code> is specified, this function will
   install the branch with this name.  Otherwise, the repository's default
   branch will be used.
<P/>
   Certain decisions, such as installing newer versions of packages, will be
   confirmed by the user via an interactive shell - to avoid this
   interactivity and use sane defaults instead, the optional second argument
   <Code>interactive</Code> can be set to <Code>false</Code>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="url[, interactive][, branch]" Name="InstallPackageFromHg" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to download and install a package from a Mercurial repository
   located at the given URL.  Returns <Code>false</Code> if something went wrong, and
   <Code>true</Code> otherwise.
<P/>
   If the optional string argument <Code>branch</Code> is specified, this function will
   install the branch with this name.  Otherwise, the repository's default
   branch will be used.
<P/>
   Certain decisions, such as installing newer versions of packages, will be
   confirmed by the user via an interactive shell - to avoid this
   interactivity and use sane defaults instead, the optional second argument
   <Code>interactive</Code> can be set to <Code>false</Code>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="" Name="InstallRequiredPackages" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to download and install the latest versions of all packages
   required for GAP to run.  Currently these packages are GAPDoc, primgrp,
   SmallGrp, and transgrp.  Returns <Code>false</Code> if something went wrong, and
   <Code>true</Code> otherwise.
<P/>
   Clearly, since these packages are required for GAP to run, they must be
   loaded before this function can be executed.  However, this function
   installs the packages in the <Code>~/.gap/pkg</Code> directory, so that they can be
   managed by PackageManager in the future, and are available for other GAP
   installations on the machine.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Commands_Section_Removing_packages">
<Heading>Removing packages</Heading>

<ManSection>
  <Func Arg="name[, interactive]" Name="RemovePackage" />
 <Returns>   true or false
</Returns>
 <Description>
   Attempts to remove an installed package using its name.  The first argument
   <Code>name</Code> should be a string specifying the name of a package installed in the
   user GAP root.  The second argument <Code>interactive</Code> is optional, and should
   be a boolean specifying whether to confirm certain decisions interactively
   (default value <Code>true</Code>).
<P/>
   Returns <Code>true</Code> if the removal was successful, and <Code>false</Code> otherwise.
<P/>
<Example><![CDATA[
gap> RemovePackage("digraphs");
Really delete directory /home/user/.gap/pkg/digraphs-0.13.0 ? [y/N] y
true
]]></Example>


<P/>
 </Description>
</ManSection>


</Section>


</Chapter>

