<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Commands">
<Heading>Commands</Heading>

<Section Label="Chapter_Commands_Section_Installing_packages">
<Heading>Installing packages</Heading>

<ManSection>
  <Func Arg="string[, interactive]" Name="InstallPackage" />
 <Returns>true or false
</Returns>
 <Description>
Attempts to download and install a package. The argument <A>string</A>
should be a string containing one of the following:
<List>
<Item>
the name of a package;
</Item>
<Item>
the URL of a package archive, ending in <C>.tar.gz</C>;
</Item>
<Item>
the URL of a git repository, ending in <C>.git</C>;
</Item>
<Item>
the URL of a mercurial repository, ending in <C>.hg</C>;
</Item>
<Item>
the URL of a valid <C>PackageInfo.g</C> file.
</Item>
</List>
<P/>
The package will then be downloaded and installed, along with any
additional packages that are required in order for it to be loaded. If
this installation is successful, <K>true</K> is returned; otherwise,
<K>false</K> is returned.
<P/>
By default, packages will be installed in user's home directory at
<C>~/.gap/pkg</C>. Note that this location is not the default user pkg
location on Mac OSX, but it will be created on any system if not already
present. Note also that starting GAP with the <C>-r</C> flag will cause
all packages in this directory to be ignored.
<P/>
Certain decisions, such as installing newer versions of packages, will be
confirmed by the user via an interactive shell - to avoid this
interactivity and use sane defaults instead, the optional second argument
<A>interactive</A> can be set to <K>false</K>.
<P/>
To see more information about this process while it is ongoing, see
<C>InfoPackageManager</C>.
<P/>
<Example><![CDATA[
gap> InstallPackage("digraphs");
true
]]></Example>


<P/>
 </Description>
</ManSection>


<ManSection>
  <InfoClass Name="InfoPackageManager" />
 <Description>
Info class for the PackageManager package. Set this to the following
levels for different levels of information:
<List>
<Item>
0 - No messages
</Item>
<Item>
1 - Problems only: messages describing what went wrong, with no
messages if an operation is successful
</Item>
<Item>
2 - Problems and directories: also displays directories that were used
for package installation or removal
</Item>
<Item>
3 - Progress: also shows step-by-step progress of operations
</Item>
<Item>
4 - All: includes extra information such as whether curlInterface is
being used
</Item>
</List>
<P/>
Set this using, for example <C>SetInfoLevel(InfoPackageManager, 1)</C>.
Default value is 3.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="name[, interactive]" Name="InstallPackageFromName" />
 <Returns>true or false
</Returns>
 <Description>
Attempts to download and install a package given only its name. Returns
<K>true</K> if the installation was successful, and <K>false</K> otherwise.
<P/>
Certain decisions, such as installing newer versions of packages, will be
confirmed by the user via an interactive shell - to avoid this
interactivity and use sane defaults instead, the optional second argument
<A>interactive</A> can be set to <K>false</K>.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="info" Name="InstallPackageFromInfo" />
 <Returns>true or false
</Returns>
 <Description>
Attempts to download and install a package from a valid PackageInfo.g file.
The argument <A>info</A> should be either a valid package info record, or a
URL that points to a valid PackageInfo.g file. Returns <K>true</K> if the
installation was successful, and <K>false</K> otherwise.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="url" Name="InstallPackageFromArchive" />
 <Returns>true or false
</Returns>
 <Description>
Attempts to download and install a package from an archive located at the
given URL. Returns <K>true</K> if the installation was successful, and
<K>false</K> otherwise.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="url" Name="InstallPackageFromGit" />
 <Returns>true or false
</Returns>
 <Description>
Attempts to download and install a package from a git repository located at
the given URL. Returns <K>true</K> if the installation was successful, and
<K>false</K> otherwise.
 </Description>
</ManSection>


<ManSection>
  <Func Arg="url" Name="InstallPackageFromHg" />
 <Returns>true or false
</Returns>
 <Description>
Attempts to download and install a package from a Mercurial repository
located at the given URL. Returns <K>true</K> if the installation was
successful, and <K>false</K> otherwise.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Commands_Section_Removing_packages">
<Heading>Removing packages</Heading>

<ManSection>
  <Func Arg="name[, interactive]" Name="RemovePackage" />
 <Returns>true or false
</Returns>
 <Description>
Attempts to remove an installed package using its name. The first argument
<A>name</A> should be a string specifying the name of a package installed
in the user GAP root. The second argument <A>interactive</A> is optional,
and should be a boolean specifying whether to confirm interactively before
any directories are deleted (default value <K>true</K>).
<P/>
Returns <K>true</K> if the removal was successful, and <K>false</K>
otherwise.
<P/>
<Example><![CDATA[
gap> RemovePackage("digraphs");
Really delete directory /home/user/.gap/pkg/digraphs-0.13.0 ? [y/N] y
true
]]></Example>


<P/>
 </Description>
</ManSection>


</Section>


</Chapter>

