<!-- ------------------------------------------------------------------- -->
<!--                                                                     -->
<!--  groups.xml          Utils documentation                            -->
<!--                                                                     -->
<!--  Copyright (C) 2015-2019, The GAP Group                             --> 
<!--                                                                     -->
<!-- ------------------------------------------------------------------- -->

<?xml version="1.0" encoding="UTF-8"?>

<Chapter Label="chap-groups">
<Heading>Groups and homomorphisms</Heading>



<Section Label="sec-groups">
<Heading>Functions for groups</Heading>


<ManSection>
   <Oper Name="Comm"
         Arg="L" />
<Description>
This method has been transferred from package &ResClasses;. 
<P/>
It provides a method for <C>Comm</C> when the argument is a list 
(enclosed in square brackets), and calls the function <C>LeftNormedComm</C>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> Comm( [ (1,2), (2,3) ] );
(1,2,3)
gap> Comm( [(1,2),(2,3),(3,4),(4,5),(5,6)] );
(1,5,6)
gap> Comm(Comm(Comm(Comm((1,2),(2,3)),(3,4)),(4,5)),(5,6));  ## the same
(1,5,6)
]]>
</Example>

<ManSection>
   <Oper Name="IsCommuting"
         Arg="a b" />
<Description>
This function has been transferred from package &ResClasses;. 
<P/>
It tests whether two elements in a group commute. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> D12 := DihedralGroup( 12 );
<pc group of size 12 with 3 generators>
gap> SetName( D12, "D12" ); 
gap> a := D12.1;;  b := D12.2;;  
gap> IsCommuting( a, b );
false
]]>
</Example>

<ManSection>
   <Oper Name="ListOfPowers"
         Arg="g exp" />
<Description>
This function has been transferred from package &RCWA;. 
<P/>
The operation <C>ListOfPowers(g,exp)</C> returns the list 
<M>[g,g^2,...,g^{exp}]</M> of powers of the element <M>g</M>.
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> ListOfPowers( 2, 20 );
[ 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384,
 32768, 65536, 131072, 262144, 524288, 1048576 ]
gap> ListOfPowers( (1,2,3)(4,5), 12 );
[ (1,2,3)(4,5), (1,3,2), (4,5), (1,2,3), (1,3,2)(4,5), (),
 (1,2,3)(4,5), (1,3,2), (4,5), (1,2,3), (1,3,2)(4,5), () ]
gap> ListOfPowers( D12.2, 6 );
[ f2, f3, f2*f3, f3^2, f2*f3^2, <identity> of ... ]
]]>
</Example>

<ManSection>
   <Oper Name="GeneratorsAndInverses"
         Arg="G" />
<Description>
This function has been transferred from package &RCWA;. 
<P/>
This operation returns a list containing the generators of <M>G</M> 
followed by the inverses of these generators.  
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> GeneratorsAndInverses( D12 );
[ f1, f2, f3, f1, f2*f3^2, f3^2 ]
gap> GeneratorsAndInverses( SymmetricGroup(5) );     
[ (1,2,3,4,5), (1,2), (1,5,4,3,2), (1,2) ]
]]>
</Example>


<ManSection>
   <Attr Name="UpperFittingSeries"
         Arg="G" />
   <Attr Name="LowerFittingSeries"
         Arg="G" />
   <Attr Name="FittingLength"
         Arg="G" />
<Description>
These three functions have been transferred from package &ResClasses;. 
<P/>
<Index>Fitting series</Index> 
The upper and lower Fitting series and the Fitting length of a solvable
group are described here: 
<URL>https://en.wikipedia.org/wiki/Fitting_length</URL>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> UpperFittingSeries( D12 );  LowerFittingSeries( D12 );
[ Group([  ]), Group([ f3, f2*f3 ]), Group([ f1, f3, f2*f3 ]) ]
[ D12, Group([ f3 ]), Group([  ]) ]
gap> FittingLength( D12 );
2
gap> S4 := SymmetricGroup( 4 );;
gap> UpperFittingSeries( S4 );
[ Group(()), Group([ (1,2)(3,4), (1,4)(2,3) ]), Group([ (1,2)(3,4), (1,4)
  (2,3), (2,4,3) ]), Group([ (3,4), (2,3,4), (1,2)(3,4) ]) ]
gap> List( last, StructureDescription );
[ "1", "C2 x C2", "A4", "S4" ]
gap> LowerFittingSeries( S4 );
[ Sym( [ 1 .. 4 ] ), Alt( [ 1 .. 4 ] ), Group([ (1,4)(2,3), (1,3)
 (2,4) ]), Group(()) ]
gap> List( last, StructureDescription );
[ "S4", "A4", "C2 x C2", "1" ]
gap> FittingLength( S4);
3
]]>
</Example>

</Section>



<Section Label="sec-homomorphisms">
<Heading>Functions for group homomorphisms</Heading>

<ManSection>
   <Oper Name="EpimorphismByGenerators"
         Arg="G H" />
<Description>
This function has been transferred from package &RCWA;. 
<P/>
It constructs a group homomorphism which maps 
the generators of <M>G</M> to those of <M>H</M>. 
Its intended use is when <M>G</M> is a free group, 
and a warning is printed when this is not the case. 
Note that anything may happen if the resulting map is not a homomorphism! 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> G := Group( (1,2,3), (3,4,5), (5,6,7), (7,8,9) );;
gap> phi := EpimorphismByGenerators( FreeGroup("a","b","c","d"), G );
[ a, b, c, d ] -> [ (1,2,3), (3,4,5), (5,6,7), (7,8,9) ]
gap> PreImagesRepresentative( phi, (1,2,3,4,5,6,7,8,9) );
d*c*b*a
gap> a := G.1;; b := G.2;; c := G.3;; d := G.4;;
gap> d*c*b*a;
(1,2,3,4,5,6,7,8,9)
gap> ## note that it is easy to produce nonsense: 
gap> epi := EpimorphismByGenerators( Group((1,2,3)), Group((8,9)) );
Warning: calling GroupHomomorphismByImagesNC without checks
[ (1,2,3) ] -> [ (8,9) ]
gap> IsGroupHomomorphism( epi );
true
gap> Image( epi, (1,2,3) );                                            
()
gap> Image( epi, (1,3,2) );
(8,9)
]]>
</Example>


<ManSection>
   <Oper Name="Pullback"
         Arg="hom1 hom2" />
   <Attr Name="PullbackInfo"
         Arg="G" />
<Description>
If <M>\phi_1 : G_1 \to H</M> and <M>\phi_2 : G_2 \to H</M> 
are two group homomorphisms with the same range, then their <E>pullback</E> 
is the subgroup of <M>G_1 \times G_2</M> consisting of those elements 
<M>(g_1,g_2)</M> such that <M>\phi_1 g_1 = \phi_2 g_2</M>. 
<P/>
The attribute <C>PullbackInfo</C> of a pullback group <C>P</C> 
is similar to <C>DirectProductInfo</C> for a direct product of groups. 
It is a record with fields <C>P!.directProduct</C>, 
the direct product <M>G_1 \times G_2</M>; 
and <C>P!.projections</C>, a list with the two projections 
onto <M>G_1</M> and <M>G_2</M>. 
There are no embeddings in this record, 
but it is possible to use the embeddings into the direct product. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> s4 := Group( (1,2),(2,3),(3,4) );;
gap> s3 := Group( (5,6),(6,7) );;
gap> c3 := Subgroup( s3, [ (5,6,7) ] );;
gap> f := GroupHomomorphismByImages( s4, s3, 
>             [(1,2),(2,3),(3,4)], [(5,6),(6,7),(5,6)] );; 
gap> i := GroupHomomorphismByImages( c3, s3, [(5,6,7)], [(5,6,7)] );; 
gap> Pfi := Pullback( f, i );
Group([ (2,3,4)(5,7,6), (1,2)(3,4) ])
gap> StructureDescription( Pfi );
"A4"
gap> info := PullbackInfo( Pfi );
rec( directProduct := Group([ (1,2), (2,3), (3,4), (5,6,7) ]), 
  projections := [ [ (2,3,4)(5,7,6), (1,2)(3,4) ] -> [ (2,3,4), (1,2)(3,4) ], 
      [ (2,3,4)(5,7,6), (1,2)(3,4) ] -> [ (5,7,6), () ] ] )
gap> g := (1,2,3)(5,6,7);; 
gap> ImageElm( info!.projections[1], g );
(1,2,3)
gap> ImageElm( info!.projections[2], g );
(5,6,7) 
gap> dp := info!.directProduct;; 
gap> a := ImageElm( Embedding( dp, 1 ), (1,4,3) );; 
gap> b := ImageElm( Embedding( dp, 2 ), (5,7,6) );; 
gap> a*b in Pfi;
true
]]>
</Example>


<ManSection>
   <Oper Name="IdempotentEndomorphisms"
         Arg="G" />
   <Attr Name="IdempotentEndomorphismsData"
         Arg="G" />
   <Oper Name="IdempotentEndomorphismsWithImage"
         Arg="genG,R" />
<Description>
An endomorphism <M>f : G \to G</M> is idempotent if <M>f^2=f</M>. 
It has an image <M>R \leqslant G</M>; 
is the identity map when restricted to <M>R</M>; 
and has a kernel <M>N</M> which has trivial intersection with <M>R</M> 
and has size <M>|G|/|R|</M>. 
<P/> 
The operation <C>IdempotentEndomorphismsWithImage(genG,R)</C>
returns a list of the images of the generating set <C>genG</C> 
of a group <M>G</M> under the idempotent endomorphisms with image <M>R</M>. 
<P/>
The attribute <C>IdempotentEndomorphismsData(G)</C> returns a record 
<C>data</C> with fields <C>data.gens</C>, a fixed generating set for <M>G</M>, 
and <C>data.images</C> a list of the non-empty outputs of 
<C>IdempotentEndomorphismsWithImage(genG,R)</C> 
obtained by iterating over all subgroups of <M>G</M>. 
<P/> 
The operation <C>IdempotentEndomorphisms(G)</C> returns the list 
of these mappings obtained using <C>IdempotentEndomorphismsData(G)</C>. 
The first of these is the zero map, the second is the identity. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> gens := [ (1,2,3,4), (1,2)(3,4) ];; 
gap> d8 := Group( gens );;
gap> SetName( d8, "d8" );
gap> c2 := Subgroup( d8, [ (2,4) ] );;
gap> IdempotentEndomorphismsWithImage( gens, c2 );
[ [ (), (2,4) ], [ (2,4), () ] ]
gap> IdempotentEndomorphismsData( d8 );
rec( gens := [ (1,2,3,4), (1,2)(3,4) ], 
  images := [ [ [ (), () ] ], [ [ (), (2,4) ], [ (2,4), () ] ], 
      [ [ (), (1,3) ], [ (1,3), () ] ], 
      [ [ (), (1,2)(3,4) ], [ (1,2)(3,4), (1,2)(3,4) ] ], 
      [ [ (), (1,4)(2,3) ], [ (1,4)(2,3), (1,4)(2,3) ] ], 
      [ [ (1,2,3,4), (1,2)(3,4) ] ] ] )
gap> List( last.images, L -> Length(L) );
[ 1, 2, 2, 2, 2, 1 ]
gap> IdempotentEndomorphisms( d8 );               
[ [ (1,2,3,4), (1,2)(3,4) ] -> [ (), () ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (), (2,4) ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (2,4), () ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (), (1,3) ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (1,3), () ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (), (1,2)(3,4) ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (1,2)(3,4), (1,2)(3,4) ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (), (1,4)(2,3) ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (1,4)(2,3), (1,4)(2,3) ], 
  [ (1,2,3,4), (1,2)(3,4) ] -> [ (1,2,3,4), (1,2)(3,4) ] ]
]]>
</Example>

The quaternion group <C>q8</C> is an example of a group with a tail: 
there is only one subgroup in the lattice which covers the identity subgroup. 
The only idempotent isomorphisms of such groups are the identity mapping 
and the zero mapping because the only pairs <M>N,R</M> are the whole group and the identity subgroup. 
<Example>
<![CDATA[
gap> q8 := QuaternionGroup( 8 );;
gap> IdempotentEndomorphisms( q8 );
[ [ x, y ] -> [ <identity> of ..., <identity> of ... ], [ x, y ] -> [ x, y ] ]
]]>
</Example>

<ManSection>
   <Oper Name="DirectProductOfFunctions"
         Arg="G,H,f1,f2" />
<Description> 
Given group homomorphisms <M>f_1 : G_1 \to G_2</M> and <M>f_2 : H_1 \to H_2</M>, 
this operation return the product homomorphism  
<M>f_1 \times f_2 : G_1 \times G_2 \to H_1 \times H_2</M>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> c4 := Group( (1,2,3,4) );; 
gap> c2 := Group( (5,6) );; 
gap> f1 := GroupHomomorphismByImages( c4, c2, [(1,2,3,4)], [(5,6)] );;
gap> c3 := Group( (1,2,3) );; 
gap> c6 := Group( (1,2,3,4,5,6) );; 
gap> f2 := GroupHomomorphismByImages( c3, c6, [(1,2,3)], [(1,3,5)(2,4,6)] );; 
gap> c4c3 := DirectProduct( c4, c3 ); 
Group([ (1,2,3,4), (5,6,7) ])
gap> c2c6 := DirectProduct( c2, c6 ); 
Group([ (1,2), (3,4,5,6,7,8) ])
gap> f := DirectProductOfFunctions( c4c3, c2c6, f1, f2 ); 
[ (1,2,3,4), (5,6,7) ] -> [ (1,2), (3,5,7)(4,6,8) ]
gap> ImageElm( f, (1,4,3,2)(5,7,6) ); 
(1,2)(3,7,5)(4,8,6)
]]>
</Example>

<ManSection>
   <Oper Name="DirectProductOfAutomorphismGroups"
         Arg="A1,A2" />
<Description> 
Let <M>A_1,A_2</M> be groups of automorphism of groups <M>G_1,G_2</M> 
respectively.  The output of this function is a group <M>A_1 \times A_2</M> 
of automorphisms of <M>G_1 \times G_2</M>. 
<P/>
</Description>
</ManSection>
<Example>
<![CDATA[
gap> c9 := Group( (1,2,3,4,5,6,7,8,9) );; 
gap> ac9 := AutomorphismGroup( c9 );; 
gap> q8 := QuaternionGroup( IsPermGroup, 8 );;
gap> aq8 := AutomorphismGroup( q8 );;
gap> A := DirectProductOfAutomorphismGroups( ac9, aq8 );
<group with 5 generators>
gap> genA := GeneratorsOfGroup( A );;
gap> G := Source( genA[1] );
Group([ (1,2,3,4,5,6,7,8,9), (10,14,12,16)(11,17,13,15), (10,11,12,13)
(14,15,16,17) ])
gap> a := genA[1]*genA[5];  
[ (1,2,3,4,5,6,7,8,9), (10,14,12,16)(11,17,13,15), (10,11,12,13)(14,15,16,17) 
 ] -> [ (1,3,5,7,9,2,4,6,8), (10,16,12,14)(11,15,13,17), 
  (10,11,12,13)(14,15,16,17) ]
gap> ImageElm( a, (1,9,8,7,6,5,4,3,2)(10,14,12,16)(11,17,13,15) );
(1,8,6,4,2,9,7,5,3)(10,16,12,14)(11,15,13,17)
]]>
</Example>

</Section> 

</Chapter>
