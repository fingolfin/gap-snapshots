#############################################################################
##
#W  semigroups.xml
#Y  Copyright (C) 2011-12                                James D. Mitchell
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="ClosureSemigroup">
  <ManSection>
    <Func Name="ClosureSemigroup" Arg="S, coll [, opts]"/>
    <Returns>A transformation semigroup or monoid.</Returns>
    <Description>
      This function returns the semigroup or monoid generated by the
      transformation semigroup <A>S</A> and the transformation collection or
      transformation  <A>coll</A> after removing duplicates and transformations
      in <A>coll</A> that are already in <A>S</A>. In some cases, the new
      semigroup knows at least as much information about its structure as was
      already known about that of <A>S</A>. <P/>

      If present, the optional third argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created as
      described in Section <Ref Sect="opts"/>. For technical reasons
      if the option <C>schreier</C> is <K>false</K>, then
      <C>ClosureSemigroup(S, coll)</C> does exactly the same as
      <Ref Meth="Semigroup"/> or <Ref Meth="Monoid"/>, in that the new semigroup
      does not know any information about its structure even if the old
      semigroup had been completely determined. <P/> 

      More specifically, if the option <C>schreier</C> is <K>false</K>, then
      the new semigroup knows the Green's class of any representative of a
      Green's classes of <A>S</A> that was known at the time that
      <C>ClosureSemigroup</C> was called. Consequently, if, for example, the
      number of &R;-classes of <A>S</A> is greater than the number of elements
      required to find the &R;-classes of the new semigroup, then
      <C>ClosureSemigroup</C> might be less efficient than creating the new
      semigroup using the command <Ref Meth="Semigroup"/> or <Ref
      Meth="Monoid"/>. It is unlikely that you will be able to determine which
      of <C>ClosureSemigroup</C> and <Ref Meth="Semigroup"/> will be better
      before calling these functions, except in the following case. If the rank
      of the transformations in <A>coll</A> are lower than the ranks of the
      Green's classes containing the majority of the known elements of
      <A>S</A>, then <C>ClosureSemigroup</C> should be superior to <Ref
      Meth="Semigroup"/>.

      <Example>
gap> gens:=[ Transformation( [ 2, 6, 7, 2, 6, 1, 1, 5 ] ), 
>  Transformation( [ 3, 8, 1, 4, 5, 6, 7, 1 ] ), 
>  Transformation( [ 4, 3, 2, 7, 7, 6, 6, 5 ] ), 
>  Transformation( [ 7, 1, 7, 4, 2, 5, 6, 3 ] ) ];;
gap> S:=Monoid(gens[1], rec(schreier:=false));;
gap> for i in [2..4] do S:=ClosureSemigroup(S, gens[i]); od;
gap> S;
&lt;monoid with 4 generators>
gap> Size(S);
233606</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ClosureInverseSemigroup">
   <ManSection>
    <Func Name="ClosureInverseSemigroup"  Arg="S, coll [, opts]"/>
    <Returns>An inverse semigroup or monoid.</Returns>
    <Description>
      This function returns the inverse semigroup or monoid generated by the
      inverse semigroup of partial permutations <A>S</A> and the partial
      permutation collection or partial permutation <A>coll</A> after first
      removing duplicates and partial permutations in <A>coll</A> that are
      already in <A>S</A>. In most cases, the new semigroups knows at least as
      much information about its structure as was already known about that of
      <A>S</A>. <P/>

      If present, the optional third argument <A>opts</A> should be a record
      contiaing the values of the options for the inverse semigroup being
      created; these options are described in Section <Ref Sect="opts"/>. <P/>

      Unlike <Ref Func="ClosureSemigroup"/>, <C>ClosureInverseSemigroup</C> is
      always at least as efficient as (and often much more than) simply
      creating an inverse semigroup from scratch using 
      <Ref Func="InverseSemigroup"/>.
      <Example>
gap> S:=InverseMonoid(
> PartialPermNC( [ 1, 2, 3, 5, 6, 7, 8 ], [ 5, 9, 10, 6, 3, 8, 4 ] ),
> PartialPermNC( [ 1, 2, 4, 7, 8, 9 ], [ 10, 7, 8, 5, 9, 1 ] ) );;
gap> f:=PartialPermNC(
> [ 1, 2, 3, 4, 5, 7, 8, 10, 11, 13, 18, 19, 20 ],
> [ 5, 1, 7, 3, 10, 2, 12, 14, 11, 16, 6, 9, 15 ]);;
gap> S:=ClosureInverseSemigroup(S, f);
&lt;inverse semigroup with 3 generators>
gap> Size(S);
9726
gap> T:=Idempotents(SymmetricInverseSemigp(10));;
gap> S:=ClosureInverseSemigroup(S, T);
&lt;inverse semigroup with 858 generators>
gap> S:=InverseSemigroup(SmallGeneratingSet(S));
&lt;inverse semigroup with 14 generators></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="FullMatrixSemigroup">
   <ManSection>
    <Oper Name="FullMatrixSemigroup" Arg="d, q"/>
    <Oper Name="GeneralLinearSemigroup" Arg="d, q"/>
    <Returns>A matrix semigroup.</Returns>
    <Description>
      <C>FullMatrixSemigroup</C> and <C>GeneralLinearSemigroup</C> are synonyms
      for each other. They both return the full matrix semigroup, or if you
      prefer the general linear semigroup, of <A>d</A> by <A>d</A> matrices
      with entries over the field with <A>q</A> elements.  This semigroup has
      <C>q^(d^2)</C> elements. <P/>

      <B>Please note:</B> there are currently no special methods for computing
      with matrix semigroups in &Citrus; and so it might be advisable to use
      <Ref Oper="IsomorphismTransformationSemigroup"/>.

      <Example>
gap> S:=FullMatrixSemigroup(3,4);
&lt;full matrix semigroup 3x3 over GF(2^2)>
gap> T:=Range(IsomorphismTransformationSemigroup(S));;
gap> Size(T);
262144</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="IsFullMatrixSemigroup">
  <ManSection>
    <Prop Name="IsFullMatrixSemigroup" Arg="S"/>      
    <Prop Name="IsGeneralLinearSemigroup" Arg="S"/>      
    <Description>
      <C>IsFullMatrixSemigroup</C> and <C>IsGeneralLinearSemigroup</C> return
      <K>true</K> if the semigroup <C>S</C> was created using either of the
      commands <Ref Oper="FullMatrixSemigroup"/> or 
      <Ref Oper="GeneralLinearSemigroup"/> and <K>false</K> otherwise. 

      <Example>
gap> S:=RandomTransformationSemigroup(4,4);;
gap> IsFullMatrixSemigroup(S);
false
gap> S:=GeneralLinearSemigroup(3,3);
&lt;full matrix semigroup 3x3 over GF(3)>
gap> IsFullMatrixSemigroup(S);
true</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="MunnSemigroup">
    <ManSection>
      <Oper Name="MunnSemigroup" Arg="S"/>
      <Returns>The Munn semigroup of a semilattice.</Returns>
      <Description>
        If <A>S</A> is a semilattice, then <C>MunnSemigroup(<A>S</A>);</C>
        returns the inverse semigroup of partial permutations of isomorphisms
        of principal ideals of <A>S</A>; called the <E>Munn semigroup</E> of
        <A>S</A>.<P/> 

        This function was written jointly by J. D. Mitchell, Yann Peresse 
        (St Andrews), Yanhui Wang (York). <P/>

        <B>Please note:</B> the &Grape; package version &GRAPEVERS;
        or higher should be fully installed for this function to work.

        <Example>
gap> S:=InverseSemigroup(
> PartialPermNC( [ 1, 2, 3, 4, 5, 6, 7, 10 ], [ 4, 6, 7, 3, 8, 2, 9, 5 ] ),
> PartialPermNC( [ 1, 2, 7, 9 ], [ 5, 6, 4, 3 ] ) );
&lt;inverse semigroup with 2 generators>
gap> T:=InverseSemigroup(Idempotents(S), rec(small:=true));;
gap> M:=MunnSemigroup(T);;
gap> NrIdempotents(M);
60
gap> NrIdempotents(S);
60</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="OPOIPOPI">
  <ManSection><Heading>Monoids of order preserving functions</Heading>
    <Oper Name="OrderEndomorphisms" Arg="n" Label="monoid of order preserving transformations"/>
    <Oper Name="POI" Arg="n" Label="monoid of order preserving partial perms"/>
    <Oper Name="POPI" Arg="n" Label="monoid of orientation preserving partial
      perms"/>
    <Returns>A semigroup of transformations or partial permutations related
      to a linear order. 
    </Returns>
    <Description>
      <List>
        <Mark><C>OrderEndomorphisms(<A>n</A>)</C></Mark>
        <Item>
          <C>OrderEndomorphisms(<A>n</A>)</C> returns the monoid of
          transformations that preserve the usual order on <M>\{1,2,\ldots,
            n\}</M> where <A>n</A> is a positive integer. 
          <Alt Not="Text"> 
            <C>OrderEndomorphisms(<A>n</A>)</C> is generated by the
            <M><A>n+1</A></M> transformations:
            <Display>
              \left(
              \begin{array}{ccccccccc}
              1&amp;2&amp;3&amp;\cdots&amp;n-1&amp; n\\
              1&amp;1&amp;2&amp;\cdots&amp;n-2&amp;n-1
              \end{array}\right), \qquad
              \left(
              \begin{array}{ccccccccc}
              1&amp;2&amp;\cdots&amp;i-1&amp; i&amp; i+1&amp;i+2&amp;\cdots
              &amp;n\\
              1&amp;2&amp;\cdots&amp;i-1&amp; i+1&amp;i+1&amp;i+2&amp;\cdots
              &amp;n\\
              \end{array}\right)
            </Display> 
            where <M>i=0,\ldots,n-1</M> and has <M>{2n-1\choose n-1}</M>
            elements.
          </Alt>
      </Item>
      <Mark><C>POI(<A>n</A>)</C></Mark>
      <Item>
      <C>POI(<A>n</A>)</C> returns the inverse
      monoid of partial permutations that preserve the usual order
      on <M>\{1,2,\ldots, n\}</M> where <A>n</A> is a positive integer.
      <Alt Not="Text">
      <C>POI(<A>n</A>)</C> is generated by the <M><A>n</A></M> 
      partial permutations:
      <Display>
      \left(
      \begin{array}{ccccc}
      1&amp;2&amp;3&amp;\cdots&amp;n\\          
      -&amp;1&amp;2&amp;\cdots&amp;n-1
      \end{array}\right), \qquad
      \left(
      \begin{array}{ccccccccc}
      1&amp;2&amp;\cdots&amp;i-1&amp; i&amp; i+1&amp;i+2&amp;\cdots
      &amp;n\\
      1&amp;2&amp;\cdots&amp;i-1&amp; i+1&amp;-&amp;i+2&amp;\cdots&amp;n\\
      \end{array}\right)
    </Display>
    where <M>i=1, \ldots, n-1</M>
    and has <M>{2n\choose n}</M> elements. </Alt>
  </Item>
  <Mark><C>POPI(<A>n</A>)</C></Mark>
  <Item>
    <C>POPI(<A>n</A>)</C> returns the inverse monoid of partial permutation
    that preserve the orientation of <M>\{1,2,\ldots, n\}</M> where
    <M>n</M> is a positive integer.
    <Alt Not="Text">
    <C>POPI(<A>n</A>)</C> is generated by the partial permutations:
    <Display>
      \left(
      \begin{array}{ccccc}
1&amp;2&amp;\cdots&amp;n-1&amp;n\\
2&amp;3&amp;\cdots&amp;n&amp;1
\end{array}\right),\qquad
\left(
\begin{array}{cccccc}
1&amp;2&amp;\cdots&amp;n-2&amp;n-1&amp;n\\
1&amp;2&amp;\cdots&amp;n-2&amp;n&amp;-
\end{array}\right).
    </Display>
    and has <M>1+\frac{n}{2}{2n\choose n}</M> elements. 
    </Alt>
  </Item>
</List>
      <Example>
gap> S:=POPI(10);                                            
&lt;inverse monoid with 2 generators>
gap> Size(S);
923781
gap> 1+5*Binomial(20, 10);
923781
gap> S:=POI(10);
&lt;inverse monoid with 10 generators>
gap> Size(S);
184756
gap> Binomial(20,10);
184756
gap> IsSubsemigroup(POPI(10), POI(10));
true
gap> S:=OrderEndomorphisms(5);
&lt;monoid with 5 generators>
gap> IsIdempotentGenerated(S);
true
gap> IsRegularSemigroup(S);
true
gap> Size(S)=Binomial(2*5-1, 5-1);
true</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SingularSemigroup">
    <ManSection>
      <Oper Name="SingularSemigroup" Arg="n"/>
      <Returns>The semigroup of non-invertible transformations.</Returns>
      <Description>
        If <A>n</A> is a positive integer, then
        <C>SingularSemigroup(<A>n</A>)</C> returns the semigroup of
        non-invertible transformations, which is generated by the
        <A>n(n-1)</A> idempotents of degree <A>n</A> and rank <M>n-1</M> and
        has <M>n^n-n!</M> elements. 

        <Example>
gap> S:=SingularSemigroup(5);
&lt;semigroup with 20 generators>
gap> Size(S);
3005</Example>
      </Description>
    </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SymmetricInverseSemigp">
    <ManSection>
      <Oper Name="SymmetricInverseSemigp" Arg="n"/>
      <Returns>The symmetric inverse semigroup.</Returns>
      <Description>
        If <A>n</A> is a positive integer, then
        <C>SymmetricInverseSemigp(<A>n</A>);</C>
        returns the symmetric inverse semigroup consisting of all partial
        permutations on the set <M>\{1,\ldots, n\}</M>. 
        <Alt Not="Text">
        The symmetric inverse
        semigroup on <M>\{1,\ldots, n\}</M> is generated by the partial
        permutations:
        <Display>\left(
          \begin{array}{ccccc}
1&amp;2&amp;\cdots&amp;n-1&amp;n\\
2&amp;3&amp;\cdots&amp;n&amp;1
\end{array}\right), 
\quad
\left(\begin{array}{cccccc}
1&amp;2&amp;3&amp;\cdots&amp;n-1&amp;n\\
2&amp;1&amp;3&amp;\cdots&amp;n-1&amp;n
\end{array}\right), 
\quad
\left(\begin{array}{ccccc}
1&amp;2&amp;\cdots&amp;n-1&amp;n\\
1&amp;2&amp;\cdots&amp;n-1&amp;-
\end{array}\right)
        </Display>
        and has <M>\sum_{r=0}^n{n\choose r}^2\cdot r!</M>
        elements. </Alt>

        <Example>
gap> S:=SymmetricInverseSemigp(15);
&lt;inverse semigroup with 3 generators>
gap> Size(S);
306827170866106</Example>
      </Description>
    </ManSection>
<#/GAPDoc>

<#GAPDoc Label="Monoid">
  <ManSection>
    <Func Name="Monoid" Arg="obj1, obj2, ... [, opts]"/>
    <Func Name="Semigroup" Arg="obj1, obj2, ... [, opts]"/>
    <Returns>A monoid or semigroup.</Returns>
    <Description>
 
      If <A>obj1</A>, <A>obj2</A>, ... are (any combination) of
      transformations, transformation semigroups, or lists of transformations,
      then <C>Monoid</C> or <C>Semigroup</C> returns the monoid or semigroup
      generated by the union of <A>obj1</A>, <A>obj2</A>, ....  <P/>

      If present, the optional final argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created, as
      described in Section <Ref Sect="opts"/>.<P/>
      
      When applied to arguments other than transformations or transformation
      collections these functions behave precisely as described in the
      reference manual. Please consult <Ref Func="Monoid" BookName="ref"/> and
      <Ref Func="Semigroup" BookName="ref"/> for further details.<P/> 

      As an example of how the syntax provided by &Citrus; can be convenient:
      <C>U:=Semigroup(S, f, Idempotents(T));</C>, in the example below, returns
      the same value as: <C>U:=Semigroup(Concatenation(Generators(S), [f],
      Idempotents(T)));</C>.

      <Example>
gap> S:=Semigroup(Transformation( [ 1, 3, 4, 1, 3, 5 ] ), 
> Transformation( [ 5, 1, 6, 1, 6, 3 ] ) );;
gap> f:=Transformation( [ 2, 4, 6, 1, 6, 5 ] );;
gap> T:=Monoid(Transformation( [ 4, 1, 2, 6, 2, 1 ] ),
> Transformation( [ 5, 2, 5, 3, 5, 3 ] ) );;
gap> U:=Semigroup(S, f, Idempotents(T));
&lt;semigroup with 14 generators>
gap> Size(U);
2182
gap> NrRClasses(U);
53</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="InverseMonoid">
  <ManSection>
    <Func Name="InverseMonoid"  Arg="obj1, obj2, ... [, opts]"/>
    <Func Name="InverseSemigroup"  Arg="obj1, obj2, ... [, opts]"/>
    <Returns>An inverse semigroup or monoid.</Returns>
    <Description>
      If <A>obj1</A>, <A>obj2</A>, ... are (any combination) of
      partial permutations, partial permutation semigroup, or lists of partial
      permutations, then <C>InverseMonoid</C> or <C>InverseSemigroup</C>
      returns the inverse monoid or semigroup generated by the union of
      <A>obj1</A>, <A>obj2</A>, ... which equals the semigroup or
      monoid generated by the union of <A>obj1</A>, <A>obj2</A>, ... and their
      inverses.<P/>

      If present, the optional final argument <A>opts</A> should be a record
      containing the values of the options for the inverse semigroup being
      created, as described in Section <Ref Sect="opts"/>.<P/>

      As an example of how the syntax provided by &Citrus; can be convenient:
      <C>U:=Semigroup(S, f, Idempotents(T));</C>, in the example below, returns
      the same value as: <C>U:=Semigroup(Concatenation(Generators(S), [f],
        Idempotents(T)));</C>.
      <Example>
gap> S:=InverseSemigroup(
> PartialPermNC( [ 1, 2, 3, 4, 6, 8, 9, 10, 11, 13, 14, 16, 17, 18, 20 ], 
> [ 2, 14, 5, 8, 11, 12, 16, 17, 18, 9, 13, 15, 20, 6, 4 ] ),
> PartialPermNC( [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 13, 14, 15, 17 ], 
> [ 2, 14, 8, 19, 5, 1, 3, 16, 6, 9, 10, 17, 12, 20 ] ));;
gap> f:=PartialPermNC( 
> [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 
>  18, 20, 22, 23, 25, 26, 30, 31, 32, 33, 34, 39, 40, 42, 43, 45 ], 
> [ 4, 47, 34, 19, 32, 22, 12, 15, 16, 45, 49, 8, 24, 40, 17, 
>  46, 14, 6, 44, 2, 48, 41, 10, 31, 18, 50, 23, 5, 37, 11, 38, 30, 21 ] );;
gap> S:=InverseSemigroup(S, f, Idempotents(SymmetricInverseSemigp(10)));
&lt;inverse semigroup with 1027 generators>
gap> S:=InverseSemigroup(S, f, Idempotents(SymmetricInverseSemigp(10)),
> rec(small:=true));
&lt;inverse semigroup with 13 generators>
gap> Size(S);
17147970
gap> S:=InverseMonoid(Generators(S));
&lt;inverse monoid with 13 generators>
gap> Size(S);
17147971</Example>
  </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="InverseMonoidByGenerators">
  <ManSection>
    <Func Name="InverseMonoidByGenerators" Arg="coll[, opts]"/>
    <Func Name="InverseSemigroupByGenerators"  Arg="coll[, opts]"/>
    <Returns>An inverse monoid or semigroup.</Returns>
    <Description>
      If <A>coll</A> is a partial permutation collection, then
      <C>InverseMonoidByGenerators</C> and 
      <C>InverseSemigroupByGenerators</C>
      return the inverse monoid and semigroup generated by <A>coll</A>,
      respectively. <P/>

      If present, the optional second argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created, as
      described in Section <Ref Sect="opts"/>.<P/> 
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="MonoidByGenerators">
  <ManSection>
    <Meth Name="MonoidByGenerators" Arg="coll[, opts]"/>
    <Meth Name="SemigroupByGenerators" Arg="coll[, opts]"/>
    <Returns>A monoid or semigroup.</Returns>
    <Description>
      If <A>coll</A> is a transformation collection, then
      <C>MonoidByGenerators</C> and <C>SemigroupByGenerators</C> return the
      monoid and semigroup generated by <A>coll</A>, respectively. <P/>

      If present, the optional second argument <A>opts</A> should be a record
      containing the values of the options for the semigroup being created, as
      described in Section <Ref Sect="opts"/>.<P/> 

      When applied to arguments other than transformations or transformation
      collections these functions behave precisely as described in the
      reference manual. Please consult 
      <Ref Func="MonoidByGenerators" BookName="ref"/> and
      <Ref Func="SemigroupByGenerators" BookName="ref"/> for further details.
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomInverseMonoid">
  <ManSection>
    <Func Name="RandomInverseMonoid" Arg="m,n"/>
    <Func Name="RandomInverseSemigroup"  Arg="m,n"/>
    <Returns>An inverse monoid or semigroup.</Returns>
    <Description>
      Returns  a  random  inverse  monoid  or semigroup of partial
      permutations with degree at most <A>n</A>  with <A>m</A> generators.
      <Example>
gap> S:=RandomInverseSemigroup(10,10);                                
&lt;inverse semigroup with 10 generators>
gap> S:=RandomInverseMonoid(10,10);   
&lt;inverse monoid with 10 generators></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RandomTransformationMonoid">
  <ManSection>
    <Func Name="RandomTransformationMonoid" Arg="m, n"/>
    <Func Name="RandomTransformationSemigroup" Arg="m, n"/>
    <Returns>A transformation semigroup.</Returns>
    <Description>
      Returns a random transformation monoid or semigroup of degree <A>n</A> 
      with <A>m</A> generators.
      <Example>
gap&gt; S:=RandomTransformationMonoid(5,5);
&lt;monoid with 5 generators&gt;
gap&gt; S:=RandomTransformationSemigroup(5,5);
&lt;semigroup with 5 generators&gt;</Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="SubsemigroupByProperty">
<ManSection>
  <Oper Name="SubsemigroupByProperty" Arg="S, func" Label="for a semigroup and
    function"/>
  <Oper Name="SubsemigroupByProperty" Arg="S, func, limit" Label="for a
    semigroup, function, and limit on the size of the subsemigroup"/>
  <Returns>A semigroup.</Returns>
  <Description>
    <C>SubsemigroupByProperty</C> creates a subsemigroup of the semigroup
    <A>S</A> of transformations or partial permutations consisting of those
    elements fulfilling <A>func</A> (which should be a function returning
    <K>true</K> or <K>false</K>). No test is done to check if the property
    actually defines a subsemigroup. <P/>

    If the optional third argument <A>limit</A> is present and a positive
    integer, then once the subsemigroup has at least <A>limit</A> elements the
    computation stops.
  </Description>
</ManSection>
<#/GAPDoc>



