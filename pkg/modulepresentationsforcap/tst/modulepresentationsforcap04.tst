# ModulePresentationsForCAP, single 4
#
# DO NOT EDIT THIS FILE - EDIT EXAMPLES IN THE SOURCE INSTEAD!
#
# This file has been generated by AutoDoc. It contains examples extracted from
# the package documentation. Each example is preceded by a comment which gives
# the name of a GAPDoc XML file and a line range from which the example were
# taken. Note that the XML file in turn may have been generated by AutoDoc
# from some other input.
#
gap> START_TEST("modulepresentationsforcap04.tst");

# doc/_Chapter_Examples_and_Tests.xml:173-217
gap> R := HomalgRingOfIntegers( );;
gap> M := AsLeftPresentation( HomalgMatrix( [ [ 2 ] ], 1, 1, R ) );
<An object in Category of left presentations of Z>
gap> N := AsLeftPresentation( HomalgMatrix( [ [ 3 ] ], 1, 1, R ) );
<An object in Category of left presentations of Z>
gap> T := TensorProductOnObjects( M, N );
<An object in Category of left presentations of Z>
gap> Display( T );
[ [  3 ],
  [  2 ] ]

An object in Category of left presentations of Z
gap> IsZero( T );
true
gap> H := InternalHomOnObjects( DirectSum( M, M ), DirectSum( M, N ) );
<An object in Category of left presentations of Z>
gap> Display( H );
[ [  -4,  -2 ],
  [   2,   2 ] ]

An object in Category of left presentations of Z
gap> alpha := StandardGeneratorMorphism( H, 1 );
<A morphism in Category of left presentations of Z>
gap> l := LambdaElimination( DirectSum( M, M ), DirectSum( M, N ), alpha );
<A morphism in Category of left presentations of Z>
gap> IsZero( l );
false
gap> Display( l );
[ [  0,   0 ],
  [  1,  0 ] ]

A morphism in Category of left presentations of Z
gap> alpha2 := StandardGeneratorMorphism( H, 2 );
<A morphism in Category of left presentations of Z>
gap> l2 := LambdaElimination( DirectSum( M, M ), DirectSum( M, N ), alpha2 );
<A morphism in Category of left presentations of Z>
gap> IsZero( l2 );
false
gap> Display( l2 );
[ [  1,   0 ],
  [  0,  0 ] ]

A morphism in Category of left presentations of Z

#
gap> STOP_TEST("modulepresentationsforcap04.tst", 1);
