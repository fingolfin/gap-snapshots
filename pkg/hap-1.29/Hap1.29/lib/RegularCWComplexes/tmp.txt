33c33
< return 1*PseudoBoundary[n][k]; fi;
---
> return PseudoBoundary[n][k]; fi;
49c49
< return 1*PseudoBoundary[n][k];
---
> return PseudoBoundary[n][k];
95c95
< return 1*PseudoBoundary[n][k];
---
> return PseudoBoundary[n][k];
218a219
> critical:=CriticalCells(X);
220d220
< X!.allcocriticalcells:=dim;
229c229
< if  not bool then 
---
> if  bool=false then 
246,247c246
< #pos:=Position(Y!.elts,m);  #CAN IMPROVE THIS
< pos:=fail;
---
> pos:=Position(Y!.elts,m);
257,258c256
< # pos:=Position(Y!.elts,m); #CAN IMPROVE THIS
< pos:=fail;
---
> pos:=Position(Y!.elts,m);
265,266d262
< 
< critical:=CriticalCells(X);
277d272
< 
291c286
< if sgnk=1 then return r;
---
> if sgnk=1 then return 1*r;
293c288
< return List(r,a->[-a[1],a[2]]);
---
> return List(r,a->1*[-a[1],a[2]]);
302,304c297,298
< #Apply(bnd,a->[a[1],mult(g, mult(kkk,a[2])     )]);
< Apply(bnd,a->[a[1], mult(kkk,a[2]) ]);
< sn:=X!.orientation[n+2][f];
---
> bnd:=1*List(bnd,a->[a[1], mult(kkk,a[2]) ]);
> sn:=1*X!.orientation[n+2][f];
322c316
< def:=Concatenation(def1,def2);
---
> def:=1*Concatenation(def1,def2);
339c333
< if sgnk=1 then return def; fi;  
---
> if sgnk=1 then return 1*def; fi;  
341c335
< return def;
---
> return 1*def;
368c362
< return BND;
---
> return 1*BND;
384,385c378,379
< if sk=1 then return BNDrec[n][kk];
< else return List(BNDrec[n][kk],a->[-a[1],a[2]]);
---
> if sk=1 then return 1*BNDrec[n][kk];
> else return 1*List(BNDrec[n][kk],a->[-a[1],a[2]]);
