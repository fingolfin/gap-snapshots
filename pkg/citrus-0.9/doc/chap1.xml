  <Chapter Label="citrus">
  <Heading>The &Citrus; package</Heading>
  <Index Key="Citrus">&Citrus; package overview</Index>	
    
    This is the manual for the &Citrus; package version &VERSION; for computing
    with semigroups of transformations and partial permutations. &Citrus;
    &VERSION; is an updated and expanded version of the <URL Text="Monoid
      package for GAP 3"> http://schmidt.nuigalway.ie/monoid/index.html</URL>
    by Goetz Pfeiffer, Steve A. Linton, Edmund F. Robertson, and Nik Ruskuc and
    the <URL Text="Monoid package for GAP 4">
      http://www-history.mcs.st-and.ac.uk/~jamesm/monoid/index.html</URL> by
    J.  D. Mitchell.<P/>

    Some of the theory behind the algorithms in &Citrus; is described in 
    <Cite Key="pfeiffer1"/> and described in <Cite Key="pfeiffer2"/>.  Another
    reference is <Cite Key="lallement"/>.<P/> 
    
    The functionality of &Monoid; 3.1.4 for &GAP; 4 has been split between the
    &GAP; 4.5 packages &Citrus; and &Comatose;.

    &Citrus; &VERSION; retains all the functionality of the original &Monoid;
    package for &GAP; 3; and many of those functions from &Monoid; 3.1.4 not
    involved in the computation of automorphism groups of semigroups. The
    &Comatose; package retains those functions from &Monoid;
    3.1.4 used to compute automorphism groups of transformation semigroups. <P/>

    &noindent; &Citrus; &VERSION; contains more efficient methods than those
    available in the &GAP; library (and in many cases more efficient than any
    other software) for creating semigroups of transformations and partial
    permutations, calculating their Green's classes, size, elements, group of
    units, minimal ideal, and testing membership, finding the inverses of a
    regular element, and factorizing elements over the generators, and many
    more; see Chapters <Ref Chap="create"/> and  <Ref Chap="green"/>. There are
    also methods for testing if a semigroup satisfies a particular property,
    such as if it is regular, simple, inverse, completely regular, and a
    variety of further properties; see Chapter <Ref Chap="green"/>. A
    range of functions is provided for creating and determining properties of
    individual transformations and partial permutations such as the index and
    period or the least idempotent power; see Chapter <Ref
      Chap="Transformations and partial permutations"/>.  A large catalogue of
    examples is provided; see Sections <Ref Sect="Examples"/> and <Ref
      Sect="Catalogues"/>.  &Citrus; also provides abbreviated names for many
    of the commonly used &GAP; library functions related to semigroups, and
    functions to read and write large collections of transformations or partial
    permutations to a file; see <Ref Func="ReadCitrus"/> and <Ref
      Func="WriteCitrus"/>. <P/>

    &noindent; The &Citrus; package is written in C and &GAP; code and 
    requires the &Orb; and &IO; packages. The &Orb; package is used to
    efficiently compute orbits in semigroups of transformations and partial
    permutations, and these methods underpin many of the features of &Citrus;.
    The &IO; package is used to read and write transformations and partial
    permutations to a file.
    The &Grape; package is used in the function <Ref Oper="MunnSemigroup"/> but
    nowhere else in &Citrus;. If &Grape; is not fully installed, then &Citrus;
    can be used as normal with the except that the operation <Ref
      Oper="MunnSemigroup"/> does not work.  <P/>
    
    &Citrus; is still under development, and so some features may not function
    as expected. At the present time, I do not know of any errors or serious
    issues with &Citrus;.  If you find a bug or an issue with the package, then
    please let me know by emailing me the details at:
    <Email>jdm3@st-and.ac.uk</Email>.<P/>

    For more details about semigroups in &GAP; or Green's relations in
    particular, see <Ref Sect="Semigroups" BookName="ref"/> or 
    <Ref Sect="Green's Relations" BookName="ref"/>.

  <Section Label="install">
    <Heading>Installing &Citrus;</Heading>

    In this section we give a brief description of how to start using
    &Citrus;. If you have any problems getting &Citrus; working, then you could
    try emailing me at <Email>jdm3@st-and.ac.uk</Email>. <P/>

    It is assumed that you have a working copy of &GAP; with version number 
    4.5 or higher. The most up-to-date version of &GAP; and instructions on
    how to install it can be obtained from the main &GAP; webpage
    &vspace;<P/>&noindent;&vspace;
    <URL>http://www.gap-system.org</URL><P/>

    &noindent; The following is a summary of the steps that should lead to a
    successful installation of &Citrus;:

    <List>
    
      <Item> download and install the &Orb; package version 
      &ORBVERS; or higher. For more details go to:
      &vspace;<P/>&noindent; 
      <URL>http://www-groups.mcs.st-and.ac.uk/~neunhoef/Computer/Software/Gap/orb.html
      </URL><P/>
      &noindent; Note that &Orb; and &Citrus; both perform better if &Orb;
      is compiled. 
      </Item>

     <Item> download and install the &IO; package version                 
      &IOVERS; or higher. For more details go to:
      &vspace;<P/>&noindent;
      <URL>http://www-groups.mcs.st-and.ac.uk/~neunhoef/Computer/Software/Gap/ io.html
      </URL>
      </Item>

      <Item>  if you want to be able to calculate the Munn semigroup of a
        semilattice <Ref Oper="MunnSemigroup"/>, then download and fully
        install the &Grape; package version &GRAPEVERS; or higher.  For more
        details go to:&vspace;<P/>&noindent;
        <URL>http://www.maths.qmul.ac.uk/~leonard/grape/</URL><P/>
         If
    &Grape; is not fully installed, then &Citrus; can be used as normal with the
    except that the operation <Ref Oper="MunnSemigroup"/> does not work.

      </Item>

      <Item> download the package archive <F>&ARCHIVENAME;.tar.gz</F> from
      &vspace;<P/>&noindent;&vspace;
      <URL>http://www-history.mcs.st-and.ac.uk/~jamesm/citrus/index.html
      </URL>
      </Item>
    
      <Item> unzip and untar the file, this should create a directory called
      <C>&ARCHIVENAME;</C>.</Item>
    
      <Item> 
      locate the <C>pkg</C> directory of your &GAP; directory, which contains
      the directories <C>lib</C>, <C>doc</C> and so on. Move the directory
      <C>&ARCHIVENAME;</C> into the <C>pkg</C> directory.  
      </Item>

      <Item> to use the functions in &Citrus; for partial permutations and
        inverse semigroups, you must compile the C part of the package 
        (in the "pkg" directory) by doing:
        <Listing>
<![CDATA[cd citrus
./configure
make]]></Listing>
    Further information about this step can be found in Section <Ref Sect="Compiling"/>. 
    </Item>

    <Item> start &GAP; in the usual way.</Item>
  
    <Item> type <C>LoadPackage("citrus");</C></Item>
    
    <Item> compile the documentation by using <Ref Func="CitrusMakeDoc"/>
    </Item>

  </List>

    <E><B>Please note that</B> &Citrus; can only be used to compute with
      semigroups of partial permutations if it has been compiled.  </E><P/>

    Below is an example of an installation of &Citrus; in a Unix environment
    where <C>home</C>  should be substituted with the main &GAP; directory
    (the one containing the folders <C>bin</C>, <C>lib</C>, and so on) in your
    installation of &GAP;.<P/>

    <Log>
> gunzip &ARCHIVENAME;.tar.gz 
> tar -xf &ARCHIVENAME;.tar 
> mv &ARCHIVENAME; home/pkg
> gap 

[ ... ]

gap> LoadPackage("citrus");
----------------------------------------------------------------------
Loading  orb &ORBVERS; (orb - Methods to enumerate orbits)
by Juergen Mueller (http://www.math.rwth-aachen.de/~Juergen.Mueller),
   Max Neunhoeffer (http://www-groups.mcs.st-and.ac.uk/~neunhoef), and
   Felix Noeske (http://www.math.rwth-aachen.de/~Felix.Noeske).
----------------------------------------------------------------------
----------------------------------------------------------------------
Loading  Citrus &VERSION; (Citrus - ComputIng wiTh semigRUopS)
by J. D. Mitchell (http://tinyurl.com/jdmitchell).
----------------------------------------------------------------------
true
gap></Log>

    Presuming that the above steps can be completed successfully you will be 
    running the &Citrus; package!<P/>

    If you want to check that the package is working correctly, you
    should run some the tests described in Section <Ref Sect="testing"/>.<P/>

  </Section>

  <Section Label="Compiling">
    <Heading>Compiling the kernel component of &Citrus;</Heading>
As of version 0.7, the &Citrus; package has a &GAP; kernel component in C which
should be compiled. This component contains low-level functions relating to
partial permutations and it is not possible to use these features or any
related features in &Citrus; without compiling the package. It is possible to
run &Citrus; without compiling it, but &Citrus; is limited to computing with
transformation semigroups in this case.<P/>

To compile the GAP kernel component in the 'pkg' directory do:
<Listing>
<![CDATA[cd citrus
./configure
make]]></Listing><P/>

If you installed the package in another 'pkg' directory than the standard 'pkg'
directory in your &GAP; installation, then you have to do two things. Firstly
during compilation you have to use the option '--with-gaproot=PATH' of the
'configure' script where 'PATH' is a path to the main GAP root directory (if
not given the default '../..' is assumed).<P/>

If you installed &GAP; on several architectures, you must execute the
configure/make step for each of the architectures. You can either do this
immediately after configuring and compiling GAP itself on this architecture, or
alternatively (when using version 4.5 of GAP or newer) set the environment
variable 'CONFIGNAME' to the name of the configuration you used when compiling
GAP before running './configure'.  Note however that your compiler choice and
flags (environment variables 'CC' and 'CFLAGS') need to be chosen to match the
setup of the original GAP compilation. For example you have to specify 32-bit
or 64-bit mode correctly!
</Section>
<Section Label="doc"><Heading>Compiling the documentation</Heading>

  To compile the documentation use <Ref Func="CitrusMakeDoc"/>. If you want
  to use the help system, it is essential that you compile the documentation. 

  <#Include Label="CitrusMakeDoc">

  </Section>
    
  <Section Label="testing"><Heading>Testing the installation</Heading>
    
    In this section we describe how to test that &Citrus; is working as
    intended.  To test that &Citrus; is installed correctly use 
    <Ref Func="CitrusTestInstall"/> or for more extensive tests use 
    <Ref Func="CitrusTestAll"/>. Please note that it will take a few seconds for
    <Ref Func="CitrusTestInstall"/> to finish and it will take no more than 1
    minute for <Ref Func="CitrusTestAll"/> to finish.<P/>

    Note that after calling <Ref Func="CitrusTestAll"/>, 
    <Ref Func="CitrusTestAll"/>, or <Ref Func="CitrusTestManualExamples"/>, the
    message <C>gzip: stdout: Broken pipe</C> might be displayed (several
    times). While this is unfortunate, it is not an error and should simply be
    ignored.  We hope to resolve this issue in the future.

    If something goes wrong, then please review the instructions in Section
    <Ref Sect="install"/> and ensure that &Citrus; has been properly
    installed.  If you continue having problems, please email me at
    <Email>jdm3@st-and.ac.uk</Email>.

    <#Include Label="CitrusTestAll">
    <#Include Label="CitrusTestInstall">
    <#Include Label="CitrusTestManualExamples">

  </Section>

  <Section><Heading>More information during a computation</Heading>
    
    <#Include Label="InfoCitrus">

  </Section>

    <Section><Heading>Reading and writing transformations and partial
      permutations to a file</Heading>
    The functions <Ref Func="ReadCitrus"/> and <Ref Func="WriteCitrus"/> can be
    used to read or write transformations or partial permutations to a file. 
    <#Include Label="CitrusDir">
    <#Include Label="ReadCitrus">
    <#Include Label="WriteCitrus">
  </Section>

  <Section><Heading>What does &Citrus; do best?</Heading>

    Due to inherent difficulties with computing Green's &L;-, &D;-, and
    &H;-classes in transformation semigroups, the methods used to compute with
    Green's &R;-classes are the most efficient in &Citrus;.  Thus, if you are
    computing with a transformation semigroup, wherever
    possible it is advisable to use the commands relating to Green's
    &R;-classes rather than those relating to Green's &L;-, &D;-, or
    &H;-classes. No such difficulties are present when computing with
    semigroups of partial permutations. <P/>
    
    The methods in &Citrus; allow the computation of individual Green's
    classes without the need to compute all the elements of the underlying
    semigroup; see <Ref Oper="GreensRClassOfElementNC"/>.  It is also possible
    to compute all the &R;-classes, the number of elements and test membership
    in a transformation semigroup without computing all the elements; see, for
    example, <Ref Oper="GreensRClasses"/>, <Ref Attr="RClassReps"/>, 
    <Ref Func="IteratorOfRClassReps"/>, <Ref Func="IteratorOfRClasses"/>, or
    <Ref Func="NrRClasses"/>.  This may be useful if you want to study a very
    large semigroup where computing all the elements of the semigroup is
    infeasible.

  </Section>

  <Section><Heading>New methods for existing functions</Heading>
    In this section we list the functions from the &GAP; library (those
    available when &Citrus; is not loaded) which have new methods in &Citrus;.
    Some of these new methods apply to a wider class of objects than the
    existing methods. Where this is the case, we give references to both the
    &Citrus; documentation and the &GAP; manual; otherwise we may only give
    references to the &GAP; manual.<P/>

    &Citrus; contains special methods for the following &GAP; functions where 
    the argument is an arbitrary Green's class of a semigroup of
    transformations or partial permutations
    (specifically a Green's class satisfying 
    <Ref Prop="IsGreensClassOfTransSemigp"/> or 
    <Ref Prop="IsGreensClassOfPartialPermSemigp"/>) or a semigroup
    itself (where appropriate).
    For more details about semigroups in &GAP; or Green's relations in
    particular, see <Ref Sect="Semigroups" BookName="ref"/> or 
    <Ref Sect="Green's Relations" BookName="ref"/>.
    <List>
      <Item>
        <Ref Oper="\&lt;" Label="for Green's classes"/>, <C>=</C> and <C>in</C> (see  
        <Ref Sect="Comparisons" BookName="ref"/>),
      </Item>
      <Item>
        <Ref Oper="AsSSortedList" BookName="ref"/>, 
      </Item>
      <Item>
        <Ref Oper="Enumerator" BookName="ref"/>, 
      </Item>
      <Item>
        <Ref Attr="GreensHClasses" BookName="ref"/> and 
        <Ref Attr="GreensHClasses"/>,
      </Item>
      <Item>
        <Ref Attr="GreensHClassOfElement" BookName="ref"/>,
      </Item>
      <Item>
        <Ref Attr="GreensLClasses" BookName="ref"/> and 
        <Ref Attr="GreensLClasses"/>,
      </Item>
      <Item>
        <Ref Attr="GreensLClassOfElement" BookName="ref"/>,
      </Item>
      <Item>
        <Ref Attr="GreensRClasses" BookName="ref"/> and 
        <Ref Attr="GreensRClasses"/>,
      </Item>
      <Item>
        <Ref Attr="GreensRClassOfElement" BookName="ref"/>,
      </Item>
      <Item>
        <Ref Attr="GreensDClasses" BookName="ref"/> and
        <Ref Attr="GreensDClasses"/>,
      </Item>
      <Item>
        <Ref Attr="GreensDClassOfElement" BookName="ref"/>,
      </Item>
      <Item>
        <Ref Attr="Idempotents" BookName="ref"/> and 
        <Ref Attr="Idempotents"/>,
      </Item>
      <Item>
        <Ref Oper="Size" BookName="ref"/>.
      </Item>
    </List>
    <P/>

    In addition to those functions mentioned above that can be applied to
    arbitrary Green's classes, &Citrus; contains special methods for the
    following &GAP; functions:

    <List>
    <Item><Ref Prop="IsRegularDClass" BookName="ref"/> and 
    <Ref Prop="IsRegularDClass"/>,</Item>
    <Item><Ref Attr="GroupHClassOfGreensDClass" BookName="ref"/> and 
    <Ref Attr="GroupHClass"/>,</Item> 
    <Item><Ref Prop="IsGroupHClass" BookName="ref"/>,</Item>
    <Item><Ref Oper="IsomorphismPermGroup" BookName="ref"/> 
    (for a group &H;-class),</Item>
    <Item><Ref Oper="StructureDescription" BookName="ref"/> 
    (for a group &H;-class),</Item>
    <Item><C>IsomorphismTransformationMonoid</C> and 
    <Ref Oper="IsomorphismTransformationSemigroup" BookName="ref"/> and 
    (for a permutation group).</Item>
    </List> <P/>

    &Citrus; contains functions synonymous to some of the commands mentioned in
    this section but, for the sake of convenience with abbreviated names; for
    further details see below.
  </Section>
</Chapter>
