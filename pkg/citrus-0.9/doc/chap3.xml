
<Chapter Label="create"><Heading>Creating semigroups and monoids</Heading> 
  In this chapter we describe the various ways that semigroups and monoids can
  be created in &Citrus;, the options that are available at the time of
  creation, and describe some standard examples availabl in &Citrus;. <P/>
  
  Any transformation semigroup created before &Citrus; has been loaded must be
  recreated after &Citrus; is loaded so that the options record (described in
  Section <Ref Sect="opts"/>) is defined. Almost all of the functions and
  methods provided by &Citrus;, including those methods for existing &GAP;
  library functions, will return an error when applied to a transformation
  semigroup created before &Citrus; is loaded. 

 <Section><Heading>Semigroups defined by a generating set</Heading> 

    In this section we give details of how to create semigroups and monoids from
    a set of generators. Much of what is described here is syntactic sugar. 

    <#Include Label="InverseMonoid">
    <#Include Label="InverseMonoidByGenerators">
    <#Include Label="Monoid">
    <#Include Label="MonoidByGenerators">
    <#Include Label="RandomInverseMonoid"> 
    <#Include Label="RandomTransformationMonoid"> 
  </Section> 

  <Section><Heading>New semigroups from old</Heading> 
    <#Include Label="ClosureInverseSemigroup">
    <#Include Label="ClosureSemigroup">
    <#Include Label="SubsemigroupByProperty">
  </Section> 
  
  <Section Label="opts"><Heading>Options when creating semigroups</Heading>
    When using any of  <Ref Func="InverseSemigroup"/>, 
    <Ref Func="InverseMonoid"/>, 
    <Ref Func="Semigroup"/>, 
    <Ref Func="Monoid"/>, <Ref Meth="SemigroupByGenerators"/>, 
    <Ref Meth="MonoidByGenerators"/>, <Ref Func="ClosureInverseSemigroup"/>
    or <Ref Func="ClosureSemigroup"/> a
    record can be given as an optional final argument. The components of this
    record specify the values of certain options for the semigroup being
    created. A list of these options and their default values is
    given below.  <P/>

    Assume that <A>S</A> is the semigroup created by one of the functions given
    above and that <A>S</A> is generated by the list of transformations
    <A>gens</A>. 
  
    <List>
      
      <Mark><C>hashlen</C></Mark>
      <Item>
      this component should be a positive integer, which roughly specifies the
      lengths of the hash tables used internally by &Citrus;.  &Citrus; uses
      hash tables in several fundamental methods.  The lengths of these tables
      are a compromise between performance and memory usage; larger tables
      provide better performance for large computations but use more memory.
      Note that it is unlikely that you will need to specify this option unless
      you find that &GAP; runs out of memory unexpectedly or that the
      performance of &Citrus; is poorer than expected. If you find that &GAP;
      runs out of memory unexpectedly, or you plan to do a large number of
      computations with relatively small semigroups (say with tens of thousands
      of elements), then you might consider setting <C>hashlen</C> to be less
      than the default value of <C>25013</C> for each of these semigroups.  If
      you find that the performance of &Citrus; is unexpectedly poor, or you
      plan to do a computation with a very large semigroup (say, more than 10
      million elements), then you might consider setting <C>hashlen</C> to be
      greater than the default value of <C>25013</C>. <P/>

      You might find it useful to set the info level of the info class
      <C>InfoOrb</C> to 2 or higher since this will indicate when hash tables
      used by &Citrus; are being grown; see <Ref Oper="SetInfoLevel"
      BookName="ref"/>.
      </Item>

      <Mark><C>schreier</C></Mark>
      <Item>
      if this component is set to <K>true</K>, then &Citrus; will keep track of
      various pieces of information so that it is possible to factorize
      elements of <A>S</A> using <Ref Meth="Factorization"/>.  This will cause
      a slight decrease in performance and an increase in memory usage.  If
      this component is set to <K>false</K>, then it will not be possible to
      factorize the elements of <A>S</A> using <Ref Meth="Factorization"/>.
      The default value for this component is <K>true</K>.  </Item>
      
      <Mark><C>small</C></Mark> <Item>if this component is set to <K>true</K>,
      then &Citrus; will compute a small subset of <A>gens</A> that generates
      <A>S</A> at the time that <A>S</A> is created. This will increase the
      amount of time required to create <A>S</A> substantially, but may
      decrease the amount of time required for subsequent calculations with
      <A>S</A>. If this component is set to <K>false</K>, then &Citrus; will
      return the semigroup generated by <A>gens</A> without modifying
      <A>gens</A>. The default value for this component is <K>false</K>.
      </Item> </List>
  
      The default values of the options described above are stored in a global
      variable named <Ref Var="CitrusOptionsRec"/>. If you want to change the
      default values of these options for a single &GAP; session, then you can
      simply redefine the value in &GAP;. For example, to change the option
      <C>small</C> from the default value of <A>false</A> use:

    <Log>gap> CitrusOptionsRec.small:=true;
true</Log>

    If you want to change the default values of the options stored in <Ref
      Var="CitrusOptionsRec"/> for all subsequent &GAP; sessions, then you can
    edit these values in the file <C>citrus/gap/options.g</C>. <P/>

    <Example>
gap> S:=Semigroup(Transformation( [ 1, 2, 3, 3 ] ), rec(schreier:=true,
> hashlen:=100003, small:=false));
&lt;semigroup with 1 generator></Example>

    <#Include Label="CitrusOptionsRec">

   </Section>
    
  <Section Label="Examples"><Heading>Standard examples</Heading>
    In this section we describe functions for creating several standard
    examples of semigroups of transformations and partial permutations. 
    
    <#Include Label="FullMatrixSemigroup">
    <#Include Label="IsFullMatrixSemigroup">
    <#Include Label="MunnSemigroup">
    <#Include Label="OPOIPOPI">
    <#Include Label="SingularSemigroup">
    <#Include Label="SymmetricInverseSemigp">
  </Section>

<Section Label="Catalogues"><Heading>The examples directory</Heading>
    
    The <C>examples</C> folder of the &Citrus; package directory contains
    catalogues of some naturally occurring semigroups of transformations and
    partial permutations. These files can be read into &GAP; using <Ref
      Func="ReadCitrus"/> and similar files can be created using <Ref
      Func="WriteCitrus"/>.<P/>

    Further examples can be downloaded from &vspace;<P/>

    <URL>http://tinyurl.com/jdmitchell/examples.html</URL>&vspace;<P/>

    &noindent; A summary of the available files, a desciption of their
    contents, and how they were created is given below.<P/>

    <List>
      <Mark>Endomorphisms of graphs</Mark>
      <Item>
        the files <C>eul<A>n</A>c.citrus.gz</C> with
        <M>n=3,...,10</M>; <C>graph<A>n</A>c.citrus.gz</C> with 
        <M>n=3,...,8</M>; and <F>selfcomp.citrus.gz</F>
        contain small generating sets for the endomorphism monoids of
        all connected Eulerian graphs, all connected graphs, and all self
        complimentary graphs with <M>n</M> vertices, respectively. 
        These files were created using the catalogues of
        such graphs available at:<P/>

        <URL>http://cs.anu.edu.au/~bdm/data/graphs.html</URL><P/>
       
        a C program written by Max Neunhoeffer which produces a relatively
        large list of endomorphisms containing a generating set for the
        endomorphism monoid, <Ref Meth="SmallGeneratingSet"/> and then
        <Ref Oper="IrredundantGeneratingSubset"/> in &Citrus;. 
        The monoid generated by the transformations output
        by <C>ReadCitrus("eul7c.citrus.gz", i);</C>, say, is the monoid of 
        endomorphisms of the <C>i</C>th graph in the file:<P/>

        <URL>http://cs.anu.edu.au/~bdm/data/eul7c.g6</URL>
      </Item>
      
      <Mark>Munn semigroups</Mark>
      <Item> 
        the file <F>munn.citrus.gz</F> contains generators for all the Munn
        semigroups of semilattices with 2 to 8 elements. The
        semilattices were obtained from the &Smallsemi; package using the
        command:
        
        <Log>AllSmallSemigroups([2..8], IsSemilatticeAsSemigroup, true);</Log>
        and the generators for the Munn semigroups were calculated using 
        <Ref Oper="MunnSemigroup"/>.
        More information is available at:<P/>
  
        <URL>http://tinyurl.com/jdmitchell/examples.html</URL>
      </Item>

      <Mark>Syntactic semigroups</Mark>
      <Item> 
        the files <F>syntactic.citrus.gz</F> contain generators for the
        syntactic semigroups of word acceptors of certain triangle groups,
        provided by Markus Pfeiffer (St Andrews).
        A <E>triangle group</E> is a group defined by a presentation of the 
        form 
        <Display> 
        \langle x, y | x^p, y^q, (xy)^r\rangle
        </Display>
        for some positive integers <M>p, q, r</M>. The file contains
        generators of the syntactic semigroups of word acceptors of triangle
        groups where <M>p</M> ranges from <M>1</M> to <M>94</M>, <M>q=3</M>,
        and <M>r=2</M>; <M>p=101</M>, <M>q</M> ranges from <M>3</M> to
        <M>99</M> and <M>r=2</M>;  
        <M>p=101</M>, <M>q=72</M>, and <M>r</M> ranges from <M>7</M> to
        <M>71</M>; and some further randomly chosen values of <M>p,q,r</M>.
      </Item>
      <Mark>Endomorphisms of groups</Mark>
      <Item>
        the files <C>nonabelian_groups_<A>n</A>.citrus.gz</C> with
        <M>n=6,....,64</M> contains small generating sets for the endomorphism
        monoids of all non-abelian groups with <A>n</A> elements. 
        These files were created using the Small Groups Library in &GAP;
        and the <Package>Sonata</Package> function <C>Endomorphisms</C>.
      </Item>
    </List>
  </Section>
</Chapter>

