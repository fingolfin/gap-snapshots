<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Polyhedrons">
<Heading>Polyhedrons</Heading>

<Section Label="Chapter_Polyhedrons_Section_Creating_polyhedron">
<Heading>Creating polyhedron</Heading>

<ManSection>
  <Oper Arg="L" Name="PolyhedronByInequalities" Label="for IsList"/>
 <Returns>a <C>Polyhedron</C> Object
</Returns>
 <Description>
 The function takes a list of lists <C>L</C><Math>:=[L_1, L_2, ...]</Math> where each <Math>L_j</Math> represents 
 an inequality and returns the polyhedron defined by them. 
 For example the <Math>j</Math>'th entry <Math>L_j = [c_j,a_{j1},a_{j2},...,a_{jn}]</Math> corresponds to the inequality
 <Math>c_j+\sum_{i=1}^n a_{ji}x_i \geq 0</Math>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="P, C" Name="Polyhedron" Label="for IsPolytope, IsCone"/>
 <Returns>a <C>Polyhedron</C> Object
</Returns>
 <Description>
 The input is a polytope <C>P</C> and a cone <C>C</C>. The output is the polyhedron defined by the Minkowski sum <C>P+C</C>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="L, C" Name="Polyhedron" Label="for IsList, IsCone"/>
 <Returns>a <C>Polyhedron</C> Object
</Returns>
 <Description>
 The input is a list <C>L</C> and a cone <C>C</C>. The output is the polyhedron defined by the Minkowski sum 
 <C>P+C</C> where <C>P</C> is the polytope, i.e., the convex hull, defined by the points <C>L</C>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="P, L" Name="Polyhedron" Label="for IsPolytope, IsList"/>
 <Returns>a <C>Polyhedron</C> Object
</Returns>
 <Description>
 The input is a polytope <C>P</C> and a list <C>L</C>. The output is the polyhedron defined by the Minkowski sum 
 <C>P+C</C> where <C>C</C> is the cone defined by the rays <C>L</C>.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="P, C" Name="Polyhedron" Label="for IsList, IsList"/>
 <Returns>a <C>Polyhedron</C> Object
</Returns>
 <Description>
 The input is a list <C>P</C> and a list <C>C</C>. The output is the polyhedron defined by the Minkowski sum 
 of the polytope defined by <C>P</C> and the cone defined by <C>C</C>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Polyhedrons_Section_Attributes">
<Heading>Attributes</Heading>

<ManSection>
  <Attr Arg="P" Name="ExternalCddPolyhedron" Label="for IsPolyhedron"/>
 <Returns>cdd Object
</Returns>
 <Description>
 Converts the polyhedron to a cdd object. The operations of CddInterface can then be applied
 on this convex object.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="ExternalNmzPolyhedron" Label="for IsPolyhedron"/>
 <Returns>normaliz Object
</Returns>
 <Description>
 Converts the polyhedron to an normaliz object. The operations of NormalizInterface can then be applied
 on this convex object.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="DefiningInequalities" Label="for IsPolyhedron"/>
 <Returns>a list
</Returns>
 <Description>
 Returns the Defining inequalities of the given polyhedron.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="MainRatPolytope" Label="for IsPolyhedron"/>
 <Returns>a <C>Polytope</C> Object
</Returns>
 <Description>
 Returns the main rational polytope of the polyhedron.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="MainPolytope" Label="for IsPolyhedron"/>
 <Returns>a <C>Polytope</C> Object
</Returns>
 <Description>
 Returns the main integral polytope of the given polyhedron.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="VerticesOfMainRatPolytope" Label="for IsPolyhedron"/>
 <Returns>a list
</Returns>
 <Description>
 Returns the vertices of the main rational polytope of the polyhedron.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="VerticesOfMainPolytope" Label="for IsPolyhedron"/>
 <Returns>a list
</Returns>
 <Description>
 Returns the vertices of the main integral polytope of the given polyhedron.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="TailCone" Label="for IsPolyhedron"/>
 <Returns>a <C>Cone</C> Object
</Returns>
 <Description>
 Returns the tail cone of the polyhedron.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="RayGeneratorsOfTailCone" Label="for IsPolyhedron"/>
 <Returns>a list
</Returns>
 <Description>
 Returns the Ray Generators of the tail cone.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="LatticePointsGenerators" Label="for IsPolyhedron"/>
 <Returns>a list
</Returns>
 <Description>
 Returns the integral lattice generators of the polyhedron. The output is a list <Math>L</Math> of length <Math>3</Math>. Any integral point in
 polyhedron can be written as <Math>a+mb+nc</Math>, where <Math>a\in L[1],b\in L[2],c\in L[3], m\geq 0</Math>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="BasisOfLinealitySpace" Label="for IsPolyhedron"/>
 <Returns>a list
</Returns>
 <Description>
 Returns a basis to the lineality space of the polyhedron. I.e., a basis to the vector space that is contained in <C>P</C>.
 </Description>
</ManSection>


<ManSection>
  <Attr Arg="P" Name="FVector" Label="for IsPolyhedron"/>
 <Returns>a list
</Returns>
 <Description>
 Returns a list whose <Math>i</Math>'th entry is the number of faces of dimension <Math>i-1</Math>.
 </Description>
</ManSection>


</Section>


<Section Label="Chapter_Polyhedrons_Section_Properties">
<Heading>Properties</Heading>

<ManSection>
  <Prop Arg="P" Name="IsBounded" Label="for IsPolyhedron"/>
 <Returns>true or false
</Returns>
 <Description>
 The input is a polyhedron P and the output is whether it is bounded or not.
 </Description>
</ManSection>


<ManSection>
  <Prop Arg="P" Name="IsPointed" Label="for IsPolyhedron"/>
 <Returns>true or false
</Returns>
 <Description>
 The input is a polyhedron P and the output is whether its tail cone is pointed or not.
 </Description>
</ManSection>


<#Include Label="example3">

</Section>


<Section Label="Chapter_Polyhedrons_Section_Solving_Linear_programs">
<Heading>Solving Linear programs</Heading>

 The problem of solving linear programs can be solved in the gap package
 <C>CddInterface</C>, which is required by <C>NConvex</C>.
<ManSection>
  <Oper Arg="P, max_or_min, target_func" Name="SolveLinearProgram" Label="for IsPolyhedron, IsString, IsList"/>
 <Returns>a list or fail
</Returns>
 <Description>
 The input is a polyhedron <C>P</C>, a string <C>max_or_min</C> <Math>\in</Math> {"max", "min"} and an objective function 
 <C>target_func</C>, which we want to maximize or minimize. If the linear program has an optimal solution,
 the operation returns a list of two entries, the solution vector and the optimal value of the objective function,
 otherwise it returns fail.
 </Description>
</ManSection>


<ManSection>
  <Oper Arg="P, max_or_min, target_func" Name="SolveLinearProgram" Label="for IsPolytope, IsString, IsList"/>
 <Returns>a list or fail
</Returns>
 <Description>
 The input is a polytope <C>P</C>, a string <C>max_or_min</C> <Math>\in</Math> {"max","min"} and an objective function 
 <C>target_func</C>, which we want to maximize or minimize. If the linear program has an optimal solution,
 the operation returns a list of two entries, the solution vector and the optimal value of the objective function,
 otherwise it returns fail.
 </Description>
</ManSection>


<#Include Label="linear_program">

</Section>


</Chapter>

