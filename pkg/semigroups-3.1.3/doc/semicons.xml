#############################################################################
##
#W  constructions.xml
#Y  Copyright (C) 2015                                   James D. Mitchell
##                                                          Wilf A. Wilson
##
##  Licensing information can be found in the README file of this package.
##
#############################################################################
##

<#GAPDoc Label="TrivialSemigroup">
  <ManSection>
    <Func Name="TrivialSemigroup" Arg="[filt, ][deg]"/>
    <Returns>
      A trivial semigroup.
    </Returns>
      <Description>
        A <B>trivial</B> semigroup is a semigroup with precisely one element.
        This function returns a trivial semigroup in the representation given
        by the filter <A>filter</A>, and (if possible) with the degree of the
        representation given by the non-negative integer <A>deg</A>.
        <P/>

        The optional argument <A>filt</A> may be one of the following:

        <List>
          <Item><C>IsTransformationSemigroup</C>
            (the default, if <A>filt</A> is not specified),</Item>
          <Item><C>IsPartialPermSemigroup</C>,</Item>
          <Item><C>IsBipartitionSemigroup</C>,</Item>
          <Item><C>IsBlockBijectionSemigroup</C>,</Item>
          <Item><C>IsPBRSemigroup</C>,</Item>
          <Item><C>IsBooleanMatSemigroup</C>.</Item>
        </List>

        If the optional argument <A>deg</A> is not specified, then the smallest
        possible degree will be used.
        <P/>
        <Example><![CDATA[
gap> S := TrivialSemigroup();
<trivial transformation group of degree 0 with 1 generator>
gap> Size(S);
1
gap> S := TrivialSemigroup(3);
<trivial transformation group of degree 3 with 1 generator>
gap> S := TrivialSemigroup(IsBipartitionSemigroup, 2);
<trivial block bijection group of degree 2 with 1 generator>
gap> Elements(S);
[ <block bijection: [ 1, 2, -1, -2 ]> ]]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="MonogenicSemigroup">
  <ManSection>
    <Func Name="MonogenicSemigroup" Arg="[filt, ]m, r"/>
    <Returns>
      A monogenic semigroup with index <A>m</A> and period <A>r</A>.
    </Returns>
      <Description>
        If <A>m</A> and <A>r</A> are positive integers,
        then this function returns a monogenic semigroup
        <C>S</C> with index <A>m</A> and period <A>r</A>
        in the representation given by the filter <A>filt</A>. 
        <P/>

        The optional argument <A>filt</A> may be one of the following:

        <List>
          <Item><C>IsTransformationSemigroup</C>
            (the default, if <A>filt</A> is not specified),</Item>
          <Item><C>IsPartialPermSemigroup</C>,</Item>
          <Item><C>IsBipartitionSemigroup</C>,</Item>
          <Item><C>IsBlockBijectionSemigroup</C>,</Item>
          <Item><C>IsPBRSemigroup</C>,</Item>
          <Item><C>IsBooleanMatSemigroup</C>.</Item>
        </List>

        The semigroup <C>S</C> is generated by a single element, <M>f</M>.
        <C>S</C> consists of the elements
        <M>f, f ^ {2}, \ldots, f ^ {m}, \ldots, f ^ {m + r - 1}</M>.
        The minimal ideal of <C>S</C> consists of the elements
        <M>f ^ {m}, \ldots, f ^ {m + r - 1}</M>
        and is isomorphic to the cyclic group of order <M>r</M>. 
        <P/>

        See <Ref Prop="IsMonogenicSemigroup"/> for more information
        about monogenic semigroups.

        <Example><![CDATA[
gap> S := MonogenicSemigroup(5, 3);
<commutative non-regular transformation semigroup of size 7, degree 8 
 with 1 generator>
gap> IsMonogenicSemigroup(S);
true
gap> I := MinimalIdeal(S);;
gap> IsGroupAsSemigroup(I);
true
gap> StructureDescription(I);
"C3"
gap> S := MonogenicSemigroup(IsBlockBijectionSemigroup, 9, 1);
<commutative non-regular block bijection semigroup of size 9, 
 degree 10 with 1 generator>]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="RectangularBand">
  <ManSection>
    <Func Name="RectangularBand" Arg="[filt, ]m, n"/>
    <Returns>
      An <A>m</A> by <A>n</A> rectangular band.
    </Returns>
      <Description>
        If <A>m</A> and <A>n</A> are positive integers,
        then this function returns a semigroup isomorphic to an <A>m</A>
        by <A>n</A> rectangular band, in the representation given by
        the filter <A>filt</A>. <P/>

        The optional argument <A>filt</A> may be one of the following:
        <List>
          <Item><C>IsTransformationSemigroup</C>
            (the default, if <A>filt</A> is not specified),</Item>
          <Item><C>IsBipartitionSemigroup</C>,</Item>
          <Item><C>IsPBRSemigroup</C>,</Item>
          <Item><C>IsBooleanMatSemigroup</C>,</Item>
          <Item><C>IsReesMatrixSemigroup</C>.</Item>
        </List>

        See <Ref Prop="IsRectangularBand"/> for more information about
        rectangular bands.

        <Example><![CDATA[
gap> T := RectangularBand(5, 6);
<regular transformation semigroup of size 30, degree 10 with 6 
 generators>
gap> IsRectangularBand(T);
true
gap> S := RectangularBand(IsReesMatrixSemigroup, 4, 8);
<Rees matrix semigroup 4x8 over Group(())>
gap> IsRectangularBand(S);
true
gap> IsCompletelySimpleSemigroup(S) and IsHTrivial(S);
true]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="ZeroSemigroup">
  <ManSection>
    <Func Name="ZeroSemigroup" Arg="[filt, ]n"/>
    <Returns>
      A zero semigroup of order <A>n</A>.
    </Returns>
      <Description>
        If <A>n</A> is a positive integer, then this function returns a zero
        semigroup of order <A>n</A> in the representation given by the filter
        <A>filt</A>. <P/>

        The optional argument <A>filt</A> may be one of the following:

        <List>
          <Item><C>IsTransformationSemigroup</C>
            (the default, if <A>filt</A> is not specified),</Item>
          <Item><C>IsPartialPermSemigroup</C>,</Item>
          <Item><C>IsBipartitionSemigroup</C>,</Item>
          <Item><C>IsBlockBijectionSemigroup</C>,</Item>
          <Item><C>IsPBRSemigroup</C>,</Item>
          <Item><C>IsBooleanMatSemigroup</C>,</Item>
          <Item><C>IsReesZeroMatrixSemigroup</C>
            (provided that <C><A>n</A> &gt; 1</C>).</Item>
        </List>

        See <Ref Prop="IsZeroSemigroup"/> for more information about zero
        semigroups.

        <Example><![CDATA[
gap> S := ZeroSemigroup(5);
<commutative non-regular transformation semigroup of size 5, degree 5 
 with 4 generators>
gap> IsZeroSemigroup(S);
true
gap> S := ZeroSemigroup(IsPartialPermSemigroup, 15);
<commutative non-regular partial perm semigroup of size 15, rank 14 
 with 14 generators>
gap> Size(S);
15
gap> z := MultiplicativeZero(S);
<empty partial perm>
gap> IsZeroSemigroup(S);
true
gap> ForAll(S, x -> ForAll(S, y -> x * y = z));
true]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="BrandtSemigroup">
  <ManSection>
    <Func Name="BrandtSemigroup" Arg="[[filt, ]G, ]n"/>
    <Returns>
      An <A>n</A> by <A>n</A> Brandt semigroup over the group <A>G</A>.
    </Returns>
      <Description>
        If <A>n</A> is a positive integer, then this function returns an
        <A>n</A> by <A>n</A> Brandt semigroup over the group <A>G</A>
        in the representation given by the filter <A>filt</A>. <P/>

        The optional argument <A>filt</A> can be any of the following:
        <List>
          <Item><C>IsPartialPermSemigroup</C>
            (the default, if <A>filt</A> is not specified),</Item>
          <Item><C>IsReesZeroMatrixSemigroup</C>,</Item>
          <Item><C>IsTransformationSemigroup</C>,</Item>
          <Item><C>IsBipartitionSemigroup</C>,</Item>
          <Item><C>IsPBRSemigroup</C>,</Item>
          <Item><C>IsBooleanMatSemigroup</C>,</Item>
          <Item><C>IsNTPMatrixSemigroup</C>,</Item>
          <Item><C>IsMaxPlusMatrixSemigroup</C>,</Item>
          <Item><C>IsMinPlusMatrixSemigroup</C>,</Item>
          <Item><C>IsTropicalMaxPlusMatrixSemigroup</C>,</Item>
          <Item><C>IsTropicalMinPlusMatrixSemigroup</C>,</Item>
          <Item><C>IsProjectiveMaxPlusMatrixSemigroup</C>,</Item>
          <Item><C>IsIntegerMatrixSemigroup.</C></Item>
        </List>
        
        The optional argument <A>G</A> defaults to a trivial permutation group.
        If present <A>G</A> must be a permutation group, unless <A>filt</A> is
        <C>IsReesZeroMatrixSemigroup</C> when <A>G</A> may be any type of
        finite group. 
        <P/>
        
        See <Ref Prop="IsBrandtSemigroup"/> for more information about Brandt
        semigroups.

        <Example><![CDATA[
gap> S := BrandtSemigroup(5);
<0-simple inverse partial perm semigroup of rank 5 with 4 generators>
gap> IsBrandtSemigroup(S);
true
gap> S := BrandtSemigroup(IsTransformationSemigroup, 15);
<0-simple transformation semigroup of degree 16 with 28 generators>
gap> Size(S);
226
gap> MultiplicativeZero(S);
Transformation( [ 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16,
  16, 16, 16 ] )
gap> S := BrandtSemigroup(Group((1, 2)), 3);
<0-simple inverse partial perm semigroup of rank 6 with 3 generators>
gap> S := BrandtSemigroup(IsTransformationSemigroup, Group((1, 2)), 3);
<0-simple transformation semigroup of degree 7 with 5 generators>
gap> S := BrandtSemigroup(IsReesZeroMatrixSemigroup, 
>                         DihedralGroup(4), 
>                         2);
<Rees 0-matrix semigroup 2x2 over <pc group of size 4 with 
 2 generators>>]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>

<#GAPDoc Label="LeftZeroSemigroup">
  <ManSection>
    <Func Name="LeftZeroSemigroup" Arg="[filt, ]n"/>
    <Func Name="RightZeroSemigroup" Arg="[filt, ]n"/>
    <Returns>
      A left zero (or right zero) semigroup of order <A>n</A>.
    </Returns>
    <Description>
        If <A>n</A> is a positive integer, then this function returns a left
        zero (or right zero, as appropriate) semigroup of order <A>n</A> in the
        representation given by the filter <A>filt</A>. 
        If <A>filt</A> is not specified then the default representation is
        <C>IsTransformationSemigroup</C>. <P/>

        The function <C>LeftZeroSemigroup([<A>filt</A>,] <A>n</A>)</C> simply
        calls <C>RectangularBand([<A>filt</A>,] <A>n</A>, 1)</C> and
        the function <C>RightZeroSemigroup([<A>filt</A>,] <A>n</A>)</C> simply
        calls <C>RectangularBand([<A>filt</A>,] 1, <A>n</A>)</C>. <P/>

        For more information about <C>RectangularBand</C>, including its 
        permitted values of <A>filt</A>, see <Ref Func="RectangularBand"/>.

        See <Ref Prop="IsLeftZeroSemigroup"/> and <Ref
          Prop="IsRightZeroSemigroup"/> for more information about left zero
        and right zero semigroups.
 
        <Example><![CDATA[
gap> S := LeftZeroSemigroup(20);
<transformation semigroup of degree 6 with 20 generators>
gap> IsLeftZeroSemigroup(S);
true
gap> ForAll(Tuples(S, 2), p -> p[1] * p[2] = p[1]);
true
gap> S := RightZeroSemigroup(IsBipartitionSemigroup, 5);
<regular bipartition semigroup of size 5, degree 3 with 5 generators>
gap> IsRightZeroSemigroup(S);
true]]></Example>
    </Description>
  </ManSection>
<#/GAPDoc>
