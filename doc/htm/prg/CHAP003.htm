<html><head><title>[prg] 3 Creating New Objects</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Previous</a>] [<a href ="CHAP004.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>3 Creating New Objects</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP003.htm#SECT001">Creating Categories</a>
<li> <A HREF="CHAP003.htm#SECT002">Creating Representations</a>
<li> <A HREF="CHAP003.htm#SECT003">Creating Attributes and Properties</a>
<li> <A HREF="CHAP003.htm#SECT004">Creating Other Filters</a>
<li> <A HREF="CHAP003.htm#SECT005">Creating Operations</a>
<li> <A HREF="CHAP003.htm#SECT006">Creating Families</a>
<li> <A HREF="CHAP003.htm#SECT007">Creating Types</a>
<li> <A HREF="CHAP003.htm#SECT008">Creating Objects</a>
<li> <A HREF="CHAP003.htm#SECT009">Component Objects</a>
<li> <A HREF="CHAP003.htm#SECT010">Positional Objects</a>
<li> <A HREF="CHAP003.htm#SECT011">Implementing New List Objects</a>
<li> <A HREF="CHAP003.htm#SECT012">Example -- Constructing Enumerators</a>
<li> <A HREF="CHAP003.htm#SECT013">Example -- Constructing Iterators</a>
<li> <A HREF="CHAP003.htm#SECT014">Arithmetic Issues in the Implementation of New Kinds of Lists</a>
<li> <A HREF="CHAP003.htm#SECT015">External Representation</a>
<li> <A HREF="CHAP003.htm#SECT016">Mutability and Copying</a>
<li> <A HREF="CHAP003.htm#SECT017">Global Variables in the Library</a>
<li> <A HREF="CHAP003.htm#SECT018">Declaration and Implementation Part</a>
</ol><p>
<p>
This chapter is divided into three parts.
<p>
In the first part, it is explained how to create
filters (see&nbsp;<a href="CHAP003.htm#SECT001">Creating Categories</a>, <a href="CHAP003.htm#SECT002">Creating Representations</a>,
<a href="CHAP003.htm#SECT003">Creating Attributes and Properties</a>, <a href="CHAP003.htm#SECT004">Creating Other Filters</a>),
operations (see&nbsp;<a href="CHAP003.htm#SECT005">Creating Operations</a>),
families (see&nbsp;<a href="CHAP003.htm#SECT006">Creating Families</a>),
types (see&nbsp;<a href="CHAP003.htm#SECT007">Creating Types</a>),
and objects with given type (see&nbsp;<a href="CHAP003.htm#SECT008">Creating Objects</a>).
<p>
In the second part, first a few small examples are given,
for dealing with the usual cases of
component objects (see&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>)
and positional objects (see&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a>),
and for the implementation of new kinds of lists
(see&nbsp;<a href="CHAP003.htm#SECT011">Implementing New List Objects</a>
and&nbsp;<a href="CHAP003.htm#SECT014">Arithmetic Issues in the Implementation of New Kinds of Lists</a>).
Finally, the external representation of objects is introduced
(see&nbsp;<a href="CHAP003.htm#SECT015">External Representation</a>),
as a tool for representation independent access to an object.
<p>
The third part deals with some rules concerning the organization
of the <font face="Gill Sans,Helvetica,Arial">GAP</font> library;
namely, some commands for creating global variables are explained
(see&nbsp;<a href="CHAP003.htm#SECT017">Global Variables in the Library</a>)
that correspond to the ones discussed in the first part of the chapter,
and the idea of distinguishing declaration and implementation part
of <font face="Gill Sans,Helvetica,Arial">GAP</font> packages is outlined (see&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>).
<p>
See also Chapter&nbsp;<a href="CHAP005.htm">An Example -- Residue Class Rings</a> for examples
how the functions from the first part are used,
and why it is useful to have a declaration part and an implementation part.
<p>
<p>
<h2><a name="SECT001">3.1 Creating Categories</a></h2>
<p><p>
<a name = "SSEC001.1"></a>
<li><code>NewCategory( </code><var>name</var><code>, </code><var>super</var><code> )</code>
<p>
<code>NewCategory</code> returns a new category <var>cat</var> that has the name <var>name</var> and
is contained in the filter <var>super</var>,
see&nbsp;<a href="../ref/CHAP013.htm#SECT002">Filters</a> in the Reference Manual.
This means that every object in <var>cat</var> lies automatically also in <var>super</var>.
We say also that <var>super</var> is an implied filter of <var>cat</var>.
<p>
For example, if one wants to create a category of group elements
then <var>super</var> should be <code>IsMultiplicativeElementWithInverse</code> or a
subcategory of it.
If no specific supercategory of <var>cat</var> is known,
<var>super</var> may be <code>IsObject</code>.
<p>
<strong>@Eventually tools will be provided to display hierarchies of
categories etc.,
which will help to choose <var>super</var> appropriately.@</strong>
<p>
The incremental rank (see&nbsp;<a href="../ref/CHAP013.htm#SECT002">Filters</a> in the Reference Manual)
of <var>cat</var> is 1.
<p>
Two functions that return special kinds of categories are of importance.
<p>
<a name = "SSEC001.2"></a>
<li><code>CategoryCollections( </code><var>cat</var><code> )</code>
<p>
For a category <var>cat</var>,
<code>CategoryCollections</code> returns the <strong>collections category</strong> of <var>cat</var>.
This is a category in that all collections of objects in <var>cat</var> lie.
<p>
For example, a permutation lies in the category <code>IsPerm</code>,
and every dense list of permutations and every domain of permutations
lies in the collections category of <code>IsPerm</code>.
<p>
<a name = "SSEC001.3"></a>
<li><code>CategoryFamily( </code><var>cat</var><code> )</code>
<p>
For a category <var>cat</var>,
<code>CategoryFamily</code> returns the <strong>family category</strong> of <var>cat</var>.
This is a category in that all families lie that know from their
creation that all their elements are in the category <var>cat</var>,
see&nbsp;<a href="CHAP003.htm#SECT006">Creating Families</a>.
<p>
For example, a family of tuples is in the category
<code>CategoryFamily( IsTuple )</code>,
and one can distinguish such a family from others by this category.
So it is possible to install methods for operations that require one
argument to be a family of tuples.
<p>
<code>CategoryFamily</code> is quite technical, and in fact of minor importance.
<p>
<p>
<h2><a name="SECT002">3.2 Creating Representations</a></h2>
<p><p>
<a name = "SSEC002.1"></a>
<li><code>NewRepresentation( </code><var>name</var><code>, </code><var>super</var><code>, </code><var>slots</var><code> )</code>
<p>
<code>NewRepresentation</code> returns a new representation <var>rep</var> that has the name
<var>name</var> and is a subrepresentation of the representation <var>super</var>.
This means that every object in <var>rep</var> lies automatically also in <var>super</var>.
We say also that <var>super</var> is an implied filter of <var>rep</var>.
<p>
Each representation in <font face="Gill Sans,Helvetica,Arial">GAP</font> is a subrepresentation of exactly one
of the four representations <code>IsInternalRep</code>, <code>IsDataObjectRep</code>,
<code>IsComponentObjectRep</code>, <code>IsPositionalObjectRep</code>.
The data describing objects in the former two can be accessed only via
<font face="Gill Sans,Helvetica,Arial">GAP</font> kernel functions, the data describing objects in the latter two
is accessible also in library functions, see&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>
and&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a> for the details.
<p>
The third argument <var>slots</var> is a list either of integers or of strings.
In the former case, <var>rep</var> must be <code>IsPositionalObjectRep</code> or a
subrepresentation of it, and <var>slots</var> tells what positions of the objects
in the representation <var>rep</var> may be bound.
In the latter case, <var>rep</var> must be <code>IsComponentObjectRep</code> or a
subrepresentation of, and <var>slots</var> lists the admissible names of
components that objects in the representation <var>rep</var> may have.
The admissible positions resp. component names of <var>super</var> need not be
be listed in <var>slots</var>.
<p>
The incremental rank (see&nbsp;<a href="../ref/CHAP013.htm#SECT002">Filters</a> in the Reference Manual)
of <var>rep</var> is 1.
<p>
Note that for objects in the representation <var>rep</var>,
of course some of the component names and positions reserved via <var>slots</var>
may be unbound.
<p>
Examples for the use of <code>NewRepresentation</code> can be found
in&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>, <a href="CHAP003.htm#SECT010">Positional Objects</a>, and also
in&nbsp;<a href="CHAP005.htm#SECT003">A Second Attempt to Implement Elements of Residue Class Rings</a>.
<p>
<p>
<h2><a name="SECT003">3.3 Creating Attributes and Properties</a></h2>
<p><p>
<a name = "SSEC003.1"></a>
<li><code>NewAttribute( </code><var>name</var><code>, </code><var>filt</var><code> )</code>
<li><code>NewAttribute( </code><var>name</var><code>, </code><var>filt</var><code>, </code><var>rank</var><code> )</code>
<p>
<code>NewAttribute</code> returns a new attribute <var>attr</var> with name <var>name</var>
(see also&nbsp;<a href="../ref/CHAP013.htm#SECT005">Attributes</a> in the Reference Manual).
The filter <var>filt</var> describes the involved filters of <var>attr</var>
(see&nbsp;<a href="../ref/CHAP013.htm#SECT002">Filters</a> in the Reference Manual).
That is, the argument for <var>attr</var> is expected to lie in <var>filt</var>.
<p>
Each method for <var>attr</var> that does <strong>not</strong> require its argument to lie
in <var>filt</var> must be installed using <code>InstallOtherMethod</code>.
<p>
Contrary to the situation with categories and representations,
the tester of <var>attr</var> does <strong>not</strong> imply <var>filt</var>.
This is exactly because of the possibility to install methods
that do not require <var>filt</var>.
<p>
For example, the attribute <code>Size</code> was created with second argument
a list or a collection,
but there is also a method for <code>Size</code> that is applicable to
a character table, which is neither a list nor a collection.
<p>
The optional third argument <var>rank</var> denotes the incremental rank
(see&nbsp;<a href="../ref/CHAP013.htm#SECT002">Filters</a> in the Reference Manual) of the tester of <var>attr</var>,
the default value is 1.
<p>
<a name = "SSEC003.2"></a>
<li><code>NewAttribute( </code><var>name</var><code>, </code><var>filt</var><code>, "mutable" )</code>
<li><code>NewAttribute( </code><var>name</var><code>, </code><var>filt</var><code>, "mutable", </code><var>rank</var><code> )</code>
<p>
If the third argument is the string <code>"mutable"</code>, the stored values of the
new attribute are not forced to be immutable.
This is useful for an attribute whose value is some partial information
that may be completed later.
For example, there is an attribute <code>ComputedSylowSubgroups</code> for the list
holding those Sylow subgroups of a group that have been computed already
by the function <code>SylowSubgroup</code>,
and this list is mutable because one may want to enter groups into it
as they are computed.
<p>
<a name = "SSEC003.3"></a>
<li><code>NewProperty( </code><var>name</var><code>, </code><var>filt</var><code> )</code>
<br><code>&nbsp;NewProperty( </code><var>name</var><code>, </code><var>filt</var><code>, </code><var>rank</var><code> )</code>
<p>
<code>NewProperty</code> returns a new property <var>prop</var> with name <var>name</var>
(see also&nbsp;<a href="../ref/CHAP013.htm#SECT007">Properties</a> in the Reference Manual).
The filter <var>filt</var> describes the involved filters of <var>prop</var>.
As in the case of attributes, <var>filt</var> is not implied by <var>prop</var>.
<p>
The optional third argument <var>rank</var> denotes the incremental rank
(see&nbsp;<a href="../ref/CHAP013.htm#SECT002">Filters</a> in the Reference Manual) of the property <var>prop</var> itself,
i.e. <strong>not</strong> of its tester, the default value is 1.
<p>
Each method that is installed for an attribute or a property
via <code>InstallMethod</code> must require exactly one argument,
and this must lie in the filter <var>filt</var> that was entered as second
argument of <code>NewAttribute</code> resp. <code>NewProperty</code>.
<p>
As for any operation (see&nbsp;<a href="CHAP003.htm#SECT005">Creating Operations</a>),
for attributes and properties one can install a method taking an argument
that does not lie in <var>filt</var> via <code>InstallOtherMethod</code>,
or a method for more than one argument;
in the latter case,
clearly the result value is <strong>not</strong> stored in any of the arguments.
<p>
<p>
<h2><a name="SECT004">3.4 Creating Other Filters</a></h2>
<p><p>
<a name = "SSEC004.1"></a>
<li><code>NewFilter( </code><var>name</var><code> )</code>
<br><code>&nbsp;NewFilter( </code><var>name</var><code>, </code><var>rank</var><code> )</code>
<p>
<code>NewFilter</code> returns a simple filter with name <var>name</var>
(see&nbsp;<a href="../ref/CHAP013.htm#SECT008">Other Filters</a> in the Reference Manual).
The optional second argument <var>rank</var> denotes the incremental rank
(see&nbsp;<a href="../ref/CHAP013.htm#SECT002">Filters</a> in the Reference Manual) of the filter,
the default value is 1.
<p>
In order to change the value of <var>filt</var> for an object <var>obj</var>,
one can use logical implications (see&nbsp;<a href="CHAP002.htm#SECT007">Logical Implications</a>) or
the functions
<p>
<a name = "SSEC004.2"></a>
<li><code>SetFilterObj( </code><var>obj</var><code>, </code><var>filt</var><code> )</code>
<a name = "SSEC004.2"></a>
<li><code>ResetFilterObj( </code><var>obj</var><code>, </code><var>filt</var><code> )</code>
<p>
<code>SetFilterObj</code> sets the value of <var>filt</var> (and of all filters implied by
<var>filt</var>) for <var>obj</var> to <code>true</code>,
<p>
<code>ResetFilterObj</code> sets the value of <var>filt</var> for <var>obj</var> to <code>false</code> (but implied
filters of <var>filt</var> are not touched. This might create inconsistent situations
if applied carelessly).
<p>
The default value of <var>filt</var> for each object is <code>false</code>.
<p>
<p>
<h2><a name="SECT005">3.5 Creating Operations</a></h2>
<p><p>
<a name = "SSEC005.1"></a>
<li><code>NewOperation( </code><var>name</var><code>, </code><var>args-filts</var><code> )</code>
<p>
<code>NewOperation</code> returns an operation <var>opr</var> with name <var>name</var>.
The list <var>args-filts</var> describes requirements about the arguments
of <var>opr</var>, namely the number of arguments must be equal to the length of
<var>args-filts</var>, and the <i>i</i>-th argument must lie in the filter
<code></code><var>args-filts</var><code>[<i>i</i>]</code>.
<p>
Each method that is installed for <var>opr</var> via <code>InstallMethod</code> must require
that the <i>i</i>-th argument lies in the filter <code></code><var>args-filts</var><code>[<i>i</i>]</code>.
<p>
One can install methods for other arguments tuples via
<code>InstallOtherMethod</code>,
this way it is also possible to install methods for a different number
of arguments than the length of <var>args-filts</var>.
<p>
<p>
<h2><a name="SECT006">3.6 Creating Families</a></h2>
<p><p>
Families are probably the least obvious part of the <font face="Gill Sans,Helvetica,Arial">GAP</font> type system,
so some remarks about the role of families are necessary.
When one uses <font face="Gill Sans,Helvetica,Arial">GAP</font> as it is, one will (better: should) not meet
families at all.
The two situations where families come into play are the following.
<p>
First, since families are used to describe relations between arguments of
operations in the method selection mechanism
(see Chapter&nbsp;<a href="CHAP002.htm">Method Selection</a> in this manual,
and also Chapter&nbsp;<a href="../ref/CHAP013.htm">Types of Objects</a> in the Reference Manual),
one has to prescribe such a relation in each method installation
(see&nbsp;<a href="CHAP002.htm#SECT002">Method Installation</a>);
usual relations are <code>ReturnTrue</code> (which means that any relation of the
actual arguments is admissible), <code>IsIdenticalObj</code> (which means that
there are two arguments that lie in the same family),
and <code>IsCollsElms</code> (which means that there are two arguments,
the first being a collection of elements that lie in the same family
as the second argument).
<p>
Second ---and this is the more complicated situation---
whenever one creates a new kind of objects,
one has to decide what its family shall be.
If the new object shall be equal to existing objects,
for example if it is just represented in a different way,
there is no choice:
The new object must lie in the same family as all objects
that shall be equal to it.
So only if the new object is different (w.r.t.&nbsp;the equality ``<code>=</code>'')
from all other <font face="Gill Sans,Helvetica,Arial">GAP</font> objects, we are likely to create a new family
for it.
Note that enlarging an existing family by such new objects
may be problematic because of implications that have been
installed for all  objects of the family in question.
The choice of families depends on the applications one has in mind.
For example, if the new objects in question are not likely to be
arguments of operations for which family relations are relevant
(for example binary arithmetic operations),
one could create one family for all such objects,
and regard it as ``the family of all those <font face="Gill Sans,Helvetica,Arial">GAP</font> objects that would
in fact not need a family''.
On the other extreme, if one wants to create domains of the new objects
then one has to choose the family in such a way that all intended
elements of a domain do in fact lie in the same family.
(Remember that a domain is a collection, see Chapter&nbsp;<a href="../ref/CHAP012.htm#SECT004">Domains</a>
in the Reference Manual, and that a collection consists of elements
in the same family, see Chapter&nbsp;<a href="../ref/CHAP028.htm">Collections</a> and Section&nbsp;<a href="../ref/CHAP013.htm#SECT001">Families</a>
in the Reference Manual.)
<p>
Let us look at an example.
Suppose that no permutations are available in <font face="Gill Sans,Helvetica,Arial">GAP</font>,
and that we want to implement permutations.
Clearly we want to support permutation groups,
but it is not a priori clear how to distribute the new permutations
into families.
We can put all permutations into one family;
this is how in fact permutations are implemented in <font face="Gill Sans,Helvetica,Arial">GAP</font>.
But it would also be possible to put all permutations of a given degree
into a family of their own;
this would for example mean that for each degree,
there would be distinguished trivial permutations,
and that the stabilizer of the point <code>5</code> in the symmetric group on the
points <tt>1</tt>, <tt>2</tt>, &#8230;, <tt>5</tt> is not regarded as equal to the
symmetric group on <tt>1</tt>, <tt>2</tt>, <tt>3</tt>, <tt>4</tt>.
Note that the latter approach would have the advantage that it is
no problem to construct permutations and permutation groups acting on
arbitrary (finite) sets,
for example by constructing first the symmetric group on the set
and then generating any desired permutation group as a subgroup of this
symmetric group.
<p>
So one aspect concerning a reasonable choice of families is
to make the families large enough for being able to form interesting
domains of elements in the family.
But on the other hand,
it is useful to choose the families small enough for admitting
meaningful relations between objects.
For example, the elements of different free groups in <font face="Gill Sans,Helvetica,Arial">GAP</font>
lie in different families;
the multiplication of free group elements is installed only for the
case that the two operands lie in the same family,
with the effect that one cannot erroneously form the product of
elements from different free groups.
In this case, families appear as a tool for providing useful
restrictions.
<p>
As another example, note that an element and a collection containing
this element never lie in the same family,
by the general implementation of collections;
namely, the family of a collection of elements in the family <var>Fam</var>
is the collections family of <var>Fam</var> (see&nbsp;<a href="CHAP003.htm#SSEC006.2">CollectionsFamily</a>).
This means that for a collection, we need not (because we cannot)
decide about its family.
<p>
<a name = "SSEC006.1"></a>
<li><code>NewFamily( </code><var>name</var><code> )</code>
<br><code>&nbsp;NewFamily( </code><var>name</var><code>, </code><var>req</var><code> )</code>
<br><code>&nbsp;NewFamily( </code><var>name</var><code>, </code><var>req</var><code>, </code><var>imp</var><code> )</code>
<br><code>&nbsp;NewFamily( </code><var>name</var><code>, </code><var>req</var><code>, </code><var>imp</var><code>, </code><var>famfilter</var><code> )</code>
<p>
<code>NewFamily</code> returns a new family <var>fam</var> with name <var>name</var>.
The argument <var>req</var>, if present, is a filter of which <var>fam</var> shall be a
subset.
If one tries to create an object in <var>fam</var> that does not lie in the filter
<var>req</var>, an error message is printed.
Also the argument <var>imp</var>, if present,
is a filter of which <var>fam</var> shall be a subset.
Any object that is created in the family <var>fam</var> will lie automatically in
the filter <var>imp</var>.
<p>
The filter <var>famfilter</var>, if given, specifies a filter that will hold for the
family <var>fam</var> (not for objects in <var>fam</var>).
<p>
Families are always represented as component objects
(see&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>).
This means that components can be used to store and access
useful information about the family.
<p>
There are a few functions in <font face="Gill Sans,Helvetica,Arial">GAP</font> that construct families.
As an example, consider
(see also&nbsp;<a href="../ref/CHAP028.htm#SECT001">Collection Families</a> in the Reference Manual)
<p>
<a name = "SSEC006.2"></a>
<li><code>CollectionsFamily( </code><var>fam</var><code> )</code>
<p>
<code>CollectionsFamily</code> is an attribute that takes a family <var>fam</var> as
argument, and returns the family of all collections over <var>fam</var>,
that is, of all dense lists and domains that consist of objects in
<var>fam</var>.
<p>
The <code>NewFamily</code> call in the standard method of <code>CollectionsFamily</code>
is executed with second argument <code>IsCollection</code>,
since every object in the collections family must be a collection,
and with third argument the collections categories of the involved
categories in the implied filter of <var>fam</var>.
<p>
If <var>fam</var> is a collections family then
<p>
<a name = "SSEC006.3"></a>
<li><code>ElementsFamily( </code><var>fam</var><code> )</code>
<p>
returns the unique family with collections family <var>fam</var>;
note that by definition,
all elements in a collection lie in the same family,
so <code>ElementsFamily( </code><var>fam</var><code> )</code> is the family of each element
in any collection that has the family <var>fam</var>.
<p>
<p>
<h2><a name="SECT007">3.7 Creating Types</a></h2>
<p><p>
<a name = "SSEC007.1"></a>
<li><code>NewType( </code><var>fam</var><code>, </code><var>filt</var><code> )</code>
<br><code>&nbsp;NewType( </code><var>fam</var><code>, </code><var>filt</var><code>, </code><var>data</var><code> )</code>
<p>
<code>NewType</code> returns the type given by the family <var>fam</var>
and the filter <var>filt</var>.
The optional third argument <var>data</var> is any object that denotes defining
data of the desired type.
<p>
For examples where <code>NewType</code> is used, see&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>,
<a href="CHAP003.htm#SECT010">Positional Objects</a>,
and the example in Chapter&nbsp;<a href="CHAP005.htm">An Example -- Residue Class Rings</a>.
<p>
<p>
<h2><a name="SECT008">3.8 Creating Objects</a></h2>
<p><p>
<a name = "SSEC008.1"></a>
<li><code>Objectify( </code><var>type</var><code>, </code><var>data</var><code> ) F</code>
<p>
New objects are created by <code>Objectify</code>. <var>data</var> is a list or a record, and
<var>type</var> is the type that the desired object shall have. <code>Objectify</code>  turns
<var>data</var> into an object with type <var>type</var>. That is, <var>data</var> is  changed,  and
afterwards it will not be a list or a record unless  <var>type</var>  is  of  type
list resp. record.
<p>
If <var>data</var> is a list then <code>Objectify</code> turns it into a  positional  object,
if <var>data</var> is a record then <code>Objectify</code> turns it into a  component  object
(for examples, see&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a> and&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a>).
<p>
<code>Objectify</code> does also return the object that it made out of <var>data</var>.
<p>
For  examples  where  <code>Objectify</code>  is  used,   see&nbsp;<a href="CHAP003.htm#SECT009">Component   Objects</a>,
<a href="CHAP003.htm#SECT010">Positional Objects</a>, and the example in Chapter&nbsp;<a href="CHAP005.htm">An Example  --  Residue Class Rings</a>.
<p>
Attribute assignments will change the type of an object.  If  you  create
many objects, code of the form
<p>
<pre>
o:=Objectify(type,rec());
SetMyAttribute(o,value);
</pre>
<p>
will take a lot of time for type changes. You can avoid this  by  setting
the attributes immediately while the object is created, via:
<p>
<a name = "SSEC008.2"></a>
<li><code>ObjectifyWithAttributes(</code><var>obj</var><code>,</code><var>type</var><code>,</code><var>Attr1</var><code>,</code><var>val1</var><code>[,</code><var>Attr2</var><code>,</code><var>val2</var><code>...]) F</code>
<p>
which changes the type of object <var>obj</var> to type <var>type</var> and sets  attribute
<var>Attr1</var> to <var>val1</var>, sets attribute <var>Attr2</var> to <var>val2</var> and so forth.
<p>
If the filter list of <var>type</var> includes that these attributes are set  (and
the properties also include values of the properties) and if  no  special
setter methods are installed for any of the involved attributes then they
are  set  simultaneously  without  type  changes  which  can  produce   a
substantial speedup.
<p>
If the conditions of the last sentence are  not  fulfilled,  an  ordinary
<code>Objectify</code>  with  subsequent  <code>Setter</code>  calls  for  the  attributes   is
performed, instead.
<p>
<p>
<h2><a name="SECT009">3.9 Component Objects</a></h2>
<p><p>
A <strong>component object</strong> is an object in the representation
<code>IsComponentObjectRep</code> or a subrepresentation of it.
Such an object <var>cobj</var> is built from subobjects that can be accessed via
<code></code><var>cobj</var><code>!.</code><var>name</var><code></code>, similar to components of a record.
Also analogously to records, values can be assigned to components of
<var>cobj</var> via <code></code><var>cobj</var><code>!.</code><var>name</var><code>:= </code><var>val</var><code></code>.
For the creation of component objects, see&nbsp;<a href="CHAP003.htm#SECT008">Creating Objects</a>.
<p>
<a name = "SSEC009.1"></a>
<li><code>NamesOfComponents( </code><var>comobj</var><code> ) F</code>
<p>
For a component object <var>comobj</var>, <code>NamesOfComponents</code> returns a list of
strings, which are the names of components currently bound in <var>comobj</var>.
<p>
One must be <strong>very careful</strong> when using the <code>!.</code> operator,
in order to interpret the component in the right way,
and even more careful when using the assignment to components using <code>!.</code>,
in order to keep the information stored in <var>cobj</var> consistent.
<p>
First of all, in the access or assignment to a component as shown above,
<var>name</var> must be among the admissible component names
for the representation of <var>cobj</var>, see&nbsp;<a href="CHAP003.htm#SECT002">Creating Representations</a>.
Second, preferably only few low level functions should use <code>!.</code>,
whereas this operator should not occur in ``user interactions''.
<p>
Note that even if <var>cobj</var> claims that it is immutable, i.e., if <var>cobj</var>
is not in the category <code>IsMutable</code>, access and assignment via <code>!.</code> work.
This is necessary for being able to store newly discovered information
in immutable objects.
<p>
The following example shows the implementation of an iterator
(see&nbsp;<a href="../ref/CHAP028.htm#SECT007">Iterators</a> in the Reference Manual) for the domain of integers,
which is represented as component object.
See&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a> for an implementation using positional objects.
(In practice, such an iterator can be implemented more elegantly using
<code>IteratorByFunctions</code>, see&nbsp;<a href="CHAP003.htm#SECT013">Example -- Constructing Iterators</a>
and&nbsp;<a href="../ref/CHAP028.htm#SSEC007.8">IteratorByFunctions</a> in the <font face="Gill Sans,Helvetica,Arial">GAP</font> Reference Manual.)
<p>
The used succession of integers is 0, 1, &#8722;1, 2, &#8722;2, 3, &#8722;3, &#8230;,
that is, <i>a</i><sub><i>n</i></sub> = <i>n</i>/2 if <i>n</i> is even,
and <i>a</i><sub><i>n</i></sub> = (1&#8722;<i>n</i>)/2 otherwise.
<p>
<pre>
IsIntegersIteratorCompRep := NewRepresentation( "IsIntegersIteratorRep",
    IsComponentObjectRep, [ "counter" ] );
</pre>
<p>
The above command creates a new representation (see&nbsp;<a href="CHAP003.htm#SSEC002.1">NewRepresentation</a>)
<code>IsIntegersIteratorCompRep</code>,
as a subrepresentation of <code>IsComponentObjectRep</code>,
and with one admissible component <code>counter</code>.
So no other components than <code>counter</code> will be needed.
<p>
<pre>
InstallMethod( Iterator,
    "method for `Integers'",
    [ IsIntegers ],
    function( Integers )
    return Objectify( NewType( IteratorsFamily,
                                   IsIterator
                               and IsIntegersIteratorCompRep ),
                      rec( counter := 0 ) );
    end );
</pre>
<p>
After the above method installation, one can already ask for
<code>Iterator( Integers )</code>.
Note that exactly the domain of integers is described by
the filter <code>IsIntegers</code>.
<p>
By the call to <code>NewType</code>, the returned object lies in the family
containing all iterators, which is <code>IteratorsFamily</code>,
it lies in the category <code>IsIterator</code> and in the representation
<code>IsIntegersIteratorCompRep</code>;
furthermore, it has the component <code>counter</code> with value <code>0</code>.
<p>
What is missing now are methods for the two basic operations
of iterators, namely <code>IsDoneIterator</code> and <code>NextIterator</code>.
The former must always return <code>false</code>, since there are infinitely
many integers.
The latter must return the next integer in the iteration,
and update the information stored in the iterator,
that is, increase the value of the component <code>counter</code>.
<p>
<pre>
InstallMethod( IsDoneIterator,
    "method for iterator of `Integers'",
    [ IsIterator and IsIntegersIteratorCompRep ],
    ReturnFalse );

InstallMethod( NextIterator,
    "method for iterator of `Integers'",
    [ IsIntegersIteratorCompRep ],
    function( iter )
    iter!.counter:= iter!.counter + 1;
    if iter!.counter mod 2 = 0 then
      return iter!.counter / 2;
    else
      return ( 1 - iter!.counter ) / 2;
    fi;
    end );
</pre>
<p>
<p>
<h2><a name="SECT010">3.10 Positional Objects</a></h2>
<p><p>
A <strong>positional object</strong> is an object in the representation
<code>IsPositionalObjectRep</code> or a subrepresentation of it.
Such an object <var>pobj</var> is built from subobjects that can be accessed via
<code></code><var>pobj</var><code>![</code><var>pos</var><code>]</code>, similar to positions in a list.
Also analogously to lists, values can be assigned to positions of
<var>pobj</var> via <code></code><var>pobj</var><code>![</code><var>pos</var><code>]:= </code><var>val</var><code></code>.
For the creation of positional objects, see&nbsp;<a href="CHAP003.htm#SECT008">Creating Objects</a>.
<p>
One must be <strong>very careful</strong> when using the <code>![]</code> operator,
in order to interpret the position in the right way,
and even more careful when using the assignment to positions using <code>![]</code>,
in order to keep the information stored in <var>pobj</var> consistent.
<p>
First of all, in the access or assignment to a position as shown above,
<var>pos</var> must be among the admissible positions
for the representation of <var>pobj</var>, see&nbsp;<a href="CHAP003.htm#SECT002">Creating Representations</a>.
Second, preferably only few low level functions should use <code>![]</code>,
whereas this operator should not occur in ``user interactions''.
<p>
Note that even if <var>pobj</var> claims that it is immutable, i.e., if <var>pobj</var>
is not in the category <code>IsMutable</code>, access and assignment via <code>![]</code> work.
This is necessary for being able to store newly discovered information
in immutable objects.
<p>
The following example shows the implementation of an iterator
(see&nbsp;<a href="../ref/CHAP028.htm#SECT007">Iterators</a> in the Reference Manual) for the domain of integers,
which is represented as positional object.
See&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a> for an implementation using component objects,
and more details.
<p>
<pre>
IsIntegersIteratorPosRep := NewRepresentation( "IsIntegersIteratorRep",
    IsPositionalObjectRep, [ 1 ] );
</pre>
<p>
The above command creates a new representation (see&nbsp;<a href="CHAP003.htm#SSEC002.1">NewRepresentation</a>)
<code>IsIntegersIteratorPosRep</code>,
as a subrepresentation of <code>IsComponentObjectRep</code>,
and with only the first position being admissible for storing data.
<p>
<pre>
InstallMethod( Iterator,
    "method for `Integers'",
    [ IsIntegers ],
    function( Integers )
    return Objectify( NewType( IteratorsFamily,
                                   IsIterator
                               and IsIntegersIteratorRep ),
                      [ 0 ] );
    end );
</pre>
<p>
After the above method installation, one can already ask for
<code>Iterator( Integers )</code>.
Note that exactly the domain of integers is described by
the filter <code>IsIntegers</code>.
<p>
By the call to <code>NewType</code>, the returned object lies in the family
containing all iterators, which is <code>IteratorsFamily</code>,
it lies in the category <code>IsIterator</code> and in the representation
<code>IsIntegersIteratorPosRep</code>;
furthermore, the first position has value <code>0</code>.
<p>
What is missing now are methods for the two basic operations
of iterators, namely <code>IsDoneIterator</code> and <code>NextIterator</code>.
The former must always return <code>false</code>, since there are infinitely
many integers.
The latter must return the next integer in the iteration,
and update the information stored in the iterator,
that is, increase the value stored in the first position.
<p>
<pre>
InstallMethod( IsDoneIterator,
    "method for iterator of `Integers'",
    [ IsIterator and IsIntegersIteratorPosRep ],
    ReturnFalse );

InstallMethod( NextIterator,
    "method for iterator of `Integers'",
    [ IsIntegersIteratorPosRep ],
    function( iter )
    iter![1]:= iter![1] + 1;
    if iter![1] mod 2 = 0 then
      return iter![1] / 2;
    else
      return ( 1 - iter![1] ) / 2;
    fi;
    end );
</pre>
<p>
It should be noted that one can of course install both the methods shown
in Section&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a> and <a href="CHAP003.htm#SECT010">Positional Objects</a>.
The call <code>Iterator( Integers )</code> will cause one of the methods to be
selected, and for the returned iterator, which will have one of the
representations we constructed, the right <code>NextIterator</code> method
will be chosen.
<p>
<p>
<h2><a name="SECT011">3.11 Implementing New List Objects</a></h2>
<p><p>
This section gives some hints for the quite usual situation that one wants
to implement new objects that are lists.
More precisely, one either wants to deal with lists that have additional
features, or one wants that some objects also behave as lists.
An example can be found in&nbsp;<a href="CHAP003.htm#SECT012">Example -- Constructing Enumerators</a>.
<p>
A <strong>list</strong> in <font face="Gill Sans,Helvetica,Arial">GAP</font> is an object in the category <code>IsList</code>.
Basic operations for lists are <code>Length</code>, <code>\[\]</code>, and <code>IsBound\[\]</code>
(see&nbsp;<a href="../ref/CHAP021.htm#SECT002">Basic Operations for Lists</a> in the Reference Manual).
<p>
Note that the access to the position <var>pos</var> in the list <var>list</var>
via <code></code><var>list</var><code>[</code><var>pos</var><code>]</code> is handled by the call <code>\[\]( </code><var>list</var><code>, </code><var>pos</var><code> )</code>
to the operation <code>\[\]</code>.
To explain the somewhat strange name <code>\[\]</code> of this operation,
note that non-alphanumeric characters like <code>[</code> and <code>]</code> may occur in
<font face="Gill Sans,Helvetica,Arial">GAP</font> variable names only if they are escaped by a <code>\</code> character.
<p>
Analogously, the check <code>IsBound( </code><var>list</var><code>[</code><var>pos</var><code>] )</code> whether the position
<var>pos</var> of the list <var>list</var> is bound is handled by the call
<code>IsBound\[\]( </code><var>list</var><code>, </code><var>pos</var><code> )</code> to the operation
<code>IsBound\[\]</code>.
<p>
For mutable lists, also assignment to positions and unbinding of
positions via the operations <code>\[\]\:\=</code> and <code>Unbind\[\]</code>
are basic operations.
The assignment <code></code><var>list</var><code>[</code><var>pos</var><code>]:= </code><var>val</var><code></code> is handled by the call
<code>\[\]\:\=( </code><var>list</var><code>, </code><var>pos</var><code>, </code><var>val</var><code> )</code>,
and <code>Unbind( </code><var>list</var><code>[</code><var>pos</var><code>] )</code> is handled by the call
<code>Unbind\[\]( </code><var>list</var><code>, </code><var>pos</var><code> )</code>.
<p>
All other operations for lists, e.g., <code>Add</code>, <code>Append</code>, <code>Sum</code>,
are based on these operations.
This means that it is sufficient to install methods for the new list
objects only for the basic operations.
<p>
So if one wants to implement new list objects then one creates them
as objects in the category <code>IsList</code>, and installs methods for <code>Length</code>,
<code>\[\]</code>, and <code>IsBound\[\]</code>.
If the new lists shall be mutable, one needs to install also methods
for <code>\[\]\:\=</code> and <code>Unbind\[\]</code>.
<p>
One application for this is the implementation of <strong>enumerators</strong>
for domains.
An enumerator for the domain <i>D</i> is a dense list whose entries are
in bijection with the elements of <i>D</i>.
If <i>D</i> is large then it is not useful to write down all elements.
Instead one can implement such a bijection implicitly.
This works also for infinite domains.
<p>
In this situation, one implements a new representation of the
lists that are already available in <font face="Gill Sans,Helvetica,Arial">GAP</font>,
in particular the family of such a list is the same as the family of
the domain <i>D</i>.
<p>
But it is also possible to implement new kinds of lists that lie in
new families, and thus are not equal to lists that were available
in <font face="Gill Sans,Helvetica,Arial">GAP</font> before.
An example for this is the implementation of matrices
whose multiplication via ``<code>*</code>'' is the Lie product of matrices.
<p>
In this situation, it makes no sense to put the new matrices into the
same family as the original matrices.
Note that the product of two Lie matrices shall be defined but not the
product of an ordinary matrix and a Lie matrix.
So it is possible to have two lists that have the same entries but that
are not equal w.r.t. ``<code>=</code>'' because they lie in different families.
<p>
<p>
<h2><a name="SECT012">3.12 Example -- Constructing Enumerators</a></h2>
<p><p>
When dealing with countable sets, a usual task is to define enumerations,
i.e., bijections to the positive integers.
In <font face="Gill Sans,Helvetica,Arial">GAP</font>, this can be implemented via <strong>enumerators</strong>
(see&nbsp;<a href="../ref/CHAP021.htm#SECT023">Enumerators</a> in the <font face="Gill Sans,Helvetica,Arial">GAP</font> Reference Manual).
These are lists containing the elements in a specified ordering,
and the operations <code>Position</code> and list access via <code>\[\]</code> define the
desired bijection.
For implementing such an enumerator, one mainly needs to install the
appropriate functions for these operations.
<p>
A general setup for creating such lists is given by <code>EnumeratorByFunctions</code>
(see&nbsp;<a href="../ref/CHAP028.htm#SSEC002.4">EnumeratorByFunctions</a> in the <font face="Gill Sans,Helvetica,Arial">GAP</font> Reference Manual).
<p>
If the set in question is a domain <var>D</var> for which a <code>Size</code> method is
available then all one has to do is to write down the functions for
computing the <i>n</i>-th element of the list and for computing the position
of a given <font face="Gill Sans,Helvetica,Arial">GAP</font> object in the list, to put them into the components
<code>ElementNumber</code> and <code>NumberElement</code> of a record, and to call
<code>EnumeratorByFunctions</code> with the domain <var>D</var> and this record as arguments.
For example, the following lines of code install an <code>Enumerator</code> method
for the case that <var>D</var> is the domain of rational integers.
(Note that <code>IsIntegers</code> is a filter that describes exactly the domain of
rational integers.)
<p>
<pre>
InstallMethod( Enumerator,
    "for integers",
    [ IsIntegers ],
    Integers -&gt; EnumeratorByFunctions( Integers, rec(
                    ElementNumber := function( e, n ) ... end,
                    NumberElement := function( e, x ) ... end ) ) );
</pre>
<p>
The bodies of the functions have been omitted above;
here is the code that is actually used in <font face="Gill Sans,Helvetica,Arial">GAP</font>.
(The ordering coincides with that for the iterators for the domain of
rational integers that have been discussed in&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>
and&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a>.)
<p>
<pre>
gap&gt; enum:= Enumerator( Integers );
&lt;enumerator of Integers&gt;
gap&gt; Print( enum!.NumberElement, "\n" );
function ( e, x )
    local  pos;
    if not IsInt( x )  then
        return fail;
    elif 0 &lt; x  then
        pos := 2 * x;
    else
        pos := -2 * x + 1;
    fi;
    return pos;
end
gap&gt; Print( enum!.ElementNumber, "\n" );
function ( e, n )
    if n mod 2 = 0  then
        return n / 2;
    else
        return (1 - n) / 2;
    fi;
    return;
end
</pre>
<p>
The situation becomes slightly more complicated if the set <i>S</i> in question
is not a domain.
This is because one must provide also at least a method for computing the
length of the list, and because one has to determine the family in which
it lies (see&nbsp;<a href="CHAP003.htm#SECT008">Creating Objects</a>).
The latter should usually not be a problem since either <i>S</i> is nonempty and
all its elements lie in the same family --in this case one takes the
collections family of any element in <i>S</i>-- or the family of the enumerator
must be <code>ListsFamily</code>.
<p>
An example in the <font face="Gill Sans,Helvetica,Arial">GAP</font> library is an enumerator for the set of <i>k</i>-tuples
over a finite set; the function is called <code>EnumeratorOfTuples</code>.
<p>
<pre>
gap&gt; Print( EnumeratorOfTuples, "\n" );
function ( set, k )
    local  enum;
    if IsEmpty( set )  then
        return Immutable( [  ] );
    elif k = 0  then
        return Immutable( [ [  ] ] );
    fi;
    enum := EnumeratorByFunctions( CollectionsFamily( FamilyObj( set ) ), rec(
          ElementNumber := function ( enum, n )
                local  nn, t, i;
                nn := n - 1;
                t := [  ];
                for i  in [ 1 .. enum!.k ]  do
                    t[i] := RemInt( nn, Length( enum!.set ) ) + 1;
                    nn := QuoInt( nn, Length( enum!.set ) );
                od;
                if nn &lt;&gt; 0  then
                    Error( "&lt;enum&gt;[", n, "] must have an assigned value" );
                fi;
                nn := enum!.set{Reversed( t )};
                MakeImmutable( nn );
                return nn;
            end,
          NumberElement := function ( enum, elm )
                local  n, i;
                if not IsList( elm )  then
                    return fail;
                fi;
                elm := List( elm, function ( x )
                        return Position( enum!.set, x );
                    end );
                if fail in elm or Length( elm ) &lt;&gt; enum!.k  then
                    return fail;
                fi;
                n := 0;
                for i  in [ 1 .. enum!.k ]  do
                    n := Length( enum!.set ) * n + elm[i] - 1;
                od;
                return n + 1;
            end,
          Length := function ( enum )
                return Length( enum!.set ) ^ enum!.k;
            end,
          PrintObj := function ( enum )
                Print( "EnumeratorOfTuples( ", enum!.set, ", ", enum!.k, " )" 
                 );
                return;
            end,
          set := Set( set ),
          k := k ) );
    SetIsSSortedList( enum, true );
    return enum;
end
</pre>
<p>
We see that the enumerator is a homogeneous list that stores individual
functions <code>ElementNumber</code>, <code>NumberElement</code>, <code>Length</code>, and <code>PrintObj</code>;
besides that, the data components <i>S</i> and <i>k</i> are contained.
<p>
<p>
<h2><a name="SECT013">3.13 Example -- Constructing Iterators</a></h2>
<p><p>
Iterators are a kind of objects that is implemented for several collections
in the <font face="Gill Sans,Helvetica,Arial">GAP</font> library and which might be interesting also in other cases,
see&nbsp;<a href="../ref/CHAP028.htm#SECT007">Iterators</a> in the <font face="Gill Sans,Helvetica,Arial">GAP</font> Reference Manual.
A general setup for implementing new iterators is provided by
<code>IteratorByFunctions</code>.
<p>
All one has to do is to write down the functions for <code>NextIterator</code>,
<code>IsDoneIterator</code>, and <code>ShallowCopy</code>, and to call
<code>IteratorByFunctions</code> with this record as argument.
For example, the following lines of code install an <code>Iterator</code> method
for the case that the argument is the domain of rational integers.
<p>
(Note that <code>IsIntegers</code> is a filter that describes exactly the domain of
rational integers.)
<p>
<pre>
InstallMethod( Iterator,
    "for integers",
    [ IsIntegers ],
    Integers -&gt; IteratorByFunctions( rec(
                    NextIterator:= function( iter ) ... end,
                    IsDoneIterator := ReturnFalse,
                    ShallowCopy := function( iter ) ... end ) ) );
</pre>
<p>
The bodies of two of the functions have been omitted above;
here is the code that is actually used in <font face="Gill Sans,Helvetica,Arial">GAP</font>.
(The ordering coincides with that for the iterators for the domain of
rational integers that have been discussed in&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>
and&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a>.)
<p>
<pre>
gap&gt; iter:= Iterator( Integers );
&lt;iterator&gt;
gap&gt; Print( iter!.NextIterator, "\n" );
function ( iter )
    iter!.counter := iter!.counter + 1;
    if iter!.counter mod 2 = 0  then
        return iter!.counter / 2;
    else
        return (1 - iter!.counter) / 2;
    fi;
    return;
end
gap&gt; Print( iter!.ShallowCopy, "\n" );   
function ( iter )
    return rec(
        counter := iter!.counter );
end
</pre>
<p>
Note that the <code>ShallowCopy</code> component of the record must be a function
that does not return an iterator but a record that can be used as the
argument of <code>IteratorByFunctions</code> in order to create the desired
shallow copy.
<p>
<p>
<h2><a name="SECT014">3.14 Arithmetic Issues in the Implementation of New Kinds of Lists</a></h2>
<p><p>
When designing a new kind of list objects in <font face="Gill Sans,Helvetica,Arial">GAP</font>,
defining the arithmetic behaviour of these objects is an issue.
<p>
There are situations where arithmetic operations of list objects
are unimportant in the sense that adding two such lists need not be
represented in a special way.
In such cases it might be useful either to support no arithmetics at all
for the new lists, or to enable the default arithmetic methods.
The former can be achieved by not setting the filters
<code>IsGeneralizedRowVector</code> and <code>IsMultiplicativeGeneralizedRowVector</code>
in the types of the lists,
the latter can be achieved by setting the filter <code>IsListDefault</code>.
(for details, see&nbsp;<a href="../ref/CHAP021.htm#SECT012">Filters Controlling the Arithmetic Behaviour of Lists</a>
in the <font face="Gill Sans,Helvetica,Arial">GAP</font> Reference Manual).
An example for ``wrapped lists'' with default behaviour are vector space
bases;
they are lists with additional properties concerning the computation of
coefficients, but arithmetic properties are not important.
So it is no loss to enable the default methods for these lists.
<p>
However, often the arithmetic behaviour of new list objects is important,
and one wants to keep these lists away from default methods for addition,
multiplication etc.
For example, the sum and the product of (compatible) block matrices shall
be represented as a block matrix, so the default methods for sum and
product of matrices shall not be applicable,
although the results will be equal to those of the default methods
in the sense that their entries at corresponding positions are equal.
<p>
So one does not set the filter <code>IsListDefault</code> in such cases,
and thus one can implement one's own methods for arithmetic operations.
(Of course ``can'' means on the other hand that one <strong>must</strong> implement such
methods if one is interested in arithmetics of the new lists.)
<p>
The specific binary arithmetic methods for the new lists will usually cover
the case that both arguments are of the new kind,
and perhaps also the interaction between a list of the new kind and certain
other kinds of lists may be handled if this appears to be useful.
<p>
For the last situation, interaction between a new kind of lists and other
kinds of lists, <font face="Gill Sans,Helvetica,Arial">GAP</font> provides already a setup.
Namely, there are the categories <code>IsGeneralizedRowVector</code> and
<code>IsMultiplicativeGeneralizedRowVector</code>, which are concerned with the
additive and the multiplicative behaviour, respectively, of lists. 
For lists in these filters, the structure of the results of arithmetic
operations is prescribed (see&nbsp;<a href="../ref/CHAP021.htm#SECT013">Additive Arithmetic for Lists</a> and
<a href="../ref/CHAP021.htm#SECT014">Multiplicative Arithmetic for Lists</a> in the <font face="Gill Sans,Helvetica,Arial">GAP</font> Reference Manual).
<p>
For example,
if one implements block matrices in <code>IsMultiplicativeGeneralizedRowVector</code>
then automatically the product of such a block matrix and a (plain) list
of such block matrices will be defined as the obvious list of matrix
products, and a default method for plain lists will handle this
multiplication.
(Note that this method will rely on a method for computing the product of
the block matrices, and of course no default method is available for that.)
Conversely, if the block matrices are not in
<code>IsMultiplicativeGeneralizedRowVector</code> then the product of a block matrix
and a (plain) list of block matrices is not defined.
(There is no default method for it, and one can define the result and
provide a method for computing it.)
<p>
Thus if one decides to set the filters <code>IsGeneralizedRowVector</code> and
<code>IsMultiplicativeGeneralizedRowVector</code> for the new lists,
on the one hand one loses freedom in defining arithmetic behaviour,
but on the other hand one gains several default methods for a more
or less natural behaviour.
<p>
If a list in the filter <code>IsGeneralizedRowVector</code>
(<code>IsMultiplicativeGeneralizedRowVector</code>) lies in <code>IsAttributeStoringRep</code>,
the values of additive (multiplicative) nesting depth is stored in
the list and need not be calculated for each arithmetic operation.
One can then store the value(s) already upon creation of the lists,
with the effect that the default arithmetic operations will access
elements of these lists only if this is unavoidable.
For example, the sum of two plain lists of ``wrapped matrices'' with
stored nesting depths are computed via the method for adding two such
wrapped lists, and without accessing any of their rows
(which might be expensive).
In this sense, the wrapped lists are treated as black boxes.
<p>
<p>
<h2><a name="SECT015">3.15 External Representation</a></h2>
<p><p>
An operation is defined for elements rather than for objects in the sense
that if the arguments are replaced by objects that are equal to the old
arguments w.r.t. the equivalence relation ``<code>=</code>'' then the result must be
equal to the old result w.r.t.&nbsp;``<code>=</code>''.
<p>
But the implementation of many methods is representation dependent in the
sense that certain representation dependent subobjects are accessed.
<p>
For example, a method that implements the addition of univariate
polynomials may access coefficients lists of its arguments
only if they are really stored,
while in the case of sparsely represented polynomials a different approach
is needed.
<p>
In spite of this, for many operations one does not want to write an own
method for each possible representations of each argument,
for example because none of the methods could in fact take advantage
of the actually given representations of the objects.
Another reason could be that one wants to install first a representation
independent method, and then add specific methods as they are needed to
gain more efficiency, by really exploiting the fact that the arguments
have certain representations.
<p>
For the purpose of admitting representation independent code,
one can define an <strong>external representation</strong> of objects in a given family,
install methods to compute this external representation for each
representation of the objects,
and then use this external representation of the objects whenever they
occur.
<p>
We cannot provide conversion functions that allow us to first convert
any object in question to one particular ``standard representation'',
and then access the data in the way defined for this representation,
simply because it may be impossible to choose such a ``standard
representation'' uniformly for all objects in the given family.
<p>
So the aim of an external representation of an object <var>obj</var> is a
different one, namely to describe the data from which <var>obj</var> is composed.
In particular, the external representation of <var>obj</var> is <strong>not</strong> one possible
(``standard'') representation of <var>obj</var>,
in fact the external representation of <var>obj</var> is in general different
from <var>obj</var> w.r.t.&nbsp;``<code>=</code>'',
first  of all because the external representation of <var>obj</var> does in general
not lie in the same family as <var>obj</var>.
<p>
For example the external representation of a rational function is a list
of length two or three, the first entry being the zero coefficient,
the second being a list describing the coefficients and monomials of the
numerator, and the third, if bound, being a list describing the coefficients
and monomials of the denominator.
In particular, the external representation of a polynomial is a list
and not a polynomial.
<p>
The other way round, the external representation of <var>obj</var> encodes <var>obj</var>
in such a way that from this data and the family of <var>obj</var>,
one can create an object that is equal to <var>obj</var>.
Usually the external representation of an object is a list or a record.
<p>
Although the external representation of <var>obj</var> is by definition independent
of the actually available representations for <var>obj</var>,
it is usual that a representation of <var>obj</var> exists for which the
computation of the external representation is obtained by just
``unpacking'' <var>obj</var>,
in the sense that the desired data is stored in a component or a position
of <var>obj</var>, if <var>obj</var> is a component object (see&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>)
or a positional object (see&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a>).
<p>
To implement an external representation means to install methods for the
following two operations.
<p>
<a name = "SSEC015.1"></a>
<li><code>ExtRepOfObj( </code><var>obj</var><code> )</code>
<a name = "SSEC015.1"></a>
<li><code>ObjByExtRep( </code><var>fam</var><code>, </code><var>data</var><code> )</code>
<p>
<code>ExtRepOfObj</code> returns the external representation of its argument,
and <code>ObjByExtRep</code> returns an object in the family <var>fam</var> that has
external representation <var>data</var>.
<p>
Of course, <code>ObjByExtRep( FamilyObj( </code><var>obj</var><code> ), ExtRepOfObj( </code><var>obj</var><code> ) )</code>
must be equal to <var>obj</var>.
But it is <strong>not</strong> required that equal objects have equal external
representations.
<p>
Note that if one defines a new representation of objects for which an
external representation does already exist
then one <strong>must</strong> install a method to compute this external representation
for the objects in the new representation.
<p>
<p>
<h2><a name="SECT016">3.16 Mutability and Copying</a></h2>
<p><p>
Any <font face="Gill Sans,Helvetica,Arial">GAP</font> Object is either mutable or immutable. This can be tested
with the Operation <code>IsMutable</code>. The intended meaning of (im)mutability
is a mathematical one:  an immutable Object should never change in
such a way that it represents a different Element. Objects <strong>may</strong>
change in other ways, for instance to store more information, or
represent an element in a different way.
<p>
Immutability is enforced in different ways for built-in objects (like
records, or lists) and for external objects (made using <code>Objectify</code>).
<p>
For built-in objects which are immutable, the kernel will prevent
you from changing them. Thus
<p>
<pre>
gap&gt; l := [1,2,4];
[ 1, 2, 4 ]
gap&gt; MakeImmutable(l);
gap&gt; l[3] := 5;
Lists Assignment: &lt;list&gt; must be a mutable list
</pre>
<p>
For external Objects, the situation is different. An external Object which
claims to be immutable (i.e. its Type does not contain <code>IsMutable</code>)
should not admit any Methods which change the Element it represents.
The kernel does <strong>not</strong> prevent the use of <code>!.</code> and <code>![</code> to change the
underlying data structure.
This is used for instance by the code that stores Attribute values for reuse.
In general, these <code>!</code> operations should only be used in Methods
which depend on the Representation of the Object. Furthermore, we would <strong>not</strong>
recommend users to install Methods which depend on the Representations of
Objects created by the library or by <font face="Gill Sans,Helvetica,Arial">GAP</font> packages, as there is certainly no
guarantee of the representations being the same in future versions of <font face="Gill Sans,Helvetica,Arial">GAP</font>.
<p>
Here we see an immutable Object (the group <i>S</i><sub>4</sub>), in which we improperly
install a new component.
<p>
<pre>
gap&gt; g := SymmetricGroup(IsPermGroup,4);
Sym( [ 1 .. 4 ] )
gap&gt; IsMutable(g);
false
gap&gt; NamesOfComponents(g);
[ "GeneratorsOfMagmaWithInverses", "Size", "MovedPoints", "NrMovedPoints" ]
gap&gt; g!.silly := "rubbish";
"rubbish"
gap&gt; NamesOfComponents(g);
[ "GeneratorsOfMagmaWithInverses", "Size", "MovedPoints", "NrMovedPoints", 
  "silly" ]
gap&gt; g!.silly;
"rubbish"
</pre>
<p>
On the other hand, if we form an immutable externally represented list, we
find that <font face="Gill Sans,Helvetica,Arial">GAP</font> will not let us change the object.
<p>
<pre>
gap&gt; e := Enumerator(g);
&lt;enumerator of perm group&gt;
gap&gt; IsMutable(e);
false
gap&gt; IsList(e);
true
gap&gt; e[3];
(1,2,4)
gap&gt; e[3] := false;
Error, The list you are trying to assign to is immutable
</pre>
<p>
When we consider copying Objects, another filter <code>IsCopyable</code>, enters
the game and we find that <code>ShallowCopy</code> and <code>StructuralCopy</code> behave quite
differently. Objects can be divided for this purpose into three:
mutable Objects, immutable but copyable Objects, and non-copyable
objects (called constants).
<p>
A mutable or copyable  Object should have a Method for the Operation
<code>ShallowCopy</code>, which should make a new mutable Object, sharing its top-level
subobjects with the original. The exact definition of top-level subobject may
be defined by the implementor for new kinds of Object.
<p>
<code>ShallowCopy</code> applied to a constant simply returns the constant.
<p>
<code>StructuralCopy</code> is expected to be much less used than
<code>ShallowCopy</code>. Applied to a mutable object, it returns a new mutable
object which shares no mutable sub-objects with the input. Applied to
an immutable Object (even a copyable one), it just returns the
object. It is not an Operation (indeed, it's a rather special kernel
function).
<p>
<pre>
gap&gt; e1 := StructuralCopy(e);
&lt;enumerator of perm group&gt;
gap&gt; IsMutable(e1);
false
gap&gt; e2 := ShallowCopy(e);
[ (), (1,4), (1,2,4), (1,3,4), (2,4), (1,4,2), (1,2), (1,3,4,2), (2,3,4), 
  (1,4,2,3), (1,2,3), (1,3)(2,4), (3,4), (1,4,3), (1,2,4,3), (1,3), (2,4,3), 
  (1,4,3,2), (1,2)(3,4), (1,3,2), (2,3), (1,4)(2,3), (1,2,3,4), (1,3,2,4) ]
gap&gt; 
</pre>
<p>
There are two other related functions: <code>Immutable</code>, which makes a new
immutable object which shares no mutable subobjects with its input and
<code>MakeImmutable</code> which changes an object and its mutable subobjects <strong>in
place</strong> to be immutable. It should only be used on ``new'' Objects that
you have just created, and which cannot share mutable subobjects with
anything else.
<p>
Both <code>Immutable</code> and <code>MakeImmutable</code> work on external objects by just
resetting the <code>IsMutable</code> filter in the Object's type. This should make
ineligible any methods that might change the Object. As a consequence,
you must allow for the possibility of immutable versions of any
objects you create.
<p>
So, if you are implementing your own external Objects. The rules amount to the
following:
<p>
<ol>
<p>
<li>
You decide if your Objects should be mutable or copyable or constants, by
fixing whether their Type includes <code>IsMutable</code> or <code>IsCopyable</code>.
<p>
<li>
You install Methods for your objects respecting that decision:
<p>
<ul>
<li>
for constants -- no methods change the underlying elements;
<p>
<li>
for copyables -- you provide a method for <code>ShallowCopy</code>;
<p>
<li>
for mutables  -- you may have methods that change the underlying elements
and these should explicitly require <code>IsMutable</code>.
<p>
</ol></ol>
<p>
<p>
<h2><a name="SECT017">3.17 Global Variables in the Library</a></h2>
<p><p>
Global variables in the <font face="Gill Sans,Helvetica,Arial">GAP</font> library are usually read-only in order to
avoid their being overwritten accidentally.
<p>
<a name = "SSEC017.1"></a>
<li><code>BindGlobal( </code><var>name</var><code>, </code><var>val</var><code> ) F</code>
<p>
sets the global variable named by the string <var>name</var> to the value <var>val</var>,
and makes it read-only.
An error is given if the global variable corresponding to <var>name</var>
already had a value bound.
<p>
<a name = "SSEC017.2"></a>
<li><code>DeclareAttribute( </code><var>name</var><code>, </code><var>filt</var><code>[, "mutable"][, </code><var>rank</var><code>] ) F</code>
<a name = "SSEC017.2"></a>
<li><code>DeclareCategory( </code><var>name</var><code>, </code><var>super</var><code> ) F</code>
<a name = "SSEC017.2"></a>
<li><code>DeclareFilter( </code><var>name</var><code>, </code><var>rank</var><code> ) F</code>
<a name = "SSEC017.2"></a>
<li><code>DeclareProperty( </code><var>name</var><code>, </code><var>filt</var><code>[, </code><var>rank</var><code>] ) F</code>
<a name = "SSEC017.2"></a>
<li><code>DeclareRepresentation( </code><var>name</var><code>, </code><var>super</var><code>, </code><var>slots</var><code> ) F</code>
<p>
The different types of filters (see Sections&nbsp;<a href="CHAP003.htm#SECT001">Creating Categories</a>,
<a href="CHAP003.htm#SECT002">Creating Representations</a>, <a href="CHAP003.htm#SECT003">Creating Attributes and Properties</a>,
<a href="CHAP003.htm#SECT004">Creating Other Filters</a>) that are used in the <font face="Gill Sans,Helvetica,Arial">GAP</font> library are
assigned by the above <code>Declare</code><var>Something</var><code></code> functions which make the
variable with name <var>name</var> (a string) automatically read-only.
The only other difference between <code>New</code><var>Something</var><code></code> and
<code>Declare</code><var>Something</var><code></code> is that <code>DeclareAttribute</code> and <code>DeclareProperty</code>
also bind read-only global variables with names <code>Has</code><var>name</var><code></code> and <code>Set</code><var>name</var><code></code>
for the tester and setter of the attribute
(see Section&nbsp;<a href="../ref/CHAP013.htm#SECT006">Setter and Tester for Attributes</a> in the Reference Manual).
For the meaning of the other arguments of <code>Declare</code><var>Something</var><code></code>,
see&nbsp;<a href="CHAP003.htm#SSEC003.1">NewAttribute</a>, <a href="CHAP003.htm#SSEC001.1">NewCategory</a>, <a href="CHAP003.htm#SSEC004.1">NewFilter</a>, <a href="CHAP003.htm#SSEC003.3">NewProperty</a>, and
<a href="CHAP003.htm#SSEC002.1">NewRepresentation</a>.
<p>
<a name = "SSEC017.3"></a>
<li><code>DeclareOperation( </code><var>name</var><code>, </code><var>args-filts</var><code> ) F</code>
<a name = "SSEC017.3"></a>
<li><code>DeclareGlobalFunction( </code><var>name</var><code> ) F</code>
<p>
declare operations and other global functions used in the <font face="Gill Sans,Helvetica,Arial">GAP</font> library,
respectively,
are assigned to the read-only variable with name <var>name</var> (a string).
For the meaning of the other arguments of <code>DeclareOperation</code>,
see&nbsp;<a href="CHAP003.htm#SSEC005.1">NewOperation</a>.
<p>
<font face="Gill Sans,Helvetica,Arial">GAP</font> functions that are not operations and that are intended to be
called by users should be notified to <font face="Gill Sans,Helvetica,Arial">GAP</font> in the declaration part
of the respective package
(see Section&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>)
via <code>DeclareGlobalFunction</code>, which returns a function that serves as a
place holder for the function that will be installed later,
and that will print an error message if it is called.
See also&nbsp;<a href="CHAP003.htm#SSEC017.7">DeclareSynonym</a>.
<p>
<a name = "SSEC017.4"></a>
<li><code>InstallGlobalFunction( </code><var>gvar</var><code>, </code><var>func</var><code> ) F</code>
<p>
A global function declared with <code>DeclareGlobalFunction</code> can be given its
value <var>func</var> via <code>InstallGlobalFunction</code>; 
<var>gvar</var> is the global variable (<strong>not</strong> a string) named with the 
<var>name</var> argument of the call to <code>DeclareGlobalFunction</code>. For example,
a declaration like
<p>
<pre>
DeclareGlobalFunction( "SumOfTwoCubes" );
</pre>
<p>
in the ``declaration part'' (see Section&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>) might have a corresponding ``implementation part'' of:
<p>
<pre>
InstallGlobalFunction( SumOfTwoCubes, function(x, y) return x^3 + y^3; end);
</pre>
<p>
<strong>Note:</strong> <var>func</var> must be a function which has <strong>not</strong> been declared as a
<code>GlobalFunction</code> itself. Otherwise completion files
(see&nbsp;<a href="../ref/CHAP003.htm#SECT005">Completion Files</a> in the reference manual) get confused!
<p>
<a name = "SSEC017.5"></a>
<li><code>DeclareGlobalVariable( </code><var>name</var><code>[, </code><var>description</var><code>] ) F</code>
<p>
For global variables that are <strong>not</strong> functions,
instead of using <code>BindGlobal</code> one can also declare the variable with
<code>DeclareGlobalVariable</code> 
which creates a new global variable named by the string <var>name</var>.
If the second argument <var>description</var> is entered then this must be
a string that describes the meaning of the global variable.
<code>DeclareGlobalVariable</code> shall be used in the declaration part of the
respective package (see&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>),
values can then be assigned to the new variable with <code>InstallValue</code> or
<code>InstallFlushableValue</code>, in the implementation part
(again, see&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>).
<p>
<a name = "SSEC017.6"></a>
<li><code>InstallValue( </code><var>gvar</var><code>, </code><var>value</var><code> ) F</code>
<a name = "SSEC017.6"></a>
<li><code>InstallFlushableValue( </code><var>gvar</var><code>, </code><var>value</var><code> ) F</code>
<p>
<code>InstallValue</code> assigns the value <var>value</var> to the global variable <var>gvar</var>.
<code>InstallFlushableValue</code> does the same but additionally provides that
each call of <code>FlushCaches</code> (see&nbsp;<a href="CHAP003.htm#SSEC017.9">FlushCaches</a>)
will assign a structural copy of <var>value</var> to <var>gvar</var>.
<p>
<code>InstallValue</code> does <strong>not</strong> work if <var>value</var> is an ``immediate object''
(i.e., an internally represented small integer or finite field element).
Furthermore, <code>InstallFlushableValue</code> works only if <var>value</var> is a list.
(Note that <code>InstallFlushableValue</code> makes sense only for <strong>mutable</strong>
global variables.)
<p>
<a name = "SSEC017.7"></a>
<li><code>DeclareSynonym( </code><var>name</var><code>, </code><var>value</var><code> ) F</code>
<p>
assigns the string <var>name</var> to a global variable as a synonym for <var>value</var>.
Two typical intended usages are to declare an ``and-filter'', e.g.
<p>
<pre>
DeclareSynonym( "IsGroup", IsMagmaWithInverses and IsAssociative );
</pre>
<p>
and (mainly for compatibility reasons) to provide a previously declared
global function with an alternative name, e.g.
<p>
<pre>
DeclareGlobalFunction( "SizeOfSomething" );
DeclareSynonym( "OrderOfSomething", SizeOfSomething );
</pre>
<p>
<strong>Note:</strong> Before using <code>DeclareSynonym</code> in the way of this second example,
one should determine whether the synonym is really needed. Perhaps an
extra index entry in the documentation would be sufficient. 
<p>
When declaring a synonym that is to be an attribute <code>DeclareSynonymAttr</code>
should be used.
<p>
<a name = "SSEC017.8"></a>
<li><code>DeclareSynonymAttr( </code><var>name</var><code>, </code><var>value</var><code> ) F</code>
<p>
assigns the string <var>name</var> to an attribute global variable as a synonym for
<var>value</var>.  Two typical intended usages are to provide a previously declared
attribute or property with an alternative name, e.g.
<p>
<pre>
DeclareAttribute( "GeneratorsOfDivisionRing", IsDivisionRing );
DeclareSynonymAttr( "GeneratorsOfField", GeneratorsOfDivisionRing );
</pre>
<p>
and to declare an attribute that is an ``and-filter'', e.g.
<p>
<pre>
DeclareSynonymAttr( "IsField", IsDivisionRing and IsCommutative );
</pre>
<p>
Also see&nbsp;<a href="CHAP003.htm#SSEC017.7">DeclareSynonym</a>. (The comments made there also pertain to
<code>DeclareSynonymAttr</code>.)
<p>
<a name = "SSEC017.9"></a>
<li><code>FlushCaches() O</code>
<p>
<code>FlushCaches</code> resets the value of each global variable that has
been declared with <code>DeclareGlobalVariable</code> and for which the initial
value has been set with <code>InstallFlushableValue</code> to this initial value.
<p>
<code>FlushCaches</code> should be used only for debugging purposes,
since the involved global variables include for example lists that store
finite fields and cyclotomic fields used in the current <font face="Gill Sans,Helvetica,Arial">GAP</font> session,
in order to avoid that these fields are constructed anew in each call
to <code>GF</code> and <code>CF</code> (see&nbsp;<a href="../ref/CHAP057.htm#SSEC003.1">GaloisField</a> and&nbsp;<a href="../ref/CHAP058.htm#SSEC001.1">CyclotomicField</a>
in the Reference Manual).
<p>
<p>
<h2><a name="SECT018">3.18 Declaration and Implementation Part</a></h2>
<p><p>
Each package of <font face="Gill Sans,Helvetica,Arial">GAP</font> code consists of two parts,
the <strong>declaration part</strong> that defines the new categories and operations for
the objects the package deals with,
and the <strong>implementation part</strong> where the corresponding methods are
installed.
The declaration part should be representation independent,
representation dependent information should be dealt with in the
implementation part.
<p>
<font face="Gill Sans,Helvetica,Arial">GAP</font> functions that are not operations and that are intended to be
called by users should be notified to <font face="Gill Sans,Helvetica,Arial">GAP</font> in the declaration part via
<code>DeclareGlobalFunction</code>.
Values for these functions can be installed in the implementation part
via <code>InstallGlobalFunction</code>.
<p>
Calls to the following functions belong to the declaration part.
<p>
<code>DeclareAttribute</code>,
<code>DeclareCategory</code>,
<code>DeclareFilter</code>,
<code>DeclareOperation</code>,
<code>DeclareGlobalFunction</code>,
<code>DeclareSynonym</code>,
<code>DeclareSynonymAttr</code>,
<code>DeclareProperty</code>,
<code>InstallTrueMethod</code>.
<p>
See&nbsp;<a href="CHAP003.htm#SSEC017.2">DeclareAttribute</a>,
<a href="CHAP003.htm#SSEC017.2">DeclareCategory</a>,
<a href="CHAP003.htm#SSEC017.2">DeclareFilter</a>,
<a href="CHAP003.htm#SSEC017.3">DeclareOperation</a>,
<a href="CHAP003.htm#SSEC017.3">DeclareGlobalFunction</a>,
<a href="CHAP003.htm#SSEC017.7">DeclareSynonym</a>,
<a href="CHAP003.htm#SSEC017.8">DeclareSynonymAttr</a>,
<a href="CHAP003.htm#SSEC017.2">DeclareProperty</a>,
<a href="CHAP002.htm#SSEC007.1">InstallTrueMethod</a>.
<p>
Calls to the following functions belong to the implementation part.
<p>
<code>DeclareRepresentation</code>,
<code>InstallGlobalFunction</code>,
<code>InstallMethod</code>,
<code>InstallImmediateMethod</code>,
<code>InstallOtherMethod</code>,
<code>NewFamily</code>,
<code>NewType</code>,
<code>Objectify</code>.
<p>
See&nbsp;<a href="CHAP003.htm#SSEC017.2">DeclareRepresentation</a>,
<a href="CHAP003.htm#SSEC017.4">InstallGlobalFunction</a>,
<a href="CHAP002.htm#SSEC002.1">InstallMethod</a>,
<a href="CHAP002.htm#SSEC006.1">InstallImmediateMethod</a>,
<a href="CHAP002.htm#SSEC002.2">InstallOtherMethod</a>,
<a href="CHAP003.htm#SSEC006.1">NewFamily</a>,
<a href="CHAP003.htm#SSEC007.1">NewType</a>,
<a href="CHAP003.htm#SSEC008.1">Objectify</a>.
<p>
<a name = "I0"></a>

Whenever both a <code>New</code><var>Something</var><code></code> and a <code>Declare</code><var>Something</var><code></code> variant
of a function exist (see&nbsp;<a href="CHAP003.htm#SECT017">Global Variables in the Library</a>),
the use of <code>Declare</code><var>Something</var><code></code> is recommended
because this protects the variables in question from being overwritten.
Note that there are <strong>no</strong> functions <code>DeclareFamily</code> and <code>DeclareType</code>
since families and types are created dynamically,
hence usually no global variables are associated to them.
Further note that <code>DeclareRepresentation</code> is regarded as belonging to the
implementation part,
because usually representations of objects are accessed only in very
few places, and all code that involves a particular representation
is contained in one file;
additionally, representations of objects are often not interesting
for the user, so there is no need to provide a user interface
or documentation about representations.
<p>
It should be emphasized that ``declaration'' means only an explicit
notification of mathematical or technical terms or of concepts to <font face="Gill Sans,Helvetica,Arial">GAP</font>.
For example, declaring a category or property with name <code>IsInteresting</code>
does of course not tell <font face="Gill Sans,Helvetica,Arial">GAP</font> what this shall mean,
and it is necessary to implement possibilities to create objects that
know already that they lie in <code>IsInteresting</code> in the case that it is a
category, or to install implications or methods in order to
compute for a given object whether <code>IsInteresting</code> is <code>true</code> or <code>false</code>
for it in the case that <code>IsInteresting</code> is a property.
<p>
<p>
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP002.htm">Previous</a>] [<a href ="CHAP004.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<font face="Gill Sans,Helvetica,Arial">GAP 4 manual<br>March 2006
</font></body></html>