<html><head><title>[prg] 5 An Example -- Residue Class Rings</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP004.htm">Previous</a>] [<a href ="CHAP006.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>5 An Example -- Residue Class Rings</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>
<li> <A HREF="CHAP005.htm#SECT002">Why Proceed in a Different Way?</a>
<li> <A HREF="CHAP005.htm#SECT003">A Second Attempt to Implement Elements of Residue Class Rings</a>
<li> <A HREF="CHAP005.htm#SECT004">Compatibility of Residue Class Rings with Prime Fields</a>
<li> <A HREF="CHAP005.htm#SECT005">Further Improvements in Implementing Residue Class Rings</a>
</ol><p>
<p>
In this chapter, we give an example how <font face="Gill Sans,Helvetica,Arial">GAP</font> can be extended
by new data structures and new functionality.
In order to focus on the issues of the implementation,
the mathematics in the example chosen is trivial.
Namely, we will discuss computations with elements of residue class rings
<b>Z</b>/<i>n</i><b>Z</b>.
<p>
The first attempt is straightforward (see Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>),
it deals with the implementation of the necessary arithmetic operations.
Section&nbsp;<a href="CHAP005.htm#SECT002">Why Proceed in a Different Way?</a> deals with the question
why it might be useful to use an approach that involves creating a new
data structure and integrating the algorithms dealing with these new
<font face="Gill Sans,Helvetica,Arial">GAP</font> objects into the system.
Section&nbsp;<a href="CHAP005.htm#SECT003">A Second Attempt to Implement Elements of Residue Class Rings</a>
shows how this can be done in our example,
and Section&nbsp;<a href="CHAP005.htm#SECT004">Compatibility of Residue Class Rings with Prime Fields</a>,
the question of further compatibility of the new objects with known
<font face="Gill Sans,Helvetica,Arial">GAP</font> objects is discussed.
Finally, Section&nbsp;<a href="CHAP005.htm#SECT005">Further Improvements in Implementing Residue Class Rings</a>
gives some hints how to improve the implementation presented before.
<p>
<p>
<h2><a name="SECT001">5.1 A First Attempt to Implement Elements of Residue Class Rings</a></h2>
<p><p>
Suppose we want to do computations with elements of a ring <b>Z</b>/<i>n</i><b>Z</b>,
where <i>n</i> is a positive integer.
<p>
First we have to decide how to represent the element <i>k</i> + <i>n</i><b>Z</b> in <font face="Gill Sans,Helvetica,Arial">GAP</font>.
If the modulus <i>n</i> is fixed then we can use the integer <i>k</i>.
More precisely, we can use any integer <i>k</i><sup>&#8242;</sup>
such that <i>k</i> &#8722; <i>k</i><sup>&#8242;</sup> is a multiple of <i>n</i>.
If different moduli are likely to occur then using a list of the form
[ <i>k</i>, <i>n</i> ], or a record of the form <code>rec( residue := </code><var>k</var><code>, modulus := </code><var>n</var><code> )</code>
is more appropriate.
In the following, let us assume the list representation [ <i>k</i>, <i>n</i> ] is
chosen.
Moreover, we decide that the residue <i>k</i> in all such lists satisfies
0  &#8804; <i>k</i>  &lt;  <i>n</i>,
i.e., the result of adding two residue classes represented by
[ <i>k</i><sub>1</sub>, <i>n</i> ] and [ <i>k</i><sub>2</sub>, <i>n</i> ] (of course with same modulus <i>n</i>)
will be [ <i>k</i>, <i>n</i> ] with <i>k</i><sub>1</sub> + <i>k</i><sub>2</sub> congruent to <i>k</i> modulo <i>n</i>
and 0  &#8804; <i>k</i>  &lt;  <i>n</i>.
<p>
Now we can implement the arithmetic operations for residue classes.
Note that the result of the <code>mod</code> operator is normalized as required.
The division by a noninvertible residue class results in <code>fail</code>.
<pre>
gap&gt; resclass_sum := function( c1, c2 )
&gt;    if c1[2] &lt;&gt; c2[2] then Error( "different moduli" ); fi;
&gt;    return [ ( c1[1] + c2[1] ) mod c1[2], c1[2] ];
&gt; end;;
gap&gt; 
gap&gt; resclass_diff := function( c1, c2 )
&gt;    if c1[2] &lt;&gt; c2[2] then Error( "different moduli" ); fi;
&gt;    return [ ( c1[1] - c2[1] ) mod c1[2], c1[2] ];
&gt; end;;
gap&gt; 
gap&gt; resclass_prod := function( c1, c2 )
&gt;    if c1[2] &lt;&gt; c2[2] then Error( "different moduli" ); fi;
&gt;    return [ ( c1[1] * c2[1] ) mod c1[2], c1[2] ];
&gt; end;;
gap&gt; 
gap&gt; resclass_quo := function( c1, c2 )
&gt;    local quo;
&gt;    if c1[2] &lt;&gt; c2[2] then Error( "different moduli" ); fi;
&gt;    quo:= QuotientMod( c1[1], c2[1], c1[2] );
&gt;    if quo &lt;&gt; fail then
&gt;      quo:= [ quo, c1[2] ];
&gt;    fi;
&gt;    return quo;
&gt; end;;
</pre>
With these functions, we can in principle compute with residue classes.
<pre>
gap&gt; list:= List( [ 0 .. 3 ], k -&gt; [ k, 4 ] );
[ [ 0, 4 ], [ 1, 4 ], [ 2, 4 ], [ 3, 4 ] ]
gap&gt; resclass_sum( list[2], list[4] );
[ 0, 4 ]
gap&gt; resclass_diff( list[1], list[2] );
[ 3, 4 ]
gap&gt; resclass_prod( list[2], list[4] );
[ 3, 4 ]
gap&gt; resclass_prod( list[3], list[4] );
[ 2, 4 ]
gap&gt; List( list, x -&gt; resclass_quo( list[2], x ) );
[ fail, [ 1, 4 ], fail, [ 3, 4 ] ]
</pre>
<p>
<p>
<h2><a name="SECT002">5.2 Why Proceed in a Different Way?</a></h2>
<p><p>
It depends on the computations we intended to do with residue classes
whether or not the implementation described in the previous section
is satisfactory for us.
<p>
Probably we are mainly interested in more complex data structures than
the residue classes themselves, for example in matrix algebras or matrix
groups over a ring such as <b>Z</b>/4<b>Z</b>.
For this, we need functions to add, multiply, invert etc.&nbsp;matrices of
residue classes.
Of course this is not a difficult task, but it requires to write
additional <font face="Gill Sans,Helvetica,Arial">GAP</font> code.
<p>
And when we have implemented the arithmetic operations for matrices of
residue classes, we might be interested in domain operations such as
computing the order of a matrix group over <b>Z</b>/4<b>Z</b>,
a Sylow 2 subgroup, and so on.
The problem is that a residue class represented as a pair [ <i>k</i>, <i>n</i> ]
is not regarded as a group element by <font face="Gill Sans,Helvetica,Arial">GAP</font>.
We have not yet discussed how a matrix of residue classes shall be
represented, but if we choose the obvious representation of a list of
lists of our residue classes then also this is not a valid group element
in <font face="Gill Sans,Helvetica,Arial">GAP</font>.
Hence we cannot apply the function <code>Group</code> to create a group of residue
classes or a group of matrices of residue classes.
This is because <font face="Gill Sans,Helvetica,Arial">GAP</font> assumes that group elements can be multiplied via
the infix operator <code>*</code> (equivalently, via the operation <code>\*</code>).
Note that in fact the multiplication of two lists <code>[ k_1, n ]</code>,
<code>[ k_2, n ]</code> is defined, but we have
<code>[ k_1, n ] * [ k_2, n ] = k_1 * k_2 + n * n</code>, the standard scalar
product of two row vectors of same length.
That is, the multiplication with <code>*</code> is not compatible with the function
<code>reclass_prod</code> introduced in the previous section.
Similarly, ring elements are assumed to be added via the infix operator
<code>+</code>; the addition of residue classes is not compatible with the available
addition of row vectors.
<p>
What we have done in the previous section can be described as
implementation of a ``standalone'' arithmetic for residue classes.
In order to use the machinery of the <font face="Gill Sans,Helvetica,Arial">GAP</font> library for creating higher
level objects such as matrices, polynomials, or domains over residue
class rings,
we have to ``integrate'' this implementation into the <font face="Gill Sans,Helvetica,Arial">GAP</font> library.
The key step will be to create a new kind of <font face="Gill Sans,Helvetica,Arial">GAP</font> objects.
This will be done in the following sections;
there we assume that residue classes and residue class rings are not
yet available in <font face="Gill Sans,Helvetica,Arial">GAP</font>;
in fact they are available, and their implementation is very close to
what is described here.
<p>
<p>
<h2><a name="SECT003">5.3 A Second Attempt to Implement Elements of Residue Class Rings</a></h2>
<p><p>
Faced with the problem to implement elements of the rings <b>Z</b>/<i>n</i><b>Z</b>,
we must define the <strong>types</strong> of these elements as far as is necessary to
distinguish them from other <font face="Gill Sans,Helvetica,Arial">GAP</font> objects.
<p>
As is described in Chapter&nbsp;<a href="../ref/CHAP013.htm">Types of Objects</a> in the Reference Manual,
the type of an object comprises several aspects of information about this
object;
the <strong>family</strong> determines the relation of the object to other objects,
the <strong>categories</strong> determine what operations the object admits,
the <strong>representation</strong> determines how an object is actually represented,
and the <strong>attributes</strong> describe knowledge about the object.
<p>
First of all, we must decide about the <strong>family</strong> of each residue class.
A natural way to do this is to put the elements of each ring <b>Z</b>/<i>n</i><b>Z</b>
into a family of their own.
This means that for example elements of <b>Z</b>/3<b>Z</b> and <b>Z</b>/9<b>Z</b> lie
in different families.
So the only interesting relation between the families of two residue
classes is equality;
binary arithmetic operations with two residue classes will be admissible
only if their families are equal.
Note that in the naive approach in Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>,
we had to take care of different moduli by a check in each function;
these checks may disappear in the new approach because of our choice
of families.
<p>
Note that we do not need to tell <font face="Gill Sans,Helvetica,Arial">GAP</font> anything about the above
decision concerning the families of the objects that we are going to
implement,
that is, the <strong>declaration part</strong> (see&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>)
of the little <font face="Gill Sans,Helvetica,Arial">GAP</font> package we are writing contains nothing about the
distribution of the new objects into families.
(The actual construction of a family happens in the function <code>MyZmodnZ</code>
shown below.)
<p>
Second, we want to describe methods to add or multiply two elements in
<b>Z</b>/<i>n</i><b>Z</b>,
and these methods shall be not applicable to other <font face="Gill Sans,Helvetica,Arial">GAP</font> objects.
The natural way to do this is to create a new <strong>category</strong> in which all
elements of all rings <b>Z</b>/<i>n</i><b>Z</b> lie.
This is done as follows.
<p>
<pre>
gap&gt; DeclareCategory( "IsMyZmodnZObj", IsScalar );
gap&gt; cat:= CategoryCollections( IsMyZmodnZObj );;
gap&gt; cat:= CategoryCollections( cat );;
gap&gt; cat:= CategoryCollections( cat );;
</pre>
<p>
So all elements in the rings <b>Z</b>/<i>n</i><b>Z</b> will lie in the category
<code>IsMyZmodnZObj</code>, which is a subcategory of <code>IsScalar</code>.
The latter means that one can add, subtract, multiply and divide
two such elements that lie in the same family,
with the obvious restriction that the second operand of a division
must be invertible.
(The name <code>IsMyZmodnZObj</code> is chosen because <code>IsZmodnZObj</code> is already
defined in <font face="Gill Sans,Helvetica,Arial">GAP</font>, for an implementation of residue classes that is
very similar to the one developed in this manual chapter.
Using this different name, one can simply enter the <font face="Gill Sans,Helvetica,Arial">GAP</font> code of this
chapter into a <font face="Gill Sans,Helvetica,Arial">GAP</font> session, either interactively or by reading a file
with this code, and experiment after each step whether the expected
behaviour has been achieved, and what is still missing.)
<p>
The next lines of <font face="Gill Sans,Helvetica,Arial">GAP</font> code above create the categories
<code>CategoryCollections( IsMyZmodnZObj )</code> and two higher levels of collections
categories of this, which will be needed later;
it is important to create these categories before collections of the objects
in <code>IsMyZmodnZObj</code> actually arise.
<p>
Note that the only difference between <code>DeclareCategory</code> and <code>NewCategory</code>
is that in a call to <code>DeclareCategory</code>, a variable corresponding to the
first argument is set to the new category, and this variable is read-only
(see&nbsp;<a href="CHAP003.htm#SECT017">Global Variables in the Library</a>).
The same holds for <code>DeclareRepresentation</code> and <code>NewRepresentation</code> etc.
<p>
There is no analogue of categories in the implementation in
Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>,
since there it was not necessary to distinguish residue classes from
other <font face="Gill Sans,Helvetica,Arial">GAP</font> objects.
Note that the functions there assumed that their arguments were residue
classes, and the user was responsible not to call them with other
arguments.
Thus an important aspect of types is to describe arguments of functions
explicitly.
<p>
Third, we must decide about the <strong>representation</strong> of our objects.
This is something we know already from
Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>,
where we chose a list of length two.
Here we may choose between two essentially different representations for
the new <font face="Gill Sans,Helvetica,Arial">GAP</font> objects, namely as ``component object'' (record--like)
or ``positional object'' (list--like).
We decide to store the modulus of each residue class in its family,
and to encode the element <i>k</i> + <i>n</i><b>Z</b> by the unique residue in the range
<code>[ 0 .. <i>n</i>-1 ]</code> that is congruent to <i>k</i> modulo <i>n</i>,
and the object itself is chosen to be a positional object with this
residue at the first and only position (see&nbsp;<a href="CHAP003.htm#SECT010">Positional Objects</a>).
<p>
<pre>
gap&gt; DeclareRepresentation( "IsMyModulusRep", IsPositionalObjectRep, [ 1 ] );
</pre>
<p>
The fourth ingredients of a type, <strong>attributes</strong>, are usually of minor
importance for element objects.
In particular,
we do not need to introduce special attributes for residue classes.
<p>
Having defined what the new objects shall look like,
we now declare a global function
(see&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>),
to create an element when family and residue are given.
<p>
<pre>
gap&gt; DeclareGlobalFunction( "MyZmodnZObj" );
</pre>
<p>
Now we have declared what we need,
and we can start to implement the missing methods resp. functions;
so the following command belongs to the <strong>implementation part</strong> of our
package (see&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>).
<p>
The probably most interesting function is the one to construct a
residue class.
<p>
<pre>
gap&gt; InstallGlobalFunction( MyZmodnZObj, function( Fam, residue )
&gt;    return Objectify( NewType( Fam, IsMyZmodnZObj and IsMyModulusRep ),
&gt;                      [ residue mod Fam!.modulus ] );
&gt; end );
</pre>
<p>
Note that we normalize <code>residue</code> explicitly using <code>mod</code>;
we assumed that the modulus is stored in <code>Fam</code>,
so we must take care of this below.
If <code>Fam</code> is a family of residue classes, and <code>residue</code> is an integer,
<code>MyZmodnZObj</code> returns the corresponding object in the family <code>Fam</code>,
which lies in the category <code>IsMyZmodnZObj</code> and in the representation
<code>IsMyModulusRep</code>.
<p>
<code>MyZmodnZObj</code> needs an appropriate family as first argument,
so let us see how to get our hands on this.
Of course we could write a handy function to create such a family
for given modulus, but we choose another way.
In fact we do not really want to call <code>MyZmodnZObj</code> explicitly when we
want to create residue classes.
For example, if we want to enter a matrix of residues then usually
we start with a matrix of corresponding integers,
and it is more elegant to do the conversion via multiplying the matrix
with the identity of the required ring <b>Z</b>/<i>n</i><b>Z</b>;
this is also done for the conversion of integral matrices to
finite field matrices.
(Note that we will have to install a method for this.)
So it is often sufficient to access this identity,
for example via <code>One( MyZmodnZ( </code><var>n</var><code> ) )</code>,
where <code>MyZmodnZ</code> returns a domain representing the ring <b>Z</b>/<i>n</i><b>Z</b>
when called with the argument <i>n</i>.
We decide that constructing this ring is a natural place where the
creation of the family can be hidden,
and implement the function.
(Note that the declaration belongs to the declaration part,
and the installation belongs to the implementation part,
see&nbsp;<a href="CHAP003.htm#SECT018">Declaration and Implementation Part</a>).
<p>
<pre>
gap&gt; DeclareGlobalFunction( "MyZmodnZ" );
gap&gt; 
gap&gt; InstallGlobalFunction( MyZmodnZ, function( n )
&gt;    local F, R;
&gt; 
&gt;    if not IsPosInt( n ) then
&gt;      Error( "&lt;n&gt; must be a positive integer" );
&gt;    fi;
&gt; 
&gt;    # Construct the family of element objects of our ring.
&gt;    F:= NewFamily( Concatenation( "MyZmod", String( n ), "Z" ),
&gt;                   IsMyZmodnZObj );
&gt; 
&gt;    # Install the data.
&gt;    F!.modulus:= n;
&gt; 
&gt;    # Make the domain.
&gt;    R:= RingWithOneByGenerators( [ MyZmodnZObj( F, 1 ) ] );
&gt;    SetIsWholeFamily( R, true );
&gt;    SetName( R, Concatenation( "(Integers mod ", String(n), ")" ) );
&gt; 
&gt;    # Return the ring.
&gt;    return R;
&gt; end );
</pre>
<p>
Note that the modulus <code>n</code> is stored in the component <code>modulus</code> of the
family, as is assumed by <code>MyZmodnZ</code>.
Thus it is not necessary to store the modulus in each element.
When storing <code>n</code> with the <code>!.</code> operator as value of the component
<code>modulus</code>, we used that all families are in fact represented as
component objects (see&nbsp;<a href="CHAP003.htm#SECT009">Component Objects</a>).
<p>
We see that we can use <code>RingWithOneByGenerators</code> to construct a ring
with one if we have the appropriate generators.
The construction via <code>RingWithOneByGenerators</code> makes sure
that <code>IsRingWithOne</code> (and <code>IsRing</code>) is <code>true</code> for each output of <code>MyZmodnZ</code>.
So the main problem is to create the identity element of the ring,
which in our case suffices to generate the ring.
In order to create this element via <code>MyZmodnZObj</code>,
we have to construct its family first, at each call of <code>MyZmodnZ</code>.
<p>
Also note that we may enter known information about the ring.
Here we store that it contains the whole family of elements;
this is useful for example when we want to check the membership of an
element in the ring, which can be decided from the type of the element
if the ring contains its whole elements family.
Giving a name to the ring causes that it will be printed
via printing the name.
(By the way:
This name <code>(Integers mod </code><var>n</var><code>)</code> looks like a call to <code>\mod</code> with the
arguments <code>Integers</code> and <var>n</var>;
a construction of the ring via this call seems to be more natural than
by calling <code>MyZmodnZ</code>; later we shall install a <code>\mod</code> method in order
to admit this construction.)
<p>
Now we can read the above code into <font face="Gill Sans,Helvetica,Arial">GAP</font>,
and the following works already.
<p>
<pre>
gap&gt; R:= MyZmodnZ( 4 );
(Integers mod 4)
gap&gt; IsRing( R );
true
gap&gt; gens:= GeneratorsOfRingWithOne( R );
[ &lt;object&gt; ]
</pre>
<p>
But of course this means just to ask for the information we have
explicitly stored in the ring.
Already the questions whether the ring is finite and how many elements
it has, cannot be answered by <font face="Gill Sans,Helvetica,Arial">GAP</font>.
Clearly we know the answers, and we could store them in the ring,
by setting the value of the property <code>IsFinite</code> to <code>true</code> and the value
of the attribute <code>Size</code> to <var>n</var> (the argument of the call to <code>MyZmodnZ</code>).
If we do not want to do so then <font face="Gill Sans,Helvetica,Arial">GAP</font> could only try to find out the number
of elements of the ring via forming the closure of the generators
under addition and multiplication,
but up to now, <font face="Gill Sans,Helvetica,Arial">GAP</font> does not know how to add or multiply two
elements of our ring.
<p>
So we must install some methods for arithmetic and other
operations if the elements are to behave as we want.
<p>
We start with a method for showing elements nicely on the screen.
There are different operations for this purpose.
One of them is <code>PrintObj</code>, which is called for each argument in an
explicit call to <code>Print</code>.
Another one is <code>ViewObj</code>, which is called in the read-eval-print loop
for each object.
<code>ViewObj</code> shall produce short and human readable information about the
object in question, whereas <code>PrintObj</code> shall produce information that
may be longer and is (if reasonable) readable by <font face="Gill Sans,Helvetica,Arial">GAP</font>.
We cannot satisfy the latter requirement for a <code>PrintObj</code> method
because there is no way to make a family <font face="Gill Sans,Helvetica,Arial">GAP</font> readable.
So we decide to display the expression <code>( k mod n )</code> for an object
that is given by the residue <code>k</code> and the modulus <code>n</code>,
which would be fine as a <code>ViewObj</code> method.
Since the default for <code>ViewObj</code> is to call <code>PrintObj</code>,
and since no other <code>ViewObj</code> method is applicable to our elements,
we need only a <code>PrintObj</code> method.
<p>
<pre>
gap&gt; InstallMethod( PrintObj,
&gt;    "for element in Z/nZ (ModulusRep)",
&gt;    [ IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( x )
&gt;    Print( "( ", x![1], " mod ", FamilyObj(x)!.modulus, " )" );
&gt;    end );
</pre>
<p>
So we installed a method for the operation <code>PrintObj</code> (first argument),
and we gave it a suitable information message (second argument),
see&nbsp;<a href="../ref/CHAP007.htm#SSEC002.1">ApplicableMethod</a> and&nbsp;<a href="../ref/CHAP007.htm#SECT003">Tracing Methods</a> for applications of
this information string.
The third argument tells <font face="Gill Sans,Helvetica,Arial">GAP</font> that the method is applicable for
objects that lie in the category <code>IsMyZmodnZObj</code> and in the representation
<code>IsMyModulusRep</code>.
and the fourth argument is the method itself.
More details about <code>InstallMethod</code> can be found in&nbsp;<a href="CHAP002.htm#SECT002">Method Installation</a>.
<p>
Note that the requirement <code>IsMyModulusRep</code> for the argument <code>x</code> allows us
to access the residue as <code>x![1]</code>.
Since the family of <code>x</code> has the component <code>modulus</code> bound if it is
constructed by <code>MyZmodnZ</code>, we may access this component.
We check whether the method installation has some effect.
<p>
<pre>
gap&gt; gens;
[ ( 1 mod 4 ) ]
</pre>
<p>
Next we install methods for the comparison operations.
Note that we can assume that the residues in the representation chosen
are normalized.
<p>
<pre>
gap&gt; InstallMethod( \=,
&gt;    "for two elements in Z/nZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodnZObj and IsMyModulusRep, IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( x, y ) return x![1] = y![1]; end );
gap&gt; 
gap&gt; InstallMethod( \&lt;,
&gt;    "for two elements in Z/nZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodnZObj and IsMyModulusRep, IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( x, y ) return x![1] &lt; y![1]; end );
</pre>
<p>
The third argument used in these installations specifies the required
relation between the families of the arguments
(see&nbsp;<a href="../ref/CHAP013.htm#SECT001">Families</a> in the Reference Manual).
This argument of a method installation, if present, is a function that shall
be applied to the families of the arguments.
<code>IsIdenticalObj</code> means that the methods are applicable only if both arguments
lie in the same family.
(In installations for unary methods, obviously no relation is required,
so this argument is left out there.)
<p>
Up to now, we see no advantage of the new approach over the one in
Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>.
For a residue class represented as <code>[ </code><var>k</var><code>, </code><var>n</var><code> ]</code>, the way it is printed
on the screen is sufficient, and equality and comparison of lists are
good enough to define equality and comparison of residue classes if needed.
But this is not the case in other situations.
For example, if we would have decided that the residue <var>k</var> need not be
normalized then we would have needed functions in
Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>
that compute whether two residue classes are equal, and which of two
residue classes is regarded as larger than another.
Note that we are free to define what ``larger'' means for objects that
are newly introduced.
<p>
Next we install methods for the arithmetic operations,
first for the additive structure.
<p>
<pre>
gap&gt; InstallMethod( \+,
&gt;    "for two elements in Z/nZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodnZObj and IsMyModulusRep, IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( x, y )
&gt;    return MyZmodnZObj( FamilyObj( x ), x![1] + y![1] );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( ZeroOp,
&gt;    "for element in Z/nZ (ModulusRep)",
&gt;    [ IsMyZmodnZObj ],
&gt;    x -&gt; MyZmodnZObj( FamilyObj( x ), 0 ) );
gap&gt; 
gap&gt; InstallMethod( AdditiveInverseOp,
&gt;    "for element in Z/nZ (ModulusRep)",
&gt;    [ IsMyZmodnZObj and IsMyModulusRep ],
&gt;    x -&gt; MyZmodnZObj( FamilyObj( x ), AdditiveInverse( x![1] ) ) );
</pre>
<p>
Here the new approach starts to pay off.
The method for the operation <code>\+</code> allows us to use the infix
operator <code>+</code> for residue classes.
The method for <code>ZeroOp</code> is used when we call this operation or the
attribute <code>Zero</code> explicitly,
and <code>ZeroOp</code> it is also used when we ask for <code>0 * </code><var>rescl</var><code></code>,
where <var>rescl</var> is a residue class.
<p>
(Note that <code>Zero</code> and <code>ZeroOp</code> are distinguished
because <code>0 * </code><var>obj</var><code></code> is guaranteed to return a <strong>mutable</strong> result whenever
a mutable version of this result exists in <font face="Gill Sans,Helvetica,Arial">GAP</font> --for example if <var>obj</var>
is a matrix-- whereas <code>Zero</code> is an attribute and therefore returns
<strong>immutable</strong> results;
for our example there is no difference since the residue classes are
always immutable,
nevertheless we have to install the method for <code>ZeroOp</code>.
The same holds for <code>AdditiveInverse</code>, <code>One</code>, and <code>Inverse</code>.)
<p>
Similarly, <code>AdditiveInverseOp</code> can be either called directly or via the
unary <code>-</code> operator; so we can compute the additive inverse of the
residue class <var>rescl</var> as <code>-</code><var>rescl</var><code></code>.
<p>
It is not necessary to install methods for subtraction,
since this is handled via addition of the additive inverse of
the second argument if no other method is installed.
<p>
Let us try what we can do with the methods that are available now.
<p>
<pre>
gap&gt; x:= gens[1];  y:= x + x;
( 1 mod 4 )
( 2 mod 4 )
gap&gt; 0 * x;  -x;
( 0 mod 4 )
( 3 mod 4 )
gap&gt; y = -y;  x = y;  x &lt; y;  -x &lt; y;
true
false
true
false
</pre>
<p>
We might want to admit the addition of integers and elements in
rings <b>Z</b>/<i>n</i><b>Z</b>, where an integer is implicitly identified
with its residue modulo <i>n</i>.
To achieve this, we install methods to add an integer to an object in
<code>IsMyZmodnZObj</code> from the left and from the right.
<p>
<pre>
gap&gt; InstallMethod( \+,
&gt;    "for element in Z/nZ (ModulusRep) and integer",
&gt;    [ IsMyZmodnZObj and IsMyModulusRep, IsInt ],
&gt;    function( x, y )
&gt;    return MyZmodnZObj( FamilyObj( x ), x![1] + y );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( \+,
&gt;    "for integer and element in Z/nZ (ModulusRep)",
&gt;    [ IsInt, IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( x, y )
&gt;    return MyZmodnZObj( FamilyObj( y ), x + y![1] );
&gt;    end );
</pre>
<p>
Now we can do also the following.
<p>
<pre>
gap&gt; 2 + x;  7 - x;  y - 2;
( 3 mod 4 )
( 2 mod 4 )
( 0 mod 4 )
</pre>
<p>
Similarly we install the methods dealing with the multiplicative
structure.
We need methods to multiply two of our objects,
and to compute identity and inverse.
The operation <code>OneOp</code> is called when we ask for <code></code><var>rescl</var><code>^0</code>,
and <code>InverseOp</code> is called when we ask for <code></code><var>rescl</var><code>^-1</code>.
Note that the method for <code>InverseOp</code> returns <code>fail</code> if the argument
is not invertible.
<p>
<pre>
gap&gt; InstallMethod( \*,
&gt;    "for two elements in Z/nZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodnZObj and IsMyModulusRep, IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( x, y )
&gt;    return MyZmodnZObj( FamilyObj( x ), x![1] * y![1] );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( OneOp,
&gt;    "for element in Z/nZ (ModulusRep)",
&gt;    [ IsMyZmodnZObj ],
&gt;    elm -&gt; MyZmodnZObj( FamilyObj( elm ), 1 ) );
gap&gt; 
gap&gt; InstallMethod( InverseOp,
&gt;    "for element in Z/nZ (ModulusRep)",
&gt;    [ IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( elm )
&gt;    local residue;
&gt;    residue:= QuotientMod( 1, elm![1], FamilyObj( elm )!.modulus );
&gt;    if residue &lt;&gt; fail then
&gt;      residue:= MyZmodnZObj( FamilyObj( elm ), residue );
&gt;    fi;
&gt;    return residue;
&gt;    end );
</pre>
<p>
To be able to multiply our objects with integers,
we need not (but we may, and we should if we are going for efficiency)
install special methods.
This is because in general, <font face="Gill Sans,Helvetica,Arial">GAP</font> interprets the multiplication
of an integer and an additive object as abbreviation of successive
additions, and there is one generic method for such a multiplication
that uses only additions and ---in the case of a negative integer---
taking the additive inverse.
Analogously, there is a generic method for powering by integers
that uses only multiplications and taking the multiplicative inverse.
<p>
Note that we could also interpret the multiplication with an integer
as a shorthand for the multiplication with the corresponding residue
class.
We are lucky that this interpretation is compatible with the one that
is already available.
If this would not be the case then of course we would get into trouble
by installing a concurrent multiplication that computes something
different from the multiplication that is already defined,
since <font face="Gill Sans,Helvetica,Arial">GAP</font> does not guarantee which of the applicable methods is
actually chosen (see&nbsp;<a href="CHAP002.htm#SECT003">Applicable Methods and Method Selection</a>).
<p>
Now we have implemented methods for the arithmetic operations for our
elements, and the following calculations work.
<p>
<pre>
gap&gt; y:= 2 * x;  z:= (-5) * x;
( 2 mod 4 )
( 3 mod 4 )
gap&gt; y * z;  y * y;
( 2 mod 4 )
( 0 mod 4 )
gap&gt; y^-1;  y^0;
fail
( 1 mod 4 )
gap&gt; z^-1;
( 3 mod 4 )
</pre>
<p>
There are some other operations in <font face="Gill Sans,Helvetica,Arial">GAP</font> that we may want to accept
our elements as arguments.
An example is the operation <code>Int</code> that returns, e.g.,
the integral part of a rational number or the integer corresponding to
an element in a finite prime field.
For our objects, we may define that <code>Int</code> returns the normalized residue.
<p>
Note that we <strong>define</strong> this behaviour for elements
but we <strong>implement</strong> it for objects in the representation <code>IsMyModulusRep</code>.
This means that if someone implements another representation of
residue classes then this person must be careful to implement <code>Int</code>
methods for objects in this new representation compatibly with our
definition, i.e., such that the result is independent of the representation.
<p>
<pre>
gap&gt; InstallMethod( Int,
&gt;    "for element in Z/nZ (ModulusRep)",
&gt;    [ IsMyZmodnZObj and IsMyModulusRep ],
&gt;    z -&gt; z![1] );
</pre>
<p>
Another example of an operation for which we might want to install
a method is <code>\mod</code>.
We make the ring print itself as <code>Integers</code> mod the modulus,
and then it is reasonable to allow a construction this way,
which makes the <code>PrintObj</code> output of the ring <font face="Gill Sans,Helvetica,Arial">GAP</font> readable.
<p>
<pre>
gap&gt; InstallMethod( PrintObj,
&gt;    "for full collection Z/nZ",
&gt;    [ CategoryCollections( IsMyZmodnZObj ) and IsWholeFamily ],
&gt;    function( R )
&gt;    Print( "(Integers mod ",
&gt;           ElementsFamily( FamilyObj(R) )!.modulus, ")" );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( \mod,
&gt;    "for `Integers', and a positive integer",
&gt;    [ IsIntegers, IsPosRat and IsInt ],
&gt;    function( Integers, n ) return MyZmodnZ( n ); end );
</pre>
<p>
Let us try this.
<p>
<pre>
gap&gt; Int( y );
2
gap&gt; Integers mod 1789;
(Integers mod 1789)
</pre>
<p>
Probably it is not necessary to emphasize that with the approach of
Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>,
installing methods for existing operations is usually not possible or
at least not recommended.
For example, installing the function <code>resclass_sum</code> defined in
Section&nbsp;<a href="CHAP005.htm#SECT001">A First Attempt to Implement Elements of Residue Class Rings</a>
as a <code>\+</code> method for adding two lists of length two
(with integer entries) would not be compatible with the general
definition of the addition of two lists of same length.
Installing a method for the operation <code>Int</code> that takes a list
<code>[ </code><var>k</var><code>, </code><var>n</var><code> ]</code> and returns <var>k</var> would in principle be possible,
since there is no <code>Int</code> method for lists yet,
but it is not sensible to do so because one can think of other
interpretations of such a list where different <code>Int</code> methods could
be installed with the same right.
<p>
As mentioned in Section&nbsp;<a href="CHAP005.htm#SECT002">Why Proceed in a Different Way?</a>,
one advantage of the new approach is that with the implementation
we have up to now, automatically also matrices of residue classes
can be treated.
<pre>
gap&gt; r:= Integers mod 16;
(Integers mod 16)
gap&gt; x:= One( r );
( 1 mod 16 )
gap&gt; mat:= IdentityMat( 2 ) * x;
[ [ ( 1 mod 16 ), ( 0 mod 16 ) ], [ ( 0 mod 16 ), ( 1 mod 16 ) ] ]
gap&gt; mat[1][2]:= x;;
gap&gt; mat;
[ [ ( 1 mod 16 ), ( 1 mod 16 ) ], [ ( 0 mod 16 ), ( 1 mod 16 ) ] ]
gap&gt; Order( mat );
16
gap&gt; mat + mat;
[ [ ( 2 mod 16 ), ( 2 mod 16 ) ], [ ( 0 mod 16 ), ( 2 mod 16 ) ] ]
gap&gt; last^4;
[ [ ( 0 mod 16 ), ( 0 mod 16 ) ], [ ( 0 mod 16 ), ( 0 mod 16 ) ] ]
</pre>
<p>
Such matrices, if they are invertible, are valid as group elements.
One technical problem is that the default algorithm for inverting matrices
may give up since Gaussian elimination need not be successful over rings
containing zero divisors.
Therefore we install a simpleminded inversion method that inverts an integer
matrix.
<p>
<pre>
gap&gt; InstallMethod( InverseOp,
&gt;    "for an ordinary matrix over a ring Z/nZ",
&gt;    [ IsMatrix and IsOrdinaryMatrix
&gt;          and CategoryCollections( CategoryCollections( IsMyZmodnZObj ) ) ],
&gt;    function( mat )
&gt;    local one, modulus;
&gt; 
&gt;    one:= One( mat[1][1] );
&gt;    modulus:= FamilyObj( one )!.modulus;
&gt;    mat:= InverseOp( List( mat, row -&gt; List( row, Int ) ) );
&gt;    if mat &lt;&gt; fail then
&gt;      mat:= ( mat mod modulus ) * one;
&gt;    fi;
&gt;    if not IsMatrix( mat ) then
&gt;      mat:= fail;
&gt;    fi;
&gt;    return mat;
&gt;    end );
</pre>
<p>
Additionally we install a method for finding a domain that contains the
matrix entries; this is used by some <font face="Gill Sans,Helvetica,Arial">GAP</font> library functions.
<p>
<pre>
gap&gt; InstallMethod( DefaultFieldOfMatrixGroup,
&gt;     "for a matrix group over a ring Z/nZ",
&gt;     [ IsMatrixGroup and CategoryCollections( CategoryCollections(
&gt;           CategoryCollections( IsMyZmodnZObj ) ) ) ],
&gt;     G -&gt; RingWithOneByGenerators( [ One( Representative( G )[1][1] ) ] ) );
</pre>
<p>
Now we can deal with matrix groups over residue class rings.
<p>
<pre>
gap&gt; mat2:= IdentityMat( 2 ) * x;;
gap&gt; mat2[2][1]:= x;;
gap&gt; g:= Group( mat, mat2 );;
gap&gt; Size( g );
3072
gap&gt; Factors( last );
[ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3 ]
gap&gt; syl3:= SylowSubgroup( g, 3 );;
gap&gt; gens:= GeneratorsOfGroup( syl3 );
[ [ [ ( 1 mod 16 ), ( 7 mod 16 ) ], [ ( 11 mod 16 ), ( 14 mod 16 ) ] ] ]
gap&gt; Order( gens[1] );
3
</pre>
<p>
It should be noted that this way more involved methods for matrix groups
may not be available.
For example, many questions about a finite matrix group can be delegated
to an isomorphic permutation group via a so-called ``nice monomorphism'';
this can be controlled by the filter <code>IsHandledByNiceMonomorphism</code>
(see&nbsp;<a href="../ref/CHAP038.htm#SSEC005.1">IsHandledByNiceMonomorphism</a> in the <font face="Gill Sans,Helvetica,Arial">GAP</font> Reference Manual).
<p>
By the way, also groups of (invertible) residue classes can be formed,
but this may be of minor interest.
<pre>
gap&gt; g:= Group( x );;  Size( g );
#I  default `IsGeneratorsOfMagmaWithInverses' method returns `true' for 
[ ( 1 mod 16 ) ]
1
gap&gt; g:= Group( 3*x );;  Size( g );
#I  default `IsGeneratorsOfMagmaWithInverses' method returns `true' for 
[ ( 3 mod 16 ) ]
4
</pre>
<p>
(The messages above tell that <font face="Gill Sans,Helvetica,Arial">GAP</font> does not know a method for deciding
whether the given elements are valid group elements.
We could add an appropriate <code>IsGeneratorsOfMagmaWithInverses</code> method if
we would want.)
<p>
Having done enough for the elements,
we may install some more methods for the rings
if we want to use them as arguments.
These rings are finite,
and there are many generic methods that will work if they are able
to compute the list of elements of the ring,
so we install a method for this.
<p>
<pre>
gap&gt; InstallMethod( Enumerator,
&gt;    "for full collection Z/nZ",
&gt;    [ CategoryCollections( IsMyZmodnZObj ) and IsWholeFamily ],
&gt;    function( R )
&gt;    local F;
&gt;    F:= ElementsFamily( FamilyObj(R) );
&gt;    return List( [ 0 .. Size( R ) - 1 ], x -&gt; MyZmodnZObj( F, x ) );
&gt;    end );
</pre>
<p>
Note that this method is applicable only to full rings <b>Z</b>/<i>n</i><b>Z</b>,
for proper subrings it would return a wrong result.
Furthermore, it is not required that the argument is a ring;
in fact this method is applicable also to the additive group
formed by all elements in the family,
provided that it knows to contain the whole family.
<p>
Analogously, we install methods to compute the size,
a random element, and the units of full rings <b>Z</b>/<i>n</i><b>Z</b>.
<p>
<pre>
gap&gt; InstallMethod( Random,
&gt;    "for full collection Z/nZ",
&gt;    [ CategoryCollections( IsMyZmodnZObj ) and IsWholeFamily ],
&gt;    R -&gt; MyZmodnZObj( ElementsFamily( FamilyObj(R) ),
&gt;                    Random( [ 0 .. Size( R ) - 1 ] ) ) );
gap&gt; 
gap&gt; InstallMethod( Size,
&gt;    "for full ring Z/nZ",
&gt;    [ CategoryCollections( IsMyZmodnZObj ) and IsWholeFamily ],
&gt;    R -&gt; ElementsFamily( FamilyObj(R) )!.modulus );
gap&gt; 
gap&gt; InstallMethod( Units,
&gt;    "for full ring Z/nZ",
&gt;    [     CategoryCollections( IsMyZmodnZObj )
&gt;      and IsWholeFamily and IsRing ],
&gt;    function( R )
&gt;    local F;
&gt;    F:= ElementsFamily( FamilyObj( R ) );
&gt;    return List( PrimeResidues( Size(R) ), x -&gt; MyZmodnZObj( F, x ) );
&gt;    end );
</pre>
<p>
The <code>Units</code> method has the disadvantage that the result is returned
as a list (in fact this list is also strictly sorted).
We could improve the implementation by returning the units as a group;
if we do not want to take the full list of elements as generators,
we can use the function <code>GeneratorsPrimeResidues</code>
(see&nbsp;<a href="../ref/CHAP015.htm#SSEC001.4">GeneratorsPrimeResidues</a> in the Reference Manual).
<p>
<pre>
gap&gt; InstallMethod( Units,
&gt;    "for full ring Z/nZ",
&gt;    [     CategoryCollections( IsMyZmodnZObj )
&gt;      and IsWholeFamily and IsRing ],
&gt;    function( R )
&gt;    local G, gens;
&gt; 
&gt;    gens:= GeneratorsPrimeResidues( Size( R ) ).generators;
&gt;    if not IsEmpty( gens ) and gens[ 1 ] = 1 then
&gt;      gens:= gens{ [ 2 .. Length( gens ) ] };
&gt;    fi;
&gt;    gens:= Flat( gens ) * One( R );
&gt;    return GroupByGenerators( gens, One( R ) );
&gt;    end );
</pre>
<p>
Each ring <b>Z</b>/<i>n</i><b>Z</b> is finite,
and we could install a method that returns <code>true</code> when <code>IsFinite</code> is
called with <b>Z</b>/<i>n</i><b>Z</b> as argument.
But we can do this more elegantly via installing a <strong>logical implication</strong>.
<p>
<pre>
gap&gt; InstallTrueMethod( IsFinite,
&gt;    CategoryCollections( IsMyZmodnZObj ) and IsDomain );
</pre>
<p>
In effect, every domain that consists of elements in <code>IsMyZmodnZObj</code>
will automatically store that it is finite,
even if <code>IsFinite</code> is not called for it.
<p>
<p>
<h2><a name="SECT004">5.4 Compatibility of Residue Class Rings with Prime Fields</a></h2>
<p><p>
The above implementation of residue classes and residue class rings
has at least two disadvantages.
First, if <i>p</i> is a prime then the ring <b>Z</b>/<i>p</i><b>Z</b> is in fact a field,
but the return values of <code>MyZmodnZ</code> are never regarded as fields because
they are not in the category <code>IsMagmaWithInversesIfNonzero</code>.
Second, and this makes the example really interesting,
there are already elements of finite prime fields implemented in <font face="Gill Sans,Helvetica,Arial">GAP</font>,
and we may want to identify them with elements in <b>Z</b>/<i>p</i><b>Z</b>.
<p>
To be more precise,
elements of finite fields in <font face="Gill Sans,Helvetica,Arial">GAP</font> lie in the category <code>IsFFE</code>,
and there is already a representation, <code>IsInternalRep</code>, of these elements
via discrete logarithms.
The aim of this section is to make <code>IsMyModulusRep</code> an alternative
representation of elements in finite prime fields.
<p>
Note that this is only one step towards the desired compatibility.
Namely, after having a second representation of elements in finite
prime fields, we may wish that the function <code>GF</code> (which is the usual
function to create finite fields in <font face="Gill Sans,Helvetica,Arial">GAP</font>) is able to return
<code>MyZmodnZ( </code><var>p</var><code> )</code> when <code>GF( </code><var>p</var><code> )</code> is called for a prime <var>p</var>.
Moreover, then we have to decide about a default representation of
elements in <code>GF( </code><var>p</var><code> )</code> for primes <var>p</var> for which both representations are
available.
Of course we can force the new representation by explicitly calling
<code>MyZmodnZ</code> and <code>MyZmodnZObj</code> whenever we want, but it is not a priori
clear in which situation which representation is preferable.
<p>
The same questions will occur when we want to implement a new
representation for non-prime fields.
The steps of this implementation will be the same as described in this
chapter,
and we will have to achieve compatibility with both the internal
representation of elements in small finite fields and the representation
<code>IsMyModulusRep</code> of elements in arbitrary prime fields.
<p>
But let us now turn back to the task of this section.
We first adjust the setup of the declaration part of the previous section,
and then repeat the installations with suitable modifications.
<p>
(We should start a new <font face="Gill Sans,Helvetica,Arial">GAP</font> session for that, otherwise <font face="Gill Sans,Helvetica,Arial">GAP</font> will
complain that the objects to be declared are already bound;
additionally, the methods installed above may be not compatible with
the ones we want.)
<p>
<pre>
gap&gt; DeclareCategory( "IsMyZmodnZObj", IsScalar );
gap&gt; 
gap&gt; DeclareCategory( "IsMyZmodnZObjNonprime", IsMyZmodnZObj );
gap&gt; 
gap&gt; DeclareSynonym( "IsMyZmodpZObj", IsMyZmodnZObj and IsFFE );
gap&gt; 
gap&gt; DeclareRepresentation( "IsMyModulusRep", IsPositionalObjectRep, [ 1 ] );
gap&gt; 
gap&gt; DeclareGlobalFunction( "MyZmodnZObj" );
gap&gt; 
gap&gt; DeclareGlobalFunction( "MyZmodnZ" );
</pre>
<p>
As in the previous section,
all (newly introduced) elements of rings <b>Z</b>/<i>n</i><b>Z</b> lie in the category
<code>IsMyZmodnZObj</code>.
But now we introduce two subcategories, namely <code>IsMyZmodnZObjNonprime</code>
for all elements in rings <b>Z</b>/<i>n</i><b>Z</b> where <i>n</i> is not a prime,
and <code>IsMyZmodpZObj</code> for elements in finite prime fields.
All objects in the latter are automatically known to lie in the
category <code>IsFFE</code> of finite field elements.
<p>
It would be reasonable if also those internally represented elements
in the category <code>IsFFE</code> that do in fact lie in a prime field
would also  lie in the category <code>IsMyZmodnZObj</code> (and thus in fact in
<code>IsMyZmodpZObj</code>).
But this cannot be achieved because internally represented finite field
elements do in general not store whether they lie in a prime field.
<p>
As for the implementation part,
again let us start with the definitions of <code>MyZmodnZObj</code> and <code>MyZmodnZ</code>.
<p>
<pre>
gap&gt; InstallGlobalFunction( MyZmodnZObj, function( Fam, residue )
&gt;    if IsFFEFamily( Fam ) then
&gt;      return Objectify( NewType( Fam, IsMyZmodpZObj
&gt;                                  and IsMyModulusRep ),
&gt;                    [ residue mod Characteristic( Fam ) ] );
&gt;    else
&gt;      return Objectify( NewType( Fam, IsMyZmodnZObjNonprime
&gt;                                  and IsMyModulusRep ),
&gt;                    [ residue mod Fam!.modulus ] );
&gt;    fi;
&gt; end );
</pre>
<p>
<pre>
gap&gt; InstallGlobalFunction( MyZmodnZ, function( n )
&gt;    local F, R;
&gt; 
&gt;    if not ( IsInt( n ) and IsPosRat( n ) ) then
&gt;      Error( "&lt;n&gt; must be a positive integer" );
&gt;    elif IsPrimeInt( n ) then
&gt;      # Construct the family of element objects of our field.
&gt;      F:= FFEFamily( n );
&gt;      # Make the domain.
&gt;      R:= FieldOverItselfByGenerators( [ MyZmodnZObj( F, 1 ) ] );
&gt;      SetIsPrimeField( R, true );
&gt;    else
&gt;      # Construct the family of element objects of our ring.
&gt;      F:= NewFamily( Concatenation( "MyZmod", String( n ), "Z" ),
&gt;                     IsMyZmodnZObjNonprime );
&gt;      # Install the data.
&gt;      F!.modulus:= n;
&gt;      # Make the domain.
&gt;      R:= RingWithOneByGenerators( [ MyZmodnZObj( F, 1 ) ] );
&gt;      SetIsWholeFamily( R, true );
&gt;      SetName( R, Concatenation( "(Integers mod ",String(n),")" ) );
&gt;    fi;
&gt; 
&gt;    # Return the ring resp. field.
&gt;    return R;
&gt; end );
</pre>
<p>
Note that the result of <code>MyZmodnZ</code> with a prime as argument is a field that
does not contain the whole family of its elements, since all finite field
elements of a fixed characteristic lie in the same family.
Further note that we cannot expect a family of finite field elements
to have a component <code>modulus</code>,
so we use <code>Characteristic</code> to get the modulus.
Requiring that <code>Fam!.modulus</code> works also if <code>Fam</code> is a family of
finite field elements would violate the rule
that an extension of <font face="Gill Sans,Helvetica,Arial">GAP</font> should not force changes in existing code,
in this case code dealing with families of finite field elements.
<p>
<pre>
gap&gt; InstallMethod( PrintObj,
&gt;    "for element in Z/nZ (ModulusRep)",
&gt;    [ IsMyZmodnZObjNonprime and IsMyModulusRep ],
&gt;    function( x )
&gt;    Print( "( ", x![1], " mod ", FamilyObj(x)!.modulus, " )" );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( PrintObj,
&gt;    "for element in Z/pZ (ModulusRep)",
&gt;    [ IsMyZmodpZObj and IsMyModulusRep ],
&gt;    function( x )
&gt;    Print( "( ", x![1], " mod ", Characteristic(x), " )" );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( \=,
&gt;    "for two elements in Z/nZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodnZObj and IsMyModulusRep,
&gt;      IsMyZmodnZObj and IsMyModulusRep ],
&gt;    function( x, y ) return x![1] = y![1]; end );
</pre>
<p>
The above method to check equality is independent of whether the
arguments have a prime or nonprime modulus,
so we installed it for arguments in <code>IsMyZmodnZObj</code>.
Now we install also methods to compare objects in <code>IsMyZmodpZObj</code>
with the ``old'' finite field elements.
<p>
<pre>
gap&gt; InstallMethod( \=,
&gt;    "for element in Z/pZ (ModulusRep) and internal FFE",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodpZObj and IsMyModulusRep, IsFFE and IsInternalRep ],
&gt;    function( x, y )
&gt;    return DegreeFFE( y ) = 1 and x![1] = IntFFE( y );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( \=,
&gt;    "for internal FFE and element in Z/pZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsFFE and IsInternalRep, IsMyZmodpZObj and IsMyModulusRep ],
&gt;    function( x, y )
&gt;    return DegreeFFE( x ) = 1 and IntFFE( x ) = y![1];
&gt;    end );
</pre>
<p>
The situation with the operation <code>\&lt;</code> is more difficult.
Of course we are free to define the comparison of objects in
<code>IsMyZmodnZObjNonprime</code>,
but for the finite field elements, the comparison must be compatible
with the predefined comparison of the ``old'' finite field elements.
The definition of the <code>\&lt;</code> comparison of internally represented
finite field elements can be found in Chapter&nbsp;<a href="../ref/CHAP057.htm">Finite Fields</a>
in the Reference Manual.
In situations where the documentation does not provide the required
information, one has to look it up in the <font face="Gill Sans,Helvetica,Arial">GAP</font> code;
for example, the comparison in our case can be found in the
appropriate source code file of the <font face="Gill Sans,Helvetica,Arial">GAP</font> kernel.
<p>
<pre>
gap&gt; InstallMethod( \&lt;,
&gt;    "for two elements in Z/nZ (ModulusRep, nonprime)",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodnZObjNonprime and IsMyModulusRep,
&gt;      IsMyZmodnZObjNonprime and IsMyModulusRep ],
&gt;    function( x, y ) return x![1] &lt; y![1]; end );
gap&gt; 
gap&gt; InstallMethod( \&lt;,
&gt;    "for two elements in Z/pZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodpZObj and IsMyModulusRep,
&gt;      IsMyZmodpZObj and IsMyModulusRep ],
&gt;    function( x, y )
&gt;    local p, r;      # characteristic and primitive root
&gt;    if x![1] = 0 then
&gt;      return y![1] &lt;&gt; 0;
&gt;    elif y![1] = 0 then
&gt;      return false;
&gt;    else
&gt;      p:= Characteristic( x );
&gt;      r:= PrimitiveRootMod( p );
&gt;      return LogMod( x![1], r, p ) &lt; LogMod( y![1], r, p );
&gt;    fi;
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( \&lt;,
&gt;    "for element in Z/pZ (ModulusRep) and internal FFE",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodpZObj and IsMyModulusRep, IsFFE and IsInternalRep ],
&gt;    function( x, y )
&gt;    return x![1] * One( y ) &lt; y;
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( \&lt;,
&gt;    "for internal FFE and element in Z/pZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsFFE and IsInternalRep, IsMyZmodpZObj and IsMyModulusRep ],
&gt;    function( x, y )
&gt;    return x &lt; y![1] * One( x );
&gt;    end );
</pre>
<p>
Now we install the same methods for the arithmetic operations
<code>\+</code>, <code>ZeroOp</code>, <code>AdditiveInverseOp</code>, <code>\-</code>, <code>\*</code>, and <code>OneOp</code>
as in the previous section, without listing them below.
Also the same <code>Int</code> method is installed for objects in <code>IsMyZmodnZObj</code>.
Note that it is compatible with the definition of <code>Int</code> for finite
field elements.
And of course the same method for <code>\mod</code> is installed.
<p>
We have to be careful, however, with the methods for <code>InverseOp</code>,
<code>\/</code>, and <code>\^</code>.
These methods and the missing methods for arithmetic operations with
one argument in <code>IsMyModulusRep</code> and the other in <code>IsInternalRep</code>
are given below.
<p>
<pre>
gap&gt; InstallMethod( \+,
&gt;    "for element in Z/pZ (ModulusRep) and internal FFE",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodpZObj and IsMyModulusRep, IsFFE and IsInternalRep ],
&gt;    function( x, y ) return x![1] + y; end );
gap&gt; 
gap&gt; InstallMethod( \+,
&gt;    "for internal FFE and element in Z/pZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsFFE and IsInternalRep, IsMyZmodpZObj and IsMyModulusRep ],
&gt;    function( x, y ) return x + y![1]; end );
gap&gt; 
gap&gt; InstallMethod( \*,
&gt;    "for element in Z/pZ (ModulusRep) and internal FFE",
&gt;    IsIdenticalObj,
&gt;    [ IsMyZmodpZObj and IsMyModulusRep, IsFFE and IsInternalRep ],
&gt;    function( x, y ) return x![1] * y; end );
gap&gt; 
gap&gt; InstallMethod( \*,
&gt;    "for internal FFE and element in Z/pZ (ModulusRep)",
&gt;    IsIdenticalObj,
&gt;    [ IsFFE and IsInternalRep, IsMyZmodpZObj and IsMyModulusRep ],
&gt;    function( x, y ) return x * y![1]; end );
gap&gt; 
gap&gt; InstallMethod( InverseOp,
&gt;    "for element in Z/nZ (ModulusRep, nonprime)",
&gt;    [ IsMyZmodnZObjNonprime and IsMyModulusRep ],
&gt;    function( x )
&gt;    local residue;
&gt;    residue:= QuotientMod( 1, x![1], FamilyObj(x)!.modulus );
&gt;    if residue &lt;&gt; fail then
&gt;      residue:= MyZmodnZObj( FamilyObj(x), residue );
&gt;    fi;
&gt;    return residue;
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( InverseOp,
&gt;    "for element in Z/pZ (ModulusRep)",
&gt;    [ IsMyZmodpZObj and IsMyModulusRep ],
&gt;    function( x )
&gt;    local residue;
&gt;    residue:= QuotientMod( 1, x![1], Characteristic( FamilyObj(x) ) );
&gt;    if residue &lt;&gt; fail then
&gt;      residue:= MyZmodnZObj( FamilyObj(x), residue );
&gt;    fi;
&gt;    return residue;
&gt;    end );
</pre>
<p>
The operation <code>DegreeFFE</code> is defined for finite field elements,
we need a method for objects in <code>IsMyZmodpZObj</code>.
Note that we need not require <code>IsMyModulusRep</code> since no access to
representation dependent data occurs.
<p>
<pre>
gap&gt; InstallMethod( DegreeFFE,
&gt;    "for element in Z/pZ",
&gt;    [ IsMyZmodpZObj ],
&gt;    z -&gt; 1 );
</pre>
<p>
The methods for <code>Enumerator</code>, <code>Random</code>, <code>Size</code>, and <code>Units</code>,
that we had installed in the previous section had all assumed that
their argument contains the whole family of its elements.
So these methods make sense only for the nonprime case.
For the prime case, there are already methods for these operations
with argument a field.
<p>
<pre>
gap&gt; InstallMethod( Enumerator,
&gt;    "for full ring Z/nZ",
&gt;    [ CategoryCollections( IsMyZmodnZObjNonprime ) and IsWholeFamily ],
&gt;    function( R )
&gt;    local F;
&gt;    F:= ElementsFamily( FamilyObj( R ) );
&gt;    return List( [ 0 .. Size( R ) - 1 ], x -&gt; MyZmodnZObj( F, x ) );
&gt;    end );
gap&gt; 
gap&gt; InstallMethod( Random,
&gt;    "for full ring Z/nZ",
&gt;    [ CategoryCollections( IsMyZmodnZObjNonprime ) and IsWholeFamily ],
&gt;    R -&gt; MyZmodnZObj( ElementsFamily( FamilyObj( R ) ),
&gt;                    Random( [ 0 .. Size( R ) - 1 ] ) ) );
gap&gt; 
gap&gt; InstallMethod( Size,
&gt;    "for full ring Z/nZ",
&gt;    [ CategoryCollections( IsMyZmodnZObjNonprime ) and IsWholeFamily ],
&gt;    R -&gt; ElementsFamily( FamilyObj( R ) )!.modulus );
gap&gt; 
gap&gt; InstallMethod( Units,
&gt;    "for full ring Z/nZ",
&gt;    [     CategoryCollections( IsMyZmodnZObjNonprime )
&gt;      and IsWholeFamily and IsRing ],
&gt;    function( R )
&gt;    local G, gens;
&gt; 
&gt;    gens:= GeneratorsPrimeResidues( Size( R ) ).generators;
&gt;    if not IsEmpty( gens ) and gens[ 1 ] = 1 then
&gt;      gens:= gens{ [ 2 .. Length( gens ) ] };
&gt;    fi;
&gt;    gens:= Flat( gens ) * One( R );
&gt;    return GroupByGenerators( gens, One( R ) );
&gt;    end );
gap&gt; 
gap&gt; InstallTrueMethod( IsFinite,
&gt;    CategoryCollections( IsMyZmodnZObjNonprime ) and IsDomain );
</pre>
<p>
<p>
<h2><a name="SECT005">5.5 Further Improvements in Implementing Residue Class Rings</a></h2>
<p><p>
There are of course many possibilities to improve the implementation.
<p>
With the setup as described above,
subsequent calls <code>MyZmodnZ( </code><var>n</var><code> )</code> with the same <var>n</var> yield incompatible
rings in the sense that elements of one ring cannot be added to elements
of an other one.
The solution for this problem is to keep a global list of all results of
<code>MyZmodnZ</code> in the current <font face="Gill Sans,Helvetica,Arial">GAP</font> session, and to return the stored values
whenever possible.
Note that this approach would admit <code>PrintObj</code> methods that produce
<font face="Gill Sans,Helvetica,Arial">GAP</font> readable output.
<p>
One can improve the <code>Units</code> method for the full ring in such a way
that a group is returned and not only a list of its elements;
then the result of <code>Units</code> can be used, e.&nbsp;g., as input for the operation
<code>SylowSubgroup</code>.
<p>
To make computations more efficient,
one can install methods for <code>\-</code>, <code>\/</code>, and <code>\^</code>;
one reason for doing so may be that this avoids the unnecessary construction
of the additive or multiplicative inverse, or of intermediate powers.
<p>
<pre>
InstallMethod( \-, "two elements in Z/nZ (ModulusRep)", ... );
InstallMethod( \-, "Z/nZ-obj. (ModulusRep) and integer", ... );
InstallMethod( \-, "integer and Z/nZ-obj. (ModulusRep)", ... );
InstallMethod( \-, "Z/pZ-obj. (ModulusRep) and internal FFE", ... );
InstallMethod( \-, "internal FFE and Z/pZ-obj. (ModulusRep)", ... );
InstallMethod( \*, "Z/nZ-obj. (ModulusRep) and integer", ... );
InstallMethod( \*, "integer and Z/nZ-obj. (ModulusRep)", ... );
InstallMethod( \/, "two Z/nZ-objs. (ModulusRep, nonprime)", ... );
InstallMethod( \/, "two Z/pZ-objs. (ModulusRep)", ... );
InstallMethod( \/, "Z/nZ-obj. (ModulusRep) and integer", ... );
InstallMethod( \/, "integer and Z/nZ-obj. (ModulusRep)", ... );
InstallMethod( \/, "Z/pZ-obj. (ModulusRep) and internal FFE", ... );
InstallMethod( \/, "internal FFE and Z/pZ-obj. (ModulusRep)", ... );
InstallMethod( \^, "Z/nZ-obj. (ModulusRep, nonprime) &amp; int.", ... );
InstallMethod( \^, "Z/pZ-obj. (ModulusRep), and integer", ... );
</pre>
<p>
The call to <code>NewType</code> in <code>MyZmodnZObj</code> can be avoided by storing
the required type, e.g., in the family.
But note that it is <strong>not</strong> admissible to take the type of an existing
object as first argument of <code>Objectify</code>.
For example, suppose two objects in <code>IsMyZmodnZObj</code> shall be added.
Then we must not use the type of one of the arguments in a call of
<code>Objectify</code>, because the argument may have knowledge that is not
correct for the result of the addition.
One may think of the property <code>IsOne</code> that may hold for both
arguments but certainly not for their sum.
<p>
For comparing two objects in <code>IsMyZmodpZObj</code> via ``<code>&lt;</code>'',
we had to install a quite expensive method because of the compatibility
with the comparison of finite field elements that did already exist.
In fact <font face="Gill Sans,Helvetica,Arial">GAP</font> supports finite fields with elements represented via
discrete logarithms only up to a given size.
So in principle we have the freedom to define a cheaper comparison
via ``<code>&lt;</code>'' for objects in <code>IsMyZmodpZObj</code> if the modulus is large
enough.
This is possible by introducing two categories <code>IsMyZmodpZObjSmall</code>
and <code>IsMyZmodpZObjLarge</code>, which are subcategories of <code>IsMyZmodpZObj</code>,
and to install different <code>\&lt;</code> methods for pairs of objects
in these categories.
<p>
<p>
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP004.htm">Previous</a>] [<a href ="CHAP006.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<font face="Gill Sans,Helvetica,Arial">GAP 4 manual<br>March 2006
</font></body></html>