<html><head><title>[ref] 46 Presentations and Tietze Transformations</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP045.htm">Previous</a>] [<a href ="CHAP047.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>46 Presentations and Tietze Transformations</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP046.htm#SECT001">Creating Presentations</a>
<li> <A HREF="CHAP046.htm#SECT002">SimplifiedFpGroup</a>
<li> <A HREF="CHAP046.htm#SECT003">Subgroup Presentations</a>
<li> <A HREF="CHAP046.htm#SECT004">Relators in a Presentation</a>
<li> <A HREF="CHAP046.htm#SECT005">Printing Presentations</a>
<li> <A HREF="CHAP046.htm#SECT006">Changing Presentations</a>
<li> <A HREF="CHAP046.htm#SECT007">Tietze Transformations</a>
<li> <A HREF="CHAP046.htm#SECT008">Elementary Tietze Transformations</a>
<li> <A HREF="CHAP046.htm#SECT009">Tietze Transformations that introduce new Generators</a>
<li> <A HREF="CHAP046.htm#SECT010">Tracing generator images through Tietze transformations</a>
<li> <A HREF="CHAP046.htm#SECT011">DecodeTree</a>
<li> <A HREF="CHAP046.htm#SECT012">Tietze Options</a>
</ol><p>
<p>
A finite presentation describes a group, but usually there is a multitude of
presentations that describe isomorphic groups. Therefore a presentation in
<font face="Gill Sans,Helvetica,Arial">GAP</font> is different from a finitely presented group though there are ways to
translate between both.
<p>
An important feature of presentations is that they can be modified (see
sections <a href="CHAP046.htm#SECT006">Changing Presentations</a> to <a href="CHAP046.htm#SECT009">Tietze Transformations that introduce new Generators</a>).
<p>
If you only want to get new presentations for subgroups of a finitely
presented group (and do not want to manipulate presentations yourself),
chances are that the operation <code>IsomorphismFpGroup</code> already does what you
want (see&nbsp;<a href="CHAP045.htm#SECT011">New Presentations and Presentations for Subgroups</a>).
<p>
<p>
<h2><a name="SECT001">46.1 Creating Presentations</a></h2>
<p><p>
<a name = "SSEC001.1"></a>
<li><code>PresentationFpGroup( </code><var>G</var><code> [, </code><var>printlevel</var><code>] ) F</code>
<p>
creates a presentation, i.e. a  Tietze object, for the given finitely
presented group <var>G</var>. This presentation will be exactly as the
presentation of <var>G</var> and <strong>no</strong> initial Tietze transformations are applied
to it.
<p>
The  optional <var>printlevel</var> parameter can be used to restrict or to
extend the amount  of  output provided by  Tietze  transformation
commands when being applied to the created presentation.  The
default value 1 is designed  for  interactive  use  and  implies
explicit  messages  to  be displayed  by most of  these  commands. A
<var>printlevel</var> value of  0 will suppress these messages, whereas a
<var>printlevel</var>  value of 2  will enforce some additional output.
<p>
<pre>
gap&gt; f := FreeGroup( "a", "b" );
&lt;free group on the generators [ a, b ]&gt;
gap&gt; g := f / [ f.1^3, f.2^2, (f.1*f.2)^3 ];
&lt;fp group on the generators [ a, b ]&gt;
gap&gt; p := PresentationFpGroup( g );
&lt;presentation with 2 gens and 3 rels of total length 11&gt;
</pre>
<p>
Most of the functions creating presentations and all functions performing
Tietze transformations on them sort the relators by increasing lengths. The
function <code>PresentationFpGroup</code> is an exception because it is intended to
reflect the relators that were used to define the involved FpGroup. You may
use the following command to sort the presentation.
<p>
<a name = "SSEC001.2"></a>
<li><code>TzSort( </code><var>P</var><code> ) F</code>
<p>
sorts the relators of the given presentation <var>P</var> by increasing lengths.
There is no particular ordering defined for the relators of equal
length. Note that <code>TzSort</code> does not return a new object. It changes the
given presentation.
<p>
<a name = "SSEC001.3"></a>
<li><code>GeneratorsOfPresentation( </code><var>P</var><code> ) O</code>
<p>
returns a list of free generators that is a <code>ShallowCopy</code> of the current
generators of the presentation <var>P</var>.
<p>
<a name = "SSEC001.4"></a>
<li><code>FpGroupPresentation( </code><var>P</var><code> [, </code><var>nam</var><code>] ) F</code>
<p>
constructs an <code>FpGroup</code> group as defined by the  given Tietze
presentation <var>P</var>.
<p>
<pre>
gap&gt; h := FpGroupPresentation( p );
&lt;fp group on the generators [ a, b ]&gt;
gap&gt; h = g;
false
</pre>
<p>
<a name = "SSEC001.5"></a>
<li><code>PresentationViaCosetTable( </code><var>G</var><code> ) F</code>
<li><code>PresentationViaCosetTable( </code><var>G</var><code>, </code><var>F</var><code>, </code><var>words</var><code> ) F</code>
<p>
constructs a presentation for a given concrete finite group. It applies
the relations finding algorithm which has been described in <a href="biblio.htm#Can73"><cite>Can73</cite></a>
and <a href="biblio.htm#Neu82"><cite>Neu82</cite></a>. It automatically applies Tietze transformations to the
presentation found.
<p>
If only a group <var>G</var> has been specified, the single stage algorithm is
applied.
<p>
The operation <code>IsomorphismFpGroup</code> in contrast uses a multiple-stage
algorithm using a composition series and stabilizer chains. It usually
should be used rather than <code>PresentationViaCosetTable</code>. (It does not
apply Tietze transformations automatically.)
<p>
If the two stage algorithm is to be used, <code>PresentationViaCosetTable</code>
expects a subgroup <var>H</var> of <var>G</var> to be provided in form of two additional
arguments <var>F</var> and <var>words</var>, where <var>F</var> is a free group with the same number
of generators as <var>G</var>, and <var>words</var> is a list of words in the generators of
<var>F</var> which supply a list of generators of <var>H</var> if they are evaluated as
words in the corresponding generators of <var>G</var>.
<p>
<pre>
gap&gt; G := GeneralLinearGroup( 2, 7 );
GL(2,7)
gap&gt; GeneratorsOfGroup( G );
[ [ [ Z(7), 0*Z(7) ], [ 0*Z(7), Z(7)^0 ] ], 
  [ [ Z(7)^3, Z(7)^0 ], [ Z(7)^3, 0*Z(7) ] ] ]
gap&gt; Size( G );
2016
gap&gt; P := PresentationViaCosetTable( G );
&lt;presentation with 2 gens and 5 rels of total length 46&gt;
gap&gt; TzPrintRelators( P );
#I  1. f2^3
#I  2. f1^6
#I  3. f1^-1*f2^-1*f1^-1*f2^-1*f1^-1*f2^-1*f1^-1*f2^-1*f1^-1*f2^-1*f1^-1*f2^-1
#I  4. f1*f2*f1^-1*f2^-1*f1*f2^-1*f1^-1*f2*f1*f2^-1*f1^-1*f2^-1
#I  5. f1^-3*f2*f1*f2*f1^-1*f2^-1*f1^-1*f2^-1*f1^-2*f2
</pre>
<p>
The two stage algorithm saves an essential amount of space by
constructing two coset tables of lengths &#124;<i>H</i>&#124; and &#124;<i>G</i>&#124;/&#124;<i>H</i>&#124; instead of
just one coset table of length &#124;<i>G</i>&#124;. The next example shows an application
of this option in the case of a subgroup of size 7920 and index 12 in a
permutation group of size 95040.
<p>
<pre>
gap&gt; M12 := Group( [ (1,2,3,4,5,6,7,8,9,10,11), (3,7,11,8)(4,10,5,6),
&gt; (1,12)(2,11)(3,6)(4,8)(5,9)(7,10) ], () );;
gap&gt; F := FreeGroup( "a", "b", "c" );
&lt;free group on the generators [ a, b, c ]&gt;
gap&gt; words := [ F.1, F.2 ];
[ a, b ]
gap&gt; P := PresentationViaCosetTable( M12, F, words );
&lt;presentation with 3 gens and 10 rels of total length 97&gt;
gap&gt; G := FpGroupPresentation( P );
&lt;fp group on the generators [ a, b, c ]&gt;
gap&gt; RelatorsOfFpGroup( G );
[ c^2, b^4, a*c*a*c*a*c, a*b^-2*a*b^-2*a*b^-2, a^11, 
  a^2*b*a^-2*b^-2*a*b^-1*a^2*b^-1, a*b*a^-1*b*a^-1*b^-1*a*b*a^-1*b*a^-1*b^-1, 
  a^2*b*a^2*b^-2*a^-1*b*a^-1*b^-1*a^-1*b^-1, 
  a*b*a*b*a^2*b^-1*a^-1*b^-1*a*c*b*c, a^4*b*a^2*b*a^-2*c*a*b*a^-1*c ]
</pre>
<p>
Before it is returned, the resulting presentation is being simplified by
appropriate calls of the function <code>SimplifyPresentation</code> (see <a href="CHAP046.htm#SECT007">Tietze Transformations</a>), but without allowing any eliminations of generators.
This restriction guarantees that we get a bijection between the list of
generators of <var>G</var> and the list of generators in the presentation. Hence,
if the generators of <var>G</var> are redundant and if you don't care for the
bijection, you may get a shorter presentation by calling the function
<code>SimplifyPresentation</code>, now without this restriction, once more yourself.
<p>
<pre>
gap&gt; H := Group(
&gt; [ (2,5,3), (2,7,5), (1,8,4), (1,8,6), (4,8,6), (3,5,7) ], () );;
gap&gt; P := PresentationViaCosetTable( H );
&lt;presentation with 6 gens and 12 rels of total length 42&gt;
gap&gt; SimplifyPresentation( P );
#I  there are 4 generators and 10 relators of total length 36
</pre>
<p>
If you apply the function <code>FpGroupPresentation</code> to the resulting
presentation you will get a finitely presented group isomorphic to <var>G</var>.
Note, however, that the function <code>IsomorphismFpGroup</code> (see
<a href="CHAP045.htm#SSEC010.1">IsomorphismFpGroup</a>) is recommended for this purpose.
<p>
<p>
<h2><a name="SECT002">46.2 SimplifiedFpGroup</a></h2>
<p><p>
<a name = "SSEC002.1"></a>
<li><code>SimplifiedFpGroup( </code><var>G</var><code> ) F</code>
<p>
applies Tietze transformations to a copy of the presentation of the
given finitely presented group <var>G</var> in order to reduce it with respect to
the number of generators, the number of relators, and the relator
lengths.
<p>
<code>SimplifiedFpGroup</code> returns a group  isomorphic to the given one  with a
presentation which has been tried to simplify via Tietze
transformations.
<p>
If the connection to the original group is important, then the operation
<code>IsomorphismSimplifiedFpGroup</code> (see&nbsp;<a href="CHAP045.htm#SSEC011.1">IsomorphismSimplifiedFpGroup</a>) should
be used instead.
<pre>
gap&gt; F6 := FreeGroup( 6, "G" );;
gap&gt; G := F6 / [ F6.1^2, F6.2^2, F6.4*F6.6^-1, F6.5^2, F6.6^2,
&gt; F6.1*F6.2^-1*F6.3, F6.1*F6.5*F6.3^-1, F6.2*F6.4^-1*F6.3,
&gt; F6.3*F6.4*F6.5^-1, F6.1*F6.6*F6.3^-2, F6.3^4 ];;
gap&gt; H := SimplifiedFpGroup( G );
&lt;fp group on the generators [ G1, G3 ]&gt;
gap&gt; RelatorsOfFpGroup( H );
[ G1^2, G1*G3^-1*G1*G3^-1, G3^4 ]
</pre>
<p>
In fact, the command
<p>
<pre>
H := SimplifiedFpGroup( G );
</pre>
<p>
is an abbreviation of the command sequence
<p>
<pre>
P := PresentationFpGroup( G, 0 );;
SimplifyPresentation( P );
H := FpGroupPresentation( P );
</pre>
<p>
which applies a rather simple-minded strategy of Tietze transformations
to the intermediate presentation <var>P</var>.
If, for some concrete group, the resulting presentation is unsatisfying,
then you should try a more sophisticated, interactive use of the
available Tietze transformation commands (see <a href="CHAP046.htm#SECT007">Tietze Transformations</a>).
<p>
<p>
<h2><a name="SECT003">46.3 Subgroup Presentations</a></h2>
<p><p>
<a name = "I0"></a>

<a name = "SSEC003.1"></a>
<li><code>PresentationSubgroup( </code><var>G</var><code>, </code><var>H</var><code>[, </code><var>string</var><code>] ) F</code>
<p>
is a synonym for <code>PresentationSubgroupRrs(</code><var>G</var><code>,</code><var>H</var><code>[,</code><var>string</var><code>])</code>.
<p>
<a name = "SSEC003.2"></a>
<li><code>PresentationSubgroupRrs( </code><var>G</var><code>, </code><var>H</var><code> [, </code><var>string</var><code>] ) F</code>
<li><code>PresentationSubgroupRrs( </code><var>G</var><code>, </code><var>table</var><code> [, </code><var>string</var><code>] ) F</code>
<p>
uses the  Reduced Reidemeister-Schreier method to compute a presentation
<var>P</var>, say, for a subgroup <var>H</var> of a finitely presented group <var>G</var>. The
generators in the resulting presentation will be named <var>string</var>1,
<var>string</var>2, ... , the default string is <code>"_x"</code>.
You may access the <var>i</var>-th of these generators by <var>P</var>!.<var>i</var>.
<p>
Alternatively to the subgroup <var>H</var>, its coset table <var>table</var> in <var>G</var> may be
given as second argument.
<p>
<pre>
gap&gt; f := FreeGroup( "a", "b" );;
gap&gt; g := f / [ f.1^2, f.2^3, (f.1*f.2)^5 ];
&lt;fp group on the generators [ a, b ]&gt;
gap&gt; g1 := Size( g );
60
gap&gt; u := Subgroup( g, [ g.1, g.1^g.2 ] );
Group([ a, b^-1*a*b ])
gap&gt; p := PresentationSubgroup( g, u, "g" );
&lt;presentation with 3 gens and 4 rels of total length 12&gt;
gap&gt; gens := GeneratorsOfPresentation( p );
[ g1, g2, g3 ]
gap&gt; TzPrintRelators( p );
#I  1. g1^2
#I  2. g2^2
#I  3. g3*g2*g1
#I  4. g3^5
</pre>
<p>
Note that you cannot call the generators by their names. These names are
not variables, but just display figures. So, if you want to access the
generators by their names, you first will have to introduce the respective
variables and to assign the generators to them.
<p>
<pre>
gap&gt; gens[1] = g1;
false
gap&gt; g1;
60
gap&gt; g1 := gens[1];; g2 := gens[2];; g3 := gens[3];;
gap&gt; g1;
g1
</pre>
<p>
The Reduced Reidemeister-Schreier algorithm is a modification of the
Reidemeister-Schreier algorithm of George Havas <a href="biblio.htm#Hav74b"><cite>Hav74b</cite></a>. It was
proposed by Joachim Neub&uuml;ser and first implemented in 1986 by
Andrea Lucchini and Volkmar Felsch in the SPAS system <a href="biblio.htm#Spa89"><cite>Spa89</cite></a>. Like
the Reidemeister-Schreier algorithm of George Havas, it needs only the
presentation of <var>G</var> and a coset table of <var>H</var> in <var>G</var> to construct a
presentation of <var>H</var>.
<p>
Whenever you call the command <code>PresentationSubgroupRrs</code>, it first obtains
a coset table of <var>H</var> in <var>G</var> if not given. Next, a set of generators of <var>H</var>
is determined by reconstructing the coset table and introducing in that
process as many Schreier generators of <var>H</var> in <var>G</var> as are needed to do a
Felsch strategy coset enumeration without any coincidences. (In general,
though containing redundant generators, this set will be much smaller than
the set of all Schreier generators. That is why we call the method the
<strong>Reduced</strong> Reidemeister-Schreier.)
<p>
After having constructed this set of <strong>primary subgroup generators</strong>, say,
the coset table is extended to an <strong>augmented coset table</strong> which describes
the action of the group generators on coset representatives, i.e., on
elements instead of cosets. For this purpose, suitable words in the
(primary) subgroup generators have to be associated to the coset table
entries. In order to keep the lengths of these words short, additional
<strong>secondary subgroup generators</strong> are introduced as abbreviations of
subwords. Their number may be large.
<p>
Finally, a Reidemeister rewriting process is used to get defining
relators for <var>H</var> from the relators of <var>G</var>. As the resulting presentation
of <var>H</var> is a presentation on primary <strong>and</strong> secondary generators, in
general you will have to simplify it by appropriate Tietze
transformations (see <a href="CHAP046.htm#SECT007">Tietze Transformations</a>) or by the command
<code>DecodeTree</code> (see <a href="CHAP046.htm#SSEC011.1">DecodeTree</a>) before you can use it. Therefore it is
returned in the form of a presentation, <var>P</var> say.
<p>
Compared with the Modified Todd-Coxeter method described below, the
Reduced Reidemeister-Schreier method (as well as Havas' original
Reidemeister-Schreier program) has the advantage that it does not require
generators of <var>H</var> to be given if a coset table of <var>H</var> in <var>G</var> is known.
This provides a possibility to compute a presentation of the normal
closure of a given subgroup (see the <code>PresentationNormalClosureRrs</code>
command below).
<p>
For certain applications you may be interested in getting not only just a
presentation for <var>H</var>, but also a relation between the involved generators of
<var>H</var> and the generators of <var>G</var>. The subgroup generators in the presentation
are sorted such that the primary generators precede the secondary ones.
Moreover, for each secondary subgroup generator there is a relator in the
presentation which expresses this generator as a word in preceding ones.
Hence, all we need in addition is a list of words in the generators of <var>G</var>
which express the primary subgroup generators. In fact, such a list is
provided in the attribute <code>PrimaryGeneratorWords</code> of the resulting
presentation.
<p>
<a name = "SSEC003.3"></a>
<li><code>PrimaryGeneratorWords( </code><var>P</var><code> ) A</code>
<p>
is an attribute of the presentation <var>P</var> which holds a list of words in
the associated group generators (of the underlying free group) which
express the primary subgroup generators of <var>P</var>.
<p>
<pre>
gap&gt; PrimaryGeneratorWords( p );
[ a, b^-1*a*b ]
</pre>
<p>
<a name = "SSEC003.4"></a>
<li><code>PresentationSubgroupMtc( </code><var>G</var><code>, </code><var>H</var><code> [, </code><var>string</var><code>] [, </code><var>print level</var><code>] ) F</code>
<p>
uses the Modified Todd-Coxeter coset representative enumeration method
to compute a presentation <var>P</var>, say, for a subgroup <var>H</var> of a finitely
presented group <var>G</var>. The presentation returned is in generators
corresponding to the generators of <var>H</var>. The generators in the resulting
presentation will be named <var>string</var>1, <var>string</var>2, ... , the default string
is <code>"_x"</code>. You may access the <var>i</var>-th of these generators by <var>P</var>!.<var>i</var>.
<p>
The default print level is 1. If the print level is set to 0, then the
printout of the implicitly called function <code>DecodeTree</code> will be
suppressed.
<p>
<pre>
gap&gt; p := PresentationSubgroupMtc( g, u );
#I  there are 3 generators and 4 relators of total length 12
#I  there are 2 generators and 3 relators of total length 14
&lt;presentation with 2 gens and 3 rels of total length 14&gt;
</pre>
<p>
The so called Modified Todd-Coxeter method was proposed, in slightly
different forms, by Nathan S.&nbsp;Mendelsohn and William O.&nbsp;J.&nbsp;Moser in 1966.
Moser's method was proved in <a href="biblio.htm#BC76"><cite>BC76</cite></a>. It has been generalized to
cover a broad spectrum of different versions (see the survey <a href="biblio.htm#Neu82"><cite>Neu82</cite></a>).
<p>
The <code>Modified Todd-Coxeter</code> method performs an enumeration of coset
representatives. It proceeds like an ordinary coset enumeration (see
<a href="CHAP045.htm#SECT005">Coset Tables and Coset Enumeration</a>), but as the product of a coset
representative by a group generator or its inverse need not be a coset
representative itself, the Modified Todd-Coxeter has to store a kind of
correction element for each coset table entry. Hence it builds up a so
called <strong>augmented coset table</strong> of <var>H</var> in <var>G</var> consisting of the ordinary
coset table and a second table in parallel which contains the associated
subgroup elements.
<p>
Theoretically, these subgroup elements could be expressed as words in the
given generators of <var>H</var>, but in general these words tend to become
unmanageable because of their enormous lengths. Therefore, a highly
redundant list of subgroup generators is built up starting from the given
(``<strong>primary</strong>'') generators of <var>H</var> and adding additional
(``<strong>secondary</strong>'') generators which are defined as abbreviations of
suitable words of length two in the preceding generators such that each
of the subgroup elements in the augmented coset table can be expressed as
a word of length at most one in the resulting (primary <strong>and</strong> secondary)
subgroup generators.
<p>
Then a rewriting process (which is essentially a kind of Reidemeister
rewriting process) is used to get relators for <var>H</var> from the defining
relators of <var>G</var>.
<p>
The resulting presentation involves all the primary, but not all the
secondary generators of <var>H</var>. In fact, it contains only those secondary
generators which explicitly occur in the augmented coset table. If we
extended this presentation by those secondary generators which are not
yet contained in it as additional generators, and by the definitions of
all secondary generators as additional relators, we would get a
presentation of <var>H</var>, but, in general, we would end up with a large number
of generators and relators.
<p>
On the other hand, if we avoid this extension, the current presentation
will not necessarily define <var>H</var> although we have used the same rewriting
process which in the case of the <code>PresentationSubgroupRrs</code> command
computes a defining set of relators for <var>H</var> from an augmented coset table
and defining relators of <var>G</var>. The different behaviour here is caused by
the fact that coincidences may have occurred in the Modified Todd-Coxeter
coset enumeration.
<p>
To overcome this problem without extending the presentation by all
secondary generators, the <code>PresentationSubgroupMtc</code> command applies the
so called <strong>decoding tree</strong> algorithm which provides a more economical
approach. The reader is strongly recommended to carefully read section
<a href="CHAP046.htm#SSEC011.1">DecodeTree</a> where this algorithm is described in more detail. Here we
will only mention that this procedure may add a lot of intermediate
generators and relators (and even change the isomorphism type)
in a process which in fact eliminates all
secondary generators from the presentation and hence finally provides
a presentation of <var>H</var> on the primary, i.e., the originally given,
generators of <var>H</var>. This is a remarkable advantage of the command
<code>PresentationSubgroupMtc</code> compared to the command <code>PresentationSubgroupRrs</code>.
But note that, for some particular subgroup <var>H</var>, the Reduced
Reidemeister-Schreier method might quite well produce a more concise
presentation.
<p>
The resulting presentation is returned in the form of a presentation,
<var>P</var> say.
<p>
As the function <code>PresentationSubgroupRrs</code> described above (see there for
details), the function <code>PresentationSubgroupMtc</code> returns a list of the
primary subgroup generators of <var>H</var> in the attribute
<code>PrimaryGeneratorWords</code> of <var>P</var>. In fact, this list is not very exciting here
because it is just a shallow copy of the attribute value
<code>GeneratorsOfPresentation(H)</code>, however it is
needed to guarantee a certain consistency between the results of the
different functions for computing subgroup presentations.
<p>
Though the decoding tree routine already involves a lot of Tietze
transformations, we recommend that you try to further simplify the
resulting presentation by appropriate Tietze transformations (see <a href="CHAP046.htm#SECT007">Tietze Transformations</a>).
<p>
<a name = "SSEC003.5"></a>
<li><code>PresentationNormalClosureRrs( </code><var>G</var><code>, </code><var>H</var><code> [, </code><var>string</var><code>] ) F</code>
<p>
uses the Reduced Reidemeister-Schreier method to compute a presentation
<var>P</var>, say, for the normal closure of a subgroup <var>H</var> of a finitely
presented group <var>G</var>. The generators in the resulting presentation will
be named <var>string</var>1, <var>string</var>2, ... , the default string is <code>"_x"</code>.
You may access the <var>i</var>-th of these generators by <var>P</var>!.<var>i</var>. 
<p>
<a name = "SSEC003.6"></a>
<li><code>PresentationNormalClosure( </code><var>G</var><code>, </code><var>H</var><code>[, </code><var>string</var><code>] ) F</code>
<p>
is a synonym for <code>PresentationNormalClosureRrs(</code><var>G</var><code>,</code><var>H</var><code>[,</code><var>string</var><code>])</code>.
<p>
<p>
<h2><a name="SECT004">46.4 Relators in a Presentation</a></h2>
<p><p>
In order to speed up the Tietze transformation routines,
each relator in a presentation <var>P</var> is internally represented by a
list of positive or negative generator numbers, i.e., each factor of the
proper <font face="Gill Sans,Helvetica,Arial">GAP</font> word is represented by the position number of the
corresponding generator with respect to the current list of generators,
or by the respective negative number, if the factor is the inverse of a
generator. Note that the numbering of the generators in Tietze words is
always relative to a generator list and bears no relation to the internal
numbering of generators in a family of associative words.
<p>
<a name = "SSEC004.1"></a>
<li><code>TietzeWordAbstractWord( </code><var>word</var><code>, </code><var>fgens</var><code> ) F</code>
<p>
assumes  <var>fgens</var>  to be a  list  of  free group
generators  and  <var>word</var>  to be an abstract word  in these generators.  It
converts <var>word</var> into a Tietze word, i. e., a list of positive or negative
generator numbers.
<p>
This function simply calls <code>LetterRepAssocWord</code>.
<p>
<a name = "SSEC004.2"></a>
<li><code>AbstractWordTietzeWord( </code><var>word</var><code>, </code><var>fgens</var><code> ) F</code>
<p>
assumes  <var>fgens</var>  to be  a list  of  free group
generators and  <var>word</var> to be a Tietze word in these generators,  i. e., a
list of positive or negative generator numbers.  It converts <var>word</var> to an
abstract word.
<p>
This function simply calls <code>AssocWordByLetterRep</code>.
<p>
<pre>
gap&gt; F := FreeGroup( "a", "b", "c" ,"d");
&lt;free group on the generators [ a, b, c, d ]&gt;
gap&gt; tzword := TietzeWordAbstractWord(
&gt; Comm(F.4,F.2) * (F.3^2 * F.2)^-1, GeneratorsOfGroup( F ){[2,3,4]} );
[ -3, -1, 3, -2, -2 ]
gap&gt; AbstractWordTietzeWord( tzword, GeneratorsOfGroup( F ){[2,3,4]} );
d^-1*b^-1*d*c^-2
</pre>
<p>
<p>
<h2><a name="SECT005">46.5 Printing Presentations</a></h2>
<p><p>
Whenever you create a presentation <var>P</var>, say, or assign it to a variable,
<font face="Gill Sans,Helvetica,Arial">GAP</font> will respond by printing <var>P</var>. However, as <var>P</var> may contain a lot of
generators and many relators of large length, it would be annoying if the
standard print facilities displayed all this information in detail.
So they restrict the printout to just one line of text containing the number
of generators, the number of relators, and the total length of all relators
of <var>P</var>. As compensation, <font face="Gill Sans,Helvetica,Arial">GAP</font> offers some special print commands which
display various details of a presentation.
<p>
<a name = "SSEC005.1"></a>
<li><code>TzPrintGenerators( </code><var>P</var><code> [, </code><var>list</var><code>] ) F</code>
<p>
prints the generators of the given Tietze presentation <var>P</var> together with
the number of their occurrences in the relators. The optional second
argument can be used to specify the numbers of the generators to be
printed. Default: all generators are printed.
<p>
<pre>
gap&gt; G := Group( [ (1,2,3,4,5), (2,3,5,4), (1,6)(3,4) ], () );
Group([ (1,2,3,4,5), (2,3,5,4), (1,6)(3,4) ])
gap&gt; P := PresentationViaCosetTable( G );
&lt;presentation with 3 gens and 6 rels of total length 28&gt;
gap&gt; TzPrintGenerators( P );
#I  1.  f1   11 occurrences
#I  2.  f2   10 occurrences
#I  3.  f3   7 occurrences   involution
</pre>
<p>
<a name = "SSEC005.2"></a>
<li><code>TzPrintRelators( </code><var>P</var><code>[, </code><var>list</var><code>] ) F</code>
<p>
prints the relators of the given  Tietze presentation <var>P</var>.  The optional
second argument <var>list</var> can be used to specify the  numbers of the
relators to be printed.  Default: all relators are printed.
<p>
<pre>
gap&gt; TzPrintRelators( P );
#I  1. f3^2
#I  2. f2^4
#I  3. f2^-1*f3*f2^-1*f3
#I  4. f1^5
#I  5. f1^2*f2*f1*f2^-1
#I  6. f1^-1*f3*f1*f3*f1^-1*f2^2*f3
</pre>
<p>
<a name = "SSEC005.3"></a>
<li><code>TzPrintLengths( </code><var>P</var><code> ) F</code>
<p>
prints just a list of all relator lengths of the given presentation <var>P</var>.
<p>
<pre>
gap&gt; TzPrintLengths( P );
[ 2, 4, 4, 5, 5, 8 ]
</pre>
<p>
<a name = "SSEC005.4"></a>
<li><code>TzPrintStatus( </code><var>P</var><code> [, </code><var>norepeat</var><code> ] ) F</code>
<p>
is an internal function which is used by the Tietze transformation
routines to print the number of generators, the number of relators,
and the total length of all relators in the given Tietze presentation
<var>P</var>. If <var>norepeat</var> is specified as <code>true</code>, the printing is suppressed
if none of the three values has changed since the last call.
<p>
<pre>
gap&gt; TzPrintStatus( P );
#I  there are 3 generators and 6 relators of total length 28
</pre>
<p>
<a name = "SSEC005.5"></a>
<li><code>TzPrintPresentation( </code><var>P</var><code> ) F</code>
<p>
prints the generators and the relators of a Tietze presentation.
In fact, it is an abbreviation for the successive call of the three
commands <code>TzPrintGenerators(</code><var>P</var><code>)</code>, <code>TzPrintRelators(</code><var>P</var><code>)</code>, and
<code>TzPrintStatus(</code><var>P</var><code>)</code>.
<p>
<a name = "SSEC005.6"></a>
<li><code>TzPrint( </code><var>P</var><code> [, </code><var>list</var><code>] ) F</code>
<p>
prints the current generators of the given presentation <var>P</var>, and prints
the relators of <var>P</var> as Tietze words (without converting them back to
abstract words as the functions <code>TzPrintRelators</code> and
<code>TzPrintPresentation</code> do). The optional second argument can be used to
specify the numbers of the relators to be printed. Default: all relators
are printed.
<p>
<pre>
gap&gt; TzPrint( P );
#I  generators: [ f1, f2, f3 ]
#I  relators:
#I  1.  2  [ 3, 3 ]
#I  2.  4  [ 2, 2, 2, 2 ]
#I  3.  4  [ -2, 3, -2, 3 ]
#I  4.  5  [ 1, 1, 1, 1, 1 ]
#I  5.  5  [ 1, 1, 2, 1, -2 ]
#I  6.  8  [ -1, 3, 1, 3, -1, 2, 2, 3 ]
</pre>
<p>
<a name = "SSEC005.7"></a>
<li><code>TzPrintPairs( </code><var>P</var><code> [, </code><var>n</var><code>] ) F</code>
<p>
prints the <var>n</var> most often occurring relator subwords of the form
<i>a</i> <i>b</i>, where <i>a</i> and <i>b</i> are different generators or inverses of
generators, together with the number of their occurrences. The default
value of <var>n</var> is 10. A value <var>n</var> = 0 is interpreted as <code>infinity</code>.
<p>
The function <code>TzPrintPairs</code> is useful in the context of Tietze
transformations which introduce new generators by substituting words in
the current generators (see <a href="CHAP046.htm#SECT009">Tietze Transformations that introduce new Generators</a>). It gives some evidence for an appropriate choice of
a word of length 2 to be substituted.
<p>
<pre>
gap&gt; TzPrintPairs( P, 3 );
#I  1.  3  occurrences of  f2 * f3
#I  2.  2  occurrences of  f2^-1 * f3
#I  3.  2  occurrences of  f1 * f3
</pre>
<p>
Finally, there is a function <code>TzPrintOptions</code>. It is described in section
<a href="CHAP046.htm#SECT012">Tietze Options</a>.
<p>
<p>
<h2><a name="SECT006">46.6 Changing Presentations</a></h2>
<p><p>
The functions described in this section may be used to change a presentation.
Note, however, that in general they do not perform Tietze transformations
because they change or may change the isomorphism type of the group defined
by the presentation.
<p>
<a name = "SSEC006.1"></a>
<li><code>AddGenerator( </code><var>P</var><code> ) F</code>
<p>
extends the presentation <var>P</var> by a new generator.
<p>
Let <var>i</var> be the smallest positive integer which has not yet been used as
a generator number in the given presentation. <code>AddGenerator</code> defines a
new abstract generator <i>x</i><sub><i>i</i></sub> with the name <code>"_x</code><var>i</var><code>"</code> and adds it to the
list of generators of <var>P</var>.
<p>
You may access the generator <i>x</i><sub><i>i</i></sub> by typing <var>P</var>!.<var>i</var>. However, this
is only practicable if you are running an interactive job because you
have to know the value of <var>i</var>. Hence the proper way to access the new
generator is to write
<code>GeneratorsOfPresentation(P)[Length(GeneratorsOfPresentation(P))]</code>.
<p>
<pre>
gap&gt; G := PerfectGroup( 120 );;
gap&gt; H := Subgroup( G, [ G.1^G.2, G.3 ] );;
gap&gt; P := PresentationSubgroup( G, H );
&lt;presentation with 4 gens and 7 rels of total length 21&gt;
gap&gt; AddGenerator( P );
#I  now the presentation has 5 generators, the new generator is _x7
gap&gt; gens := GeneratorsOfPresentation( P );
[ _x1, _x2, _x4, _x5, _x7 ]
gap&gt; gen := gens[Length( gens )];
_x7
gap&gt; gen = P!.7;
true
</pre>
<p>
<a name = "SSEC006.2"></a>
<li><code>TzNewGenerator( </code><var>P</var><code> ) F</code>
<p>
is an internal function which defines a new abstract generator and
adds it to the presentation <var>P</var>. It is called by <code>AddGenerator</code> and
by several Tietze transformation commands. As it does not know which
global lists have to be kept consistent, you should not call it.
Instead, you should call the function <code>AddGenerator</code>, if needed.
<p>
<a name = "SSEC006.3"></a>
<li><code>AddRelator( </code><var>P</var><code>, </code><var>word</var><code> ) F</code>
<p>
adds the relator <var>word</var> to the presentation <var>P</var>, probably changing the
group defined by <var>P</var>. <var>word</var> must be an abstract word in the generators
of <var>P</var>.
<p>
<a name = "SSEC006.4"></a>
<li><code>RemoveRelator( </code><var>P</var><code>, </code><var>n</var><code> ) F</code>
<p>
removes the <var>n</var>-th relator from the presentation <var>P</var>, probably changing
the group defined by <var>P</var>.
<p>
<p>
<h2><a name="SECT007">46.7 Tietze Transformations</a></h2>
<p><p>
The commands in this section can be used to modify a presentation by Tietze
transformations.
<p>
In general, the aim of such modifications will be to <strong>simplify</strong> the given
presentation, i.e., to reduce the number of generators and the number of
relators without increasing too much the sum of all relator lengths which
we will call the <strong>total length</strong> of the presentation. Depending on the
concrete presentation under investigation one may end up with a nice,
short presentation or with a very huge one.
<p>
Unfortunately there is no algorithm which could be applied to find the
shortest presentation which can be obtained by Tietze transformations
from a given one. Therefore, what <font face="Gill Sans,Helvetica,Arial">GAP</font> offers are some lower-level
Tietze transformation commands and, in addition, some higher-level
commands which apply the lower-level ones in a kind of default strategy
which of course cannot be the optimal choice for all presentations.
<p>
The design of these commands follows closely the concept of the ANU
Tietze transformation program <a href="biblio.htm#Hav69"><cite>Hav69</cite></a> and its
later revisions (see <a href="biblio.htm#HKRR84"><cite>HKRR84</cite></a>, <a href="biblio.htm#Rob88"><cite>Rob88</cite></a>).
<p>
<a name = "SSEC007.1"></a>
<li><code>TzGo( </code><var>P</var><code> [, </code><var>silent</var><code>] ) F</code>
<p>
automatically performs suitable Tietze transformations of the given
presentation <var>P</var>. It is perhaps the most convenient one among the
interactive Tietze transformation commands. It offers a kind of default
strategy which, in general, saves you from explicitly calling the
lower-level commands it involves.
<p>
If <var>silent</var> is specified as <code>true</code>, the printing of the status line
by <code>TzGo</code> is suppressed if the Tietze option <code>printLevel</code> (see <a href="CHAP046.htm#SECT012">Tietze Options</a>) has a value less than 2.
<p>
<a name = "SSEC007.2"></a>
<li><code>SimplifyPresentation( </code><var>P</var><code> ) F</code>
<p>
is a synonym for <code>TzGo(</code><var>P</var><code>)</code>.
<p>
<pre>
gap&gt; F2 := FreeGroup( "a", "b" );;
gap&gt; G := F2 / [ F2.1^9, F2.2^2, (F2.1*F2.2)^4, (F2.1^2*F2.2)^3 ];;
gap&gt; a := G.1;; b := G.2;;
gap&gt; H := Subgroup( G, [ (a*b)^2, (a^-1*b)^2 ] );;
gap&gt; Index( G, H );
408
gap&gt; P := PresentationSubgroup( G, H );
&lt;presentation with 8 gens and 36 rels of total length 111&gt;
gap&gt; PrimaryGeneratorWords( P );
[ b, a*b*a ]
gap&gt; TzOptions( P ).protected := 2;
2
gap&gt; TzOptions( P ).printLevel := 2;
2
gap&gt; SimplifyPresentation( P );
#I  eliminating _x7 = _x5^-1
#I  eliminating _x5 = _x4
#I  eliminating _x18 = _x3
#I  eliminating _x8 = _x3
#I  there are 4 generators and 8 relators of total length 21
#I  there are 4 generators and 7 relators of total length 18
#I  eliminating _x4 = _x3^-1*_x2^-1
#I  eliminating _x3 = _x2*_x1^-1
#I  there are 2 generators and 4 relators of total length 14
#I  there are 2 generators and 4 relators of total length 13
#I  there are 2 generators and 3 relators of total length 9
gap&gt; TzPrintRelators( P );
#I  1. _x1^2
#I  2. _x2^3
#I  3. _x2*_x1*_x2*_x1
</pre>
<p>
Roughly speaking, <code>TzGo</code> consists of a loop over a
procedure which involves two phases: In the <strong>search phase</strong> it calls
<code>TzSearch</code> and <code>TzSearchEqual</code> described below which try to reduce the
relator lengths by substituting common subwords of relators, in the
<strong>elimination phase</strong> it calls the command <code>TzEliminate</code> described below
(or, more precisely, a subroutine of <code>TzEliminate</code> in order to save some
administrative overhead) which tries to eliminate generators that can be
expressed as words in the remaining generators.
<p>
If <code>TzGo</code> succeeds in reducing the number of generators,
the number of relators, or the total length of all relators, it
displays the new status before returning (provided that you did not set
the print level to zero). However, it does not provide any output if all
these three values have remained unchanged, even if the command
<code>TzSearchEqual</code> involved has changed the presentation such that another
call of <code>TzGo</code> might provide further progress. Hence, in such a
case it makes sense to repeat the call of the command for several times
(or to call the command <code>TzGoGo</code> instead).
<p>
<a name = "SSEC007.3"></a>
<li><code>TzGoGo( </code><var>P</var><code> ) F</code>
<p>
calls the command <code>TzGo</code> again and again until it does not reduce the
presentation any more.
<p>
The result of the Tietze transformations can be affected substantially by
the options parameters (see <a href="CHAP046.htm#SECT012">Tietze Options</a>). To demonstrate the effect
of the <code>eliminationsLimit</code> parameter, we will give an example in which we
handle a subgroup of index 240 in a group of order 40320 given by a
presentation due to B.&nbsp;H. Neumann.  First we construct a presentation of
the subgroup, and then we apply to it the command <code>TzGoGo</code> for different
values of the parameter <code>eliminationsLimit</code>
(including the default value 100). In fact, we also alter the
<code>printLevel</code> parameter, but this is only done in order to suppress most
of the output.  In all cases the resulting presentations cannot be
improved any more by applying the command <code>TzGoGo</code> again, i.e., they are
the best results which we can get without substituting new generators.
<p>
<pre>
gap&gt; F3 := FreeGroup( "a", "b", "c" );;
gap&gt; G := F3 / [ F3.1^3, F3.2^3, F3.3^3, (F3.1*F3.2)^5,
&gt; (F3.1^-1*F3.2)^5, (F3.1*F3.3)^4, (F3.1*F3.3^-1)^4,
&gt; F3.1*F3.2^-1*F3.1*F3.2*F3.3^-1*F3.1*F3.3*F3.1*F3.3^-1,
&gt; (F3.2*F3.3)^3, (F3.2^-1*F3.3)^4 ];;
gap&gt; a := G.1;; b := G.2;; c := G.3;;
gap&gt; H := Subgroup( G, [ a, c ] );;
gap&gt; for i in [ 61, 62, 63, 90, 97 ] do
&gt; Pi := PresentationSubgroup( G, H );
&gt; TzOptions( Pi ).eliminationsLimit := i;
&gt; Print("#I eliminationsLimit set to ",i,"\n");
&gt; TzOptions( Pi ).printLevel := 0;
&gt; TzGoGo( Pi );
&gt; TzPrintStatus( Pi );
&gt; od;
#I eliminationsLimit set to 61
#I  there are 2 generators and 104 relators of total length 7012
#I eliminationsLimit set to 62
#I  there are 2 generators and 7 relators of total length 56
#I eliminationsLimit set to 63
#I  there are 3 generators and 97 relators of total length 5998
#I eliminationsLimit set to 90
#I  there are 3 generators and 11 relators of total length 68
#I eliminationsLimit set to 97
#I  there are 4 generators and 109 relators of total length 3813
</pre>
<p>
Similarly, we demonstrate the influence of the <code>saveLimit</code> parameter by
just continuing the preceding example for some different values of the
<code>saveLimit</code> parameter (including its default value 10), but without
changing the <code>eliminationsLimit</code> parameter which keeps its default value
100.
<p>
<pre>
gap&gt; for i in [ 7 .. 11 ] do
&gt; Pi := PresentationSubgroup( G, H );
&gt; TzOptions( Pi ).saveLimit := i;
&gt; Print( "#I saveLimit set to ", i, "\n" );
&gt; TzOptions( Pi ).printLevel := 0;
&gt; TzGoGo( Pi );
&gt; TzPrintStatus( Pi );
&gt; od;
#I saveLimit set to 7
#I  there are 3 generators and 99 relators of total length 2713
#I saveLimit set to 8
#I  there are 2 generators and 103 relators of total length 11982
#I saveLimit set to 9
#I  there are 2 generators and 6 relators of total length 41
#I saveLimit set to 10
#I  there are 3 generators and 118 relators of total length 13713
#I saveLimit set to 11
#I  there are 3 generators and 11 relators of total length 58
</pre>
<p>
<p>
<h2><a name="SECT008">46.8 Elementary Tietze Transformations</a></h2>
<p><p>
<a name = "SSEC008.1"></a>
<li><code>TzEliminate( </code><var>P</var><code> ) F</code>
<li><code>TzEliminate( </code><var>P</var><code>, </code><var>gen</var><code> ) F</code>
<li><code>TzEliminate( </code><var>P</var><code>, </code><var>n</var><code> ) F</code>
<p>
tries to eliminate a generator from a presentation <var>P</var> via
Tietze transformations.
<p>
Any relator which contains some generator just once can be used to
substitute that generator by a word in the remaining generators. If such
generators and relators exist, then <code>TzEliminate</code> chooses a generator
for which the product of its number of occurrences and the length of the
substituting word is minimal, and then it eliminates this generator from
the presentation, provided that the resulting total length of the
relators does  not exceed the associated Tietze option parameter
<code>spaceLimit</code> (see <a href="CHAP046.htm#SECT012">Tietze Options</a>). The default value of that parameter
is <code>infinity</code>, but you may alter it appropriately.
<p>
If a generator <var>gen</var> has been specified, <code>TzEliminate</code> eliminates it if
possible, i. e. if there is a relator in which <var>gen</var> occurs just once.
If no second argument has been specified, <code>TzEliminate</code> eliminates some
appropriate generator if possible and if the resulting total length of
the relators will not exceed the parameter <code>lengthLimit</code>.
<p>
If an integer <var>n</var> has been specified, <code>TzEliminate</code> tries to eliminate
up to <var>n</var> generators. Note that the calls <code>TzEliminate(</code><var>P</var><code>)</code> and
<code>TzEliminate(</code><var>P</var><code>,1)</code> are equivalent.
<p>
<a name = "SSEC008.2"></a>
<li><code>TzSearch( </code><var>P</var><code> ) F</code>
<p>
searches for relator subwords which, in some relator, have a complement
of shorter length and which occur in other relators, too, and uses them
to reduce these other relators.
<p>
The idea is to find pairs of relators <i>r</i><sub>1</sub> and <i>r</i><sub>2</sub> of length <i>l</i><sub>1</sub>
and <i>l</i><sub>2</sub>, respectively, such that <i>l</i><sub>1</sub>  &#8804; <i>l</i><sub>2</sub> and <i>r</i><sub>1</sub> and <i>r</i><sub>2</sub>
coincide (possibly after inverting or conjugating one of them) in some
maximal subword <i>w</i>, say, of length greater than <i>l</i><sub>1</sub>/2, and then to
substitute each copy of <i>w</i> in <i>r</i><sub>2</sub> by the inverse complement of <i>w</i>
in <i>r</i><sub>1</sub>.
<p>
Two of the Tietze option parameters which are listed in section <a href="CHAP046.htm#SECT012">Tietze Options</a> may strongly influence the performance and the results of the
command <code>TzSearch</code>. These are the parameters <code>saveLimit</code> and
<code>searchSimultaneous</code>. The first of them has the following effect:
<p>
When <code>TzSearch</code> has finished its main loop over all relators, then, in
general, there are relators which have changed and hence should be
handled again in another run through the whole procedure. However,
experience shows that it really does not pay to continue this way until
no more relators change. Therefore, <code>TzSearch</code> starts a new loop only if
the loop just finished has reduced the total length of the relators by at
least <code>saveLimit</code> per cent.
<p>
The default value of <code>saveLimit</code> is 10 per cent.
<p>
To understand the effect of the option <code>searchSimultaneous</code>, we
have to look in more detail at how <code>TzSearch</code> proceeds:
<p>
First, it sorts the list of relators by increasing lengths. Then it
performs a loop over this list. In each step of this loop, the current
relator is treated as <strong>short relator</strong> <i>r</i><sub>1</sub>, and a subroutine is called
which loops over the succeeding relators, treating them as <strong>long
relators</strong>  <i>r</i><sub>2</sub>  and performing  the  respective  comparisons and
substitutions.
<p>
As this subroutine performs a very expensive process, it has been
implemented as a C routine in the <font face="Gill Sans,Helvetica,Arial">GAP</font> kernel. For the given relator
<i>r</i><sub>1</sub> of length <i>l</i><sub>1</sub>, say, it first determines the <strong>minimal match
length</strong> <i>l</i> which is <i>l</i><sub>1</sub>/2+1, if <i>l</i><sub>1</sub> is even, or (<i>l</i><sub>1</sub>+1)/2,
otherwise. Then it builds up a hash list for all subwords of length <i>l</i>
occurring in the conjugates of <i>r</i><sub>1</sub> or <i>r</i><sub>1</sub><sup>&#8722;1</sup>, and finally it loops
over all long relators <i>r</i><sub>2</sub> and compares the hash values of their
subwords of length <i>l</i> against this list. A comparison of subwords which
is much more expensive is only done if a hash match has been found.
<p>
To improve the efficiency of this process we allow the subroutine to
handle several short relators simultaneously provided that they have the
same minimal match length.  If, for example, it handles <i>n</i> short
relators simultaneously, then you save <i>n</i> &#8722; 1 loops over the long
relators <i>r</i><sub>2</sub>, but you pay for it by additional fruitless subword
comparisons. In general, you will not get the best performance by always
choosing the maximal possible number of short relators to be handled
simultaneously. In fact, the optimal choice of the number will depend on
the concrete presentation under investigation. You can use the parameter
<code>searchSimultaneous</code> to prescribe an upper bound for the number of
short relators to be handled simultaneously.
<p>
The default value of <code>searchSimultaneous</code> is 20.
<p>
<a name = "SSEC008.3"></a>
<li><code>TzSearchEqual( </code><var>P</var><code> ) F</code>
<p>
searches for Tietze relator subwords which, in some relator, have a
complement of equal length and which occur in other relators, too, and
uses them to modify these other relators.
<p>
The idea is to find pairs of relators <i>r</i><sub>1</sub> and <i>r</i><sub>2</sub> of length <i>l</i><sub>1</sub>
and <i>l</i><sub>2</sub>, respectively, such that <i>l</i><sub>1</sub> is even, <i>l</i><sub>1</sub>  &#8804; <i>l</i><sub>2</sub>, and
<i>r</i><sub>1</sub> and <i>r</i><sub>2</sub> coincide (possibly after inverting or conjugating one of
them) in some maximal subword <i>w</i>, say, of length at least <i>l</i><sub>1</sub>/2. Let
<i>l</i> be the length of <i>w</i>. Then, if <i>l</i>  &gt;  <i>l</i><sub>1</sub>/2, the pair is handled as
in <code>TzSearch</code>. Otherwise, if <i>l</i> = <i>l</i><sub>1</sub>/2, then <code>TzSearchEqual</code>
substitutes each copy of <i>w</i> in <i>r</i><sub>2</sub> by the inverse complement of <i>w</i>
in <i>r</i><sub>1</sub>.
<p>
The Tietze option parameter <code>searchSimultaneous</code> is used by <code>TzSearchEqual</code>
in the same way as described for <code>TzSearch</code>. However, <code>TzSearchEqual</code> does
not use the parameter <code>saveLimit</code>: The loop over the relators is executed
exactly once.
<p>
<a name = "SSEC008.4"></a>
<li><code>TzFindCyclicJoins( </code><var>P</var><code> ) F</code>
<p>
searches for  power and commutator relators in order
to find  pairs of generators  which  generate a  common  cyclic subgroup.
It uses these pairs to introduce new relators,  but it does not introduce
any new generators as is done by <code>TzSubstituteCyclicJoins</code> (see
<a href="CHAP046.htm#SSEC009.2">TzSubstituteCyclicJoins</a>).
<p>
More precisely: <code>TzFindCyclicJoins</code> searches for pairs of generators <i>a</i>
and <i>b</i> such that (possibly after inverting or conjugating some
relators) the set of relators contains the commutator [<i>a</i>,<i>b</i>], a power
<i>a</i><sup><i>n</i></sup>, and a product of the form <i>a</i><sup><i>s</i></sup> <i>b</i><sup><i>t</i></sup> with <i>s</i> prime to <i>n</i>. For
each such pair, <code>TzFindCyclicJoins</code> uses the Euclidian algorithm to
express <i>a</i> as a power of <i>b</i>, and then it eliminates <i>a</i>.
<p>
<p>
<h2><a name="SECT009">46.9 Tietze Transformations that introduce new Generators</a></h2>
<p><p>
Some of the Tietze transformation commands listed so far may eliminate
generators and hence change the given presentation to a presentation on a
subset of the given set of generators, but they all do <strong>not</strong> introduce
new generators. However, sometimes there will be the need to substitute
certain words as new generators in order to improve a presentation.
Therefore <font face="Gill Sans,Helvetica,Arial">GAP</font> offers the two commands <code>TzSubstitute</code> and
<code>TzSubstituteCyclicJoins</code> which introduce new generators.
<p>
<a name = "SSEC009.1"></a>
<li><code>TzSubstitute( </code><var>P</var><code>, </code><var>word</var><code> ) F</code>
<li><code>TzSubstitute( </code><var>P</var><code> [, </code><var>n</var><code> [, </code><var>eliminate</var><code> ] ] ) F</code>
<p>
In the first form <code>TzSubstitute</code> expects <var>P</var> to be a presentation and
<var>word</var> to be either an abstract word or a Tietze word in the generators
of <var>P</var>. It substitutes the given word as a new generator of <var>P</var>. This is
done as follows: First, <code>TzSubstitute</code> creates a new abstract generator,
<i>g</i> say, and adds it to the presentation, then it adds a new relator
<i>g</i><sup>&#8722;1</sup>&#183;<i>word</i> .
<p>
In its second form, <code>TzSubstitute</code> substitutes a squarefree word of
length 2 as a new generator and then eliminates a generator from the
extended generator list. We will describe this process in more detail
below.
<p>
The parameters <var>n</var> and <var>eliminate</var> are optional. If you specify
arguments for them, then <var>n</var> is expected to be a positive integer, and
<var>eliminate</var> is expected to be 0, 1, or 2. The default values are <i>n</i> = 1
and <i>eliminate</i> = 0.
<p>
<code>TzSubstitute</code> first determines the <var>n</var> most frequently occurring
relator subwords of the form <i>g</i><sub>1</sub> <i>g</i><sub>2</sub>, where <i>g</i><sub>1</sub> and <i>g</i><sub>2</sub> are
different generators or their inverses, and sorts them by decreasing
numbers of occurrences.
<p>
Let <i>a</i> <i>b</i> be the last word in that list, and let <var>i</var> be the smallest
positive integer which has not yet been used as a generator number in
the presentation <var>P</var> so far. <code>TzSubstitute</code> defines a new abstract
generator <i>x</i><sub><i>i</i></sub> named <code>"_x</code><var>i</var><code>"</code> and adds it to <var>P</var> (see <code>AddGenerator</code>).
Then it adds the word <i>x</i><sub><i>i</i></sub><sup>&#8722;1</sup> <i>a</i> <i>b</i> as a new relator to <var>P</var> and
replaces all occurrences of <i>a</i> <i>b</i> in the relators by <i>x</i><sub><i>i</i></sub>. Finally,
it eliminates some suitable generator from <var>P</var>.
<p>
The choice of the generator to be eliminated depends on the actual
value of the parameter <var>eliminate</var>:
<p>
If <var>eliminate</var> is zero, <code>TzSubstitute</code> just calls the function
<code>TzEliminate</code>. So it may happen that it is the just introduced generator
<i>x</i><sub><i>i</i></sub> which now is deleted again so that you don't get any
remarkable progress in simplifying your presentation. On the first
glance this does not look reasonable, but it is a consequence of the
request that a call of <code>TzSubstitute</code> with <var>eliminate</var> = 0 must not
increase the total length of the relators.
<p>
Otherwise, if <var>eliminate</var> is 1 or 2, <code>TzSubstitute</code> eliminates the
respective factor of the substituted word <i>a</i> <i>b</i>, i. e., it eliminates
<i>a</i> if <var>eliminate</var> = 1 or <i>b</i> if <var>eliminate</var> = 2. In this case, it may
happen that the total length of the relators increases, but sometimes
such an intermediate extension is the only way to finally reduce a given
presentation.
<p>
There is still another property of the command <code>TzSubstitute</code> which should
be mentioned. If, for instance, <code>word</code> is an abstract word, a call
<p>
<pre>
TzSubstitute( P, word );
</pre>
<p>
is more or less equivalent to
<p>
<pre>
AddGenerator( P );
g := GeneratorsOfPresentation(P)[Length(GeneratorsOfPresentation(P))];
AddRelator( P, g^-1 * word );
</pre>
<p>
However, there is a difference: If you are tracing generator images and
preimages of <var>P</var> through the Tietze transformations applied to <var>P</var> (see
<a href="CHAP046.htm#SECT010">Tracing generator images through Tietze transformations</a>), then
<code>TzSubstitute</code>, as a Tietze transformation of <var>P</var>, will update and save the
respective lists, whereas a call of the function <code>AddGenerator</code> (which does
not perform a Tietze transformation) will delete these lists and hence
terminate the tracing.
<p>
<pre>
gap&gt; G := PerfectGroup( IsSubgroupFpGroup, 960, 1 );
A5 2^4
gap&gt; P := PresentationFpGroup( G );
&lt;presentation with 6 gens and 21 rels of total length 84&gt;
gap&gt; GeneratorsOfPresentation( P );
[ a, b, s, t, u, v ]
gap&gt; TzGoGo( P );
#I  there are 3 generators and 10 relators of total length 81
#I  there are 3 generators and 10 relators of total length 80
gap&gt; TzPrintGenerators( P );
#I  1.  a   31 occurrences   involution
#I  2.  b   26 occurrences
#I  3.  t   23 occurrences   involution
gap&gt; a := GeneratorsOfPresentation( P )[1];;
gap&gt; b := GeneratorsOfPresentation( P )[2];;
gap&gt; TzSubstitute( P, a*b );
#I  now the presentation has 4 generators, the new generator is _x7
#I  substituting new generator _x7 defined by a*b
#I  there are 4 generators and 11 relators of total length 83
gap&gt; TzGo( P );
#I  there are 3 generators and 10 relators of total length 74
gap&gt; TzPrintGenerators( P );
#I  1.  a   23 occurrences   involution
#I  2.  t   23 occurrences   involution
#I  3.  _x7   28 occurrences
</pre>
<p>
As an example of an application of the command <code>TzSubstitute</code> in its second
form we handle a subgroup of index 266 in the Janko group <i>J</i><sub>1</sub>.
<p>
<pre>
gap&gt; F2 := FreeGroup( "a", "b" );;
gap&gt; J1 := F2 / [ F2.1^2, F2.2^3, (F2.1*F2.2)^7,
&gt; Comm(F2.1,F2.2)^10, Comm(F2.1,F2.2^-1*(F2.1*F2.2)^2)^6 ];;
gap&gt; a := J1.1;; b := J1.2;;
gap&gt; H := Subgroup ( J1, [ a, b^(a*b*(a*b^-1)^2) ] );;
gap&gt; P := PresentationSubgroup( J1, H );
&lt;presentation with 23 gens and 82 rels of total length 530&gt;
gap&gt; TzGoGo( P );
#I  there are 3 generators and 47 relators of total length 1368
#I  there are 2 generators and 46 relators of total length 3773
#I  there are 2 generators and 46 relators of total length 2570
gap&gt; TzGoGo( P );
#I  there are 2 generators and 46 relators of total length 2568
gap&gt; TzGoGo( P );
</pre>
<p>
Here we do not get any more progress without substituting a new generator.
<p>
<pre>
gap&gt; TzSubstitute( P );
#I  substituting new generator _x28 defined by _x6*_x23^-1
#I  eliminating _x28 = _x6*_x23^-1
</pre>
<p>
<font face="Gill Sans,Helvetica,Arial">GAP</font> cannot substitute a new generator without extending the total length,
so we have to explicitly ask for it by using the second form of the command
<code>TzSubstitute</code>. Our problem is to chose appropriate values for the arguments
<var>n</var> and <var>eliminate</var>. For this purpose it may be helpful to print out a list
of the most frequently occurring squarefree relator subwords of length 2.
<p>
<pre>
gap&gt; TzPrintPairs( P );
#I  1.  504  occurrences of  _x6 * _x23^-1
#I  2.  504  occurrences of  _x6^-1 * _x23
#I  3.  448  occurrences of  _x6 * _x23
#I  4.  448  occurrences of  _x6^-1 * _x23^-1
gap&gt; TzSubstitute( P, 2, 1 );
#I  substituting new generator _x29 defined by _x6^-1*_x23
#I  eliminating _x6 = _x23*_x29^-1
#I  there are 2 generators and 46 relators of total length 2867
gap&gt; TzGoGo( P );
#I  there are 2 generators and 45 relators of total length 2417
#I  there are 2 generators and 45 relators of total length 2122
gap&gt; TzSubstitute( P, 1, 2 );
#I  substituting new generator _x30 defined by _x23*_x29^-1
#I  eliminating _x29 = _x30^-1*_x23
#I  there are 2 generators and 45 relators of total length 2192
gap&gt; TzGoGo( P );
#I  there are 2 generators and 42 relators of total length 1637
#I  there are 2 generators and 40 relators of total length 1286
#I  there are 2 generators and 36 relators of total length 807
#I  there are 2 generators and 32 relators of total length 625
#I  there are 2 generators and 22 relators of total length 369
#I  there are 2 generators and 18 relators of total length 213
#I  there are 2 generators and 13 relators of total length 141
#I  there are 2 generators and 12 relators of total length 121
#I  there are 2 generators and 10 relators of total length 101
gap&gt; TzPrintPairs( P );
#I  1.  19  occurrences of  _x23 * _x30^-1
#I  2.  19  occurrences of  _x23^-1 * _x30
#I  3.  14  occurrences of  _x23 * _x30
#I  4.  14  occurrences of  _x23^-1 * _x30^-1
</pre>
<p>
If we save a copy of the current presentation, then later we will be able to
restart the computation from the current state.
<p>
<pre>
gap&gt; P1 := ShallowCopy( P );
&lt;presentation with 2 gens and 10 rels of total length 101&gt;
</pre>
<p>
Just for demonstration we make an inconvenient choice:
<p>
<pre>
gap&gt; TzSubstitute( P, 3, 1 );
#I  substituting new generator _x31 defined by _x23*_x30
#I  eliminating _x23 = _x31*_x30^-1
#I  there are 2 generators and 10 relators of total length 122
gap&gt; TzGoGo( P );
#I  there are 2 generators and 9 relators of total length 105
</pre>
<p>
This presentation is worse than the one we have saved, so we restart from
that presentation again.
<p>
<pre>
gap&gt; P := ShallowCopy( P1 );
&lt;presentation with 2 gens and 10 rels of total length 101&gt;
gap&gt; TzSubstitute( P, 2, 1);
#I  substituting new generator _x31 defined by _x23^-1*_x30
#I  eliminating _x23 = _x30*_x31^-1
#I  there are 2 generators and 10 relators of total length 107
gap&gt; TzGoGo( P );
#I  there are 2 generators and 9 relators of total length 84
#I  there are 2 generators and 8 relators of total length 75
gap&gt; TzSubstitute( P, 2, 1);
#I  substituting new generator _x32 defined by _x30^-1*_x31
#I  eliminating _x30 = _x31*_x32^-1
#I  there are 2 generators and 8 relators of total length 71
gap&gt; TzGoGo( P );
#I  there are 2 generators and 7 relators of total length 56
#I  there are 2 generators and 5 relators of total length 36
gap&gt; TzPrintRelators( P );
#I  1. _x32^5
#I  2. _x31^5
#I  3. _x31^-1*_x32^-1*_x31^-1*_x32^-1*_x31^-1*_x32^-1
#I  4. _x31*_x32*_x31^-1*_x32*_x31^-1*_x32*_x31*_x32^-2
#I  5. _x31^-1*_x32^2*_x31*_x32^-1*_x31^2*_x32^-1*_x31*_x32^2
</pre>
<p>
<a name = "SSEC009.2"></a>
<li><code>TzSubstituteCyclicJoins( </code><var>P</var><code> ) F</code>
<p>
tries to find pairs of commuting generators <i>a</i> and <i>b</i>, say, such that
the exponent of <i>a</i> (i. e. the least currently known positive integer
<i>n</i> such that <i>a</i><sup><i>n</i></sup> is a relator in <var>P</var>) is prime to the exponent of
<i>b</i>. For each such pair, their product <i>a</i> <i>b</i> is substituted as a new
generator, and <i>a</i> and <i>b</i> are eliminated.
<p>
<p>
<h2><a name="SECT010">46.10 Tracing generator images through Tietze transformations</a></h2>
<p><p>
Any sequence of Tietze transformations applied to a presentation, starting
from some presentation <i>P</i><sub>1</sub> and ending up with some presentation <i>P</i><sub>2</sub>,
defines an  isomorphism, &#981; say, between the groups defined by <i>P</i><sub>1</sub>
and <i>P</i><sub>2</sub>, respectively. Sometimes it is desirable to know the images of the
(old) generators of <i>P</i><sub>1</sub> or the preimages of the (new) generators of <i>P</i><sub>2</sub>
under &#981;. The <font face="Gill Sans,Helvetica,Arial">GAP</font> Tietze transformation functions are able to trace
these images. This is not automatically done because the involved words may
grow to tremendous length, but it will be done if you  explicitly  request
for it by calling the function <code>TzInitGeneratorImages</code>.
<p>
<a name = "SSEC010.1"></a>
<li><code>TzInitGeneratorImages( </code><var>P</var><code> ) F</code>
<p>
expects <var>P</var> to be a presentation. It defines the current generators to
be the ``old generators'' of <var>P</var> and initializes the (pre)image tracing.
See <code>TzImagesOldGens</code> and <code>TzPreImagesNewGens</code> for details.
<p>
You can reinitialize the tracing of the generator images at any later
state by just calling the function <code>TzInitGeneratorImages</code> again.
<p>
Note: A subsequent call of the function <code>DecodeTree</code> will imply that the
images and preimages are deleted and reinitialized after decoding the
tree.
<p>
Moreover, if you introduce a new generator by calling the function
<code>AddGenerator</code> described in section <a href="CHAP046.htm#SECT006">Changing Presentations</a>, this
new generator cannot be traced in the old generators. Therefore
<code>AddGenerator</code> will terminate the tracing of the generator images and
preimages and delete the respective lists whenever it is called.
<p>
<a name = "SSEC010.2"></a>
<li><code>OldGeneratorsOfPresentation( </code><var>P</var><code> ) F</code>
<p>
assumes that <var>P</var> is a presentation for which the generator images
and preimages are being traced under Tietze transformations. It
returns the list of old generators of <var>P</var>.
<p>
<a name = "SSEC010.3"></a>
<li><code>TzImagesOldGens( </code><var>P</var><code> ) F</code>
<p>
assumes that <var>P</var> is a presentation for which the generator images
and preimages are being traced under Tietze transformations. It
returns a list <var>l</var> of words in the (current) generators
<code>GeneratorsOfPresentation(</code><var>P</var><code>)</code> of <var>P</var> such that the <var>i</var>-th word
<code></code><var>l</var><code>[</code><var>i</var><code>]</code> represents the <var>i</var>-th old generator
<code>OldGeneratorsOfPresentation(</code><var>P</var><code>)[</code><var>i</var><code>]</code> of <var>P</var>.
<p>
<a name = "SSEC010.4"></a>
<li><code>TzPreImagesNewGens( </code><var>P</var><code> ) F</code>
<p>
assumes that <var>P</var> is a presentation for which the generator images
and preimages are being traced under Tietze transformations. It
returns a list <var>l</var> of words in the old generators
<code>OldGeneratorsOfPresentation(</code><var>P</var><code>)</code> of <var>P</var> such that the <var>i</var>-th word
<code></code><var>l</var><code>[</code><var>i</var><code>]</code> represents the <var>i</var>-th (current) generator
<code>GeneratorsOfPresentation(</code><var>P</var><code>)[</code><var>i</var><code>]</code> of <var>P</var>.
<p>
<a name = "SSEC010.5"></a>
<li><code>TzPrintGeneratorImages( </code><var>P</var><code> ) F</code>
<p>
assumes that <var>P</var> is a presentation for which the generator images
and preimages are being traced under Tietze transformations. It
displays the preimages of the current generators as Tietze words in
the old generators, and the images of the old generators as Tietze
words in the current generators.
<p>
<pre>
gap&gt; G := PerfectGroup( IsSubgroupFpGroup, 960, 1 );
A5 2^4
gap&gt; P := PresentationFpGroup( G );
&lt;presentation with 6 gens and 21 rels of total length 84&gt;
gap&gt; TzInitGeneratorImages( P );
gap&gt; TzGo( P );
#I  there are 3 generators and 11 relators of total length 96
#I  there are 3 generators and 10 relators of total length 81
gap&gt; TzPrintGeneratorImages( P );
#I  preimages of current generators as Tietze words in the old ones:
#I  1. [ 1 ]
#I  2. [ 2 ]
#I  3. [ 4 ]
#I  images of old generators as Tietze words in the current ones:
#I  1. [ 1 ]
#I  2. [ 2 ]
#I  3. [ 1, -2, 1, 3, 1, 2, 1 ]
#I  4. [ 3 ]
#I  5. [ -2, 1, 3, 1, 2 ]
#I  6. [ 1, 3, 1 ]
gap&gt; gens := GeneratorsOfPresentation( P );
[ a, b, t ]
gap&gt; oldgens := OldGeneratorsOfPresentation( P );
[ a, b, s, t, u, v ]
gap&gt; TzImagesOldGens( P );
[ a, b, a*b^-1*a*t*a*b*a, t, b^-1*a*t*a*b, a*t*a ]
gap&gt; for i in [ 1 .. Length( oldgens ) ] do
&gt; Print( oldgens[i], " = ", TzImagesOldGens( P )[i], "\n" );
&gt; od;
a = a
b = b
s = a*b^-1*a*t*a*b*a
t = t
u = b^-1*a*t*a*b
v = a*t*a
</pre>
<p>
<p>
<h2><a name="SECT011">46.11 DecodeTree</a></h2>
<p><p>
<a name = "SSEC011.1"></a>
<li><code>DecodeTree( </code><var>P</var><code> ) F</code>
<p>
assumes that <var>P</var> is a subgroup presentation provided by the Reduced
Reidemeister-Schreier or by the Modified Todd-Coxeter method (see
<code>PresentationSubgroupRrs</code>, <code>PresentationNormalClosureRrs</code>,
<code>PresentationSubgroupMtc</code> in section <a href="CHAP046.htm#SECT003">Subgroup Presentations</a>).
It eliminates the secondary generators of <var>P</var> (see <a href="CHAP046.htm#SECT003">Subgroup Presentations</a>) by applying the so called ``decoding tree'' procedure.
<p>
<code>DecodeTree</code> is called automatically by the command
<code>PresentationSubgroupMtc</code> (see <a href="CHAP046.htm#SSEC003.4">PresentationSubgroupMtc</a>) where it
reduces <var>P</var> to a presentation on the given (primary) subgroup
generators.
<p>
<a name = "I1"></a>

In order to explain the effect of this command we need to insert a few
remarks on the subgroup presentation commands described in section
<a href="CHAP046.htm#SECT003">Subgroup Presentations</a>. All these commands have the common property
that in the process of constructing a presentation for a given subgroup
<var>H</var> of a finitely presented group <var>G</var> they first build up a highly
redundant list of generators of <var>H</var> which consists of an (in general
small) list of ``primary'' generators, followed by an (in general
large) list of ``secondary'' generators, and then construct a
presentation <i>P</i><sub>0</sub>, say, <strong>on a sublist of these generators</strong> by rewriting
the defining relators of <var>G</var>. This sublist contains all primary, but, at
least in general, by far not all secondary generators.
<a name = "I2"></a>

<p>
The role of the primary generators depends on the concrete choice of the
subgroup presentation command. If the Modified Todd-Coxeter method is
used, they are just the given generators of <var>H</var>, whereas in the case of
the Reduced Reidemeister-Schreier algorithm they are constructed by the
program.
<p>
Each of the secondary generators is defined by a word of length two in
the preceding generators and their inverses. By historical reasons, the
list of these definitions is called the <strong>subgroup generators tree</strong>
though in fact it is not a tree but rather a kind of bush.
<a name = "I3"></a>

<p>
Now we have to distinguish two cases. If <i>P</i><sub>0</sub> has been constructed by
the Reduced Reidemeister-Schreier routines, it is a presentation of
<var>H</var>. However, if the Modified Todd-Coxeter routines have been used
instead, then the relators in <i>P</i><sub>0</sub> are valid relators of <var>H</var>, but they
do not necessarily define <var>H</var>. We handle these cases in turn, starting
with the latter one.
<p>
In fact, we could easily receive a presentation of <var>H</var> also in this case
if we extended <i>P</i><sub>0</sub> by adding to it all the secondary generators which
are not yet contained in it and all the definitions from the generators
tree as additional generators and relators. Then we could recursively
eliminate all secondary generators by Tietze transformations using the
new relators. However, this procedure turns out to be too inefficient to
be of interest.
<p>
Instead, we use the so called <strong>decoding tree</strong> procedure (see <a href="biblio.htm#AMW82"><cite>AMW82</cite></a>,
<a href="biblio.htm#AR84"><cite>AR84</cite></a>). It proceeds as follows.
<p>
Starting from <i>P</i> = <i>P</i><sub>0</sub>, it runs through a number of steps in each of
which it eliminates the current ``last'' generator (with respect to
the list of all primary and secondary generators). If the last generator
<var>g</var>, say, is a primary generator, then the procedure terminates. Otherwise
it checks whether there is a relator in the current presentation which
can be used to substitute <var>g</var> by a Tietze transformation. If so, this is
done. Otherwise, and only then, the tree definition of <var>g</var> is added to
<var>P</var> as a new relator, and the generators involved are added as new
generators if they have not yet been contained in <var>P</var>. Subsequently, <var>g</var>
is eliminated.
<p>
Note that the extension of <var>P</var> by one or two new generators is <strong>not</strong> a
Tietze transformation. In general, it will change the isomorphism type
of the group defined by <var>P</var>. However, it is a remarkable property of
this procedure, that at the end, i.e., as soon as all secondary
generators have been eliminated, it provides a presentation <i>P</i> = <i>P</i><sub>1</sub>,
say, which defines a group isomorphic to <var>H</var>. In fact, it is this
presentation which is returned by the command <code>DecodeTree</code> and hence by
the command <code>PresentationSubgroupMtc</code>.
<p>
If, in the other case, the presentation <i>P</i><sub>0</sub> has been constructed by the
Reduced Reidemeister-Schreier algorithm, then <i>P</i><sub>0</sub> itself is a
presentation of <var>H</var>, and the corresponding subgroup presentation command
(<code>PresentationSubgroupRrs</code> or <code>PresentationNormalClosureRrs</code>) just
returns <i>P</i><sub>0</sub>.
<p>
As mentioned in section <a href="CHAP046.htm#SECT003">Subgroup Presentations</a>, we recommend to further
simplify this presentation before you use it. The standard way to do
this is to start from <i>P</i><sub>0</sub> and to apply suitable Tietze transformations,
e.g., by calling the commands <code>TzGo</code> or <code>TzGoGo</code>. This is probably the
most efficient approach, but you will end up with a presentation on some
unpredictable set of generators. As an alternative, <font face="Gill Sans,Helvetica,Arial">GAP</font> offers you
the <code>DecodeTree</code> command which you can use to eliminate all secondary
generators (provided that there are no space or time problems). For this
purpose, the subgroup presentation commands do not only return the
resulting presentation, but also the tree (together with some associated
lists) as a kind of side result in a component <code></code><var>P</var><code>!.tree</code> of the
resulting presentation <var>P</var>.
<p>
Note, however, that the decoding tree routines will not work correctly
any more on a presentation from which generators have already been
eliminated by Tietze transformations. Therefore, to prevent you from
getting wrong results by calling the <code>DecodeTree</code> command in such a
situation, <font face="Gill Sans,Helvetica,Arial">GAP</font> will automatically remove the subgroup generators tree
from a presentation as soon as one of the generators is substituted by a
Tietze transformation.
<p>
Nevertheless, a certain misuse of the command is still possible, and we
want to explicitly warn you from this. The reason is that the Tietze
option parameters described in section <a href="CHAP046.htm#SECT007">Tietze Transformations</a> apply to
the <code>DecodeTree</code> command as well. Hence, in case of inadequate values of
these parameters, it may happen that the <code>DecodeTree</code> routine stops
before all the secondary generators have vanished. In this case <font face="Gill Sans,Helvetica,Arial">GAP</font>
will display an appropriate warning. Then you should change the
respective parameters and continue the process by calling the
<code>DecodeTree</code> command again. Otherwise, if you would apply Tietze
transformations, it might happen because of the convention described
above that the tree is removed and that you end up with a wrong
presentation.
<p>
After a successful run of the <code>DecodeTree</code> command it is convenient to
further simplify the resulting presentation by suitable Tietze
transformations.
<p>
As an example of an explicit call of the <code>DecodeTree</code> command we compute
two presentations of a subgroup of order 384 in a group of order
6912. In both cases we use the Reduced Reidemeister-Schreier
algorithm, but in the first run we just apply the Tietze transformations
offered by the <code>TzGoGo</code> command with its default parameters, whereas in
the second run we call the <code>DecodeTree</code> command before.
<p>
<pre>
gap&gt; F2 := FreeGroup( "a", "b" );;
gap&gt; G := F2 / [ F2.1*F2.2^2*F2.1^-1*F2.2^-1*F2.1^3*F2.2^-1,
&gt;                F2.2*F2.1^2*F2.2^-1*F2.1^-1*F2.2^3*F2.1^-1 ];;
gap&gt; a := G.1;;  b := G.2;;
gap&gt; H := Subgroup( G, [ Comm(a^-1,b^-1), Comm(a^-1,b), Comm(a,b) ] );;
</pre>
<p>
We use the Reduced Reidemeister Schreier method and default Tietze
transformations to get a presentation for <var>H</var>.
<p>
<pre>
gap&gt; P := PresentationSubgroupRrs( G, H );
&lt;presentation with 18 gens and 35 rels of total length 169&gt;
gap&gt; TzGoGo( P );
#I  there are 3 generators and 20 relators of total length 488
#I  there are 3 generators and 20 relators of total length 466
</pre>
<p>
We end up with 20 relators of total length 466. Now we repeat the
procedure, but we call the decoding tree algorithm before doing the Tietze
transformations.
<p>
<pre>
gap&gt; P := PresentationSubgroupRrs( G, H );
&lt;presentation with 18 gens and 35 rels of total length 169&gt;
gap&gt; DecodeTree( P );
#I  there are 9 generators and 26 relators of total length 185
#I  there are 6 generators and 23 relators of total length 213
#I  there are 3 generators and 20 relators of total length 252
#I  there are 3 generators and 20 relators of total length 244
gap&gt; TzGoGo( P );
#I  there are 3 generators and 19 relators of total length 168
#I  there are 3 generators and 17 relators of total length 138
#I  there are 3 generators and 15 relators of total length 114
#I  there are 3 generators and 13 relators of total length 96
#I  there are 3 generators and 12 relators of total length 84
</pre>
<p>
This time we end up with a shorter presentation.
<p>
As an example of an implicit call of the function <code>DecodeTree</code> via the
command <code>PresentationSubgroupMtc</code> we handle a subgroup of index 240 in a
group of order 40320 given by a presentation due to B.&nbsp;H.&nbsp;Neumann. Note
that we increase the FpGroup info level to get some additional output.
<p>
<pre>
gap&gt; F3 := FreeGroup( "a", "b", "c" );;
gap&gt; a := F3.1;;  b := F3.2;;  c := F3.3;;
gap&gt; G := F3 / [ a^3, b^3, c^3, (a*b)^5, (a^-1*b)^5, (a*c)^4,
&gt;     (a*c^-1)^4, a*b^-1*a*b*c^-1*a*c*a*c^-1, (b*c)^3, (b^-1*c)^4 ];;
gap&gt; a := G.1;;  b := G.2;;  c := G.3;;
gap&gt; H := Subgroup( G, [ a, c ] );;
gap&gt; SetInfoLevel( InfoFpGroup, 1 );
gap&gt; P := PresentationSubgroupMtc( G, H );;
#I  index = 240  total = 4737  max = 4507
#I  MTC defined 2 primary and 4444 secondary subgroup generators
#I  there are 246 generators and 617 relators of total length 2893
#I  calling DecodeTree
#I  there are 114 generators and 385 relators of total length 1860
#I  there are 69 generators and 294 relators of total length 1855
#I  there are 43 generators and 235 relators of total length 2031
#I  there are 35 generators and 207 relators of total length 2348
#I  there are 25 generators and 181 relators of total length 3055
#I  there are 19 generators and 165 relators of total length 3290
#I  there are 20 generators and 160 relators of total length 5151
#I  there are 23 generators and 159 relators of total length 8177
#I  there are 25 generators and 159 relators of total length 12241
#I  there are 29 generators and 159 relators of total length 18242
#I  there are 34 generators and 159 relators of total length 27364
#I  there are 38 generators and 159 relators of total length 41480
#I  there are 41 generators and 159 relators of total length 62732
#I  there are 45 generators and 159 relators of total length 88872
#I  there are 46 generators and 159 relators of total length 111092
#I  there are 44 generators and 155 relators of total length 158181
#I  there are 32 generators and 155 relators of total length 180478
#I  there are 7 generators and 133 relators of total length 29897
#I  there are 4 generators and 119 relators of total length 28805
#I  there are 3 generators and 116 relators of total length 35209
#I  there are 2 generators and 111 relators of total length 25658
#I  there are 2 generators and 111 relators of total length 22634
gap&gt; TzGoGo( P );
#I  there are 2 generators and 108 relators of total length 11760
#I  there are 2 generators and 95 relators of total length 6482
#I  there are 2 generators and 38 relators of total length 1464
#I  there are 2 generators and 8 relators of total length 116
#I  there are 2 generators and 7 relators of total length 76
#I  there are 2 generators and 6 relators of total length 66
#I  there are 2 generators and 6 relators of total length 52
gap&gt; TzPrintGenerators( P );
#I  1.  _x1   26 occurrences
#I  2.  _x2   26 occurrences
gap&gt; TzPrint( P );
#I  generators: [ _x1, _x2 ]
#I  relators:
#I  1.  3  [ 1, 1, 1 ]
#I  2.  3  [ 2, 2, 2 ]
#I  3.  8  [ 2, -1, 2, -1, 2, -1, 2, -1 ]
#I  4.  8  [ 2, 1, 2, 1, 2, 1, 2, 1 ]
#I  5.  14  [ -1, -2, 1, 2, 1, -2, -1, 2, 1, -2, -1, -2, 1, 2 ]
#I  6.  16  [ 1, 2, 1, -2, 1, 2, 1, -2, 1, 2, 1, -2, 1, 2, 1, -2 ]
gap&gt; K :=  FpGroupPresentation( P );
&lt;fp group on the generators [ _x1, _x2 ]&gt;
gap&gt; SetInfoLevel( InfoFpGroup, 0 );
gap&gt; Size( K );
168
</pre>
<p>
<p>
<h2><a name="SECT012">46.12 Tietze Options</a></h2>
<p><p>
Several of the Tietze transformation commands described above are
controlled by certain parameters, the <strong>Tietze options</strong>, which often have
a tremendous influence on their performance and results.  However, in
each application of the commands, an appropriate choice of these option
parameters will depend on the concrete presentation under investigation.
Therefore we have implemented the Tietze options in such a way that they
are associated to the presentation: Each presentation
keeps its own set of Tietze option parameters as an attribute.
<p>
<a name = "SSEC012.1"></a>
<li><code>TzOptions( </code><var>P</var><code> ) AM</code>
<p>
is a record whose components direct the heuristics applied by the Tietze
transformation functions.
<p>
You may alter the value of any of these Tietze options by just assigning
a new value to the respective record component.
<p>
The following Tietze options are recognized by <font face="Gill Sans,Helvetica,Arial">GAP</font>:
<p>
<p>
<dl compact>
<dt><code>protected</code>:<dd>
  The first <code>protected</code> generators in a presentation <var>P</var> are
  protected from being eliminated by the Tietze transformations
  functions.  There are only  two exceptions:  The option
  <code>protected</code>   is   ignored   by   the   functions
  <code>TzEliminate(</code><var>P</var><code>,</code><var>gen</var><code>)</code> and <code>TzSubstitute(</code><var>P</var><code>,</code><var>n</var><code>,</code><var>eliminate</var><code>)</code>
  because they explicitly specify the generator to be eliminated.
  The default value of <code>protected</code> is 0.
<p>
<dt><code>eliminationsLimit</code>:<dd>
  Whenever the elimination phase of the <code>TzGo</code> command is entered
  for a presentation <var>P</var>,  then it  will eliminate at most
  <code>eliminationsLimit</code> generators (except for further ones which
  have turned out to  be trivial). Hence you may use  the
  <code>eliminationsLimit</code> parameter as a break criterion for the <code>TzGo</code>
  command. Note, however, that it is ignored by the <code>TzEliminate</code>
  command. The default value of <code>eliminationsLimit</code> is 100.
<p>
<dt><code>expandLimit</code>:<dd>
  Whenever the routine for eliminating more than 1 generators is
  called for a presentation <var>P</var> by the <code>TzEliminate</code> command or the
  elimination phase of the <code>TzGo</code> command, then it saves the given
  total length of the relators, and subsequently it checks the
  current total length against its value before each elimination.
  If the total length has increased to more than <code>expandLimit</code>
  per cent of its original value, then the routine returns instead
  of  eliminating another generator.  Hence you may use the
  <code>expandLimit</code> parameter as a break criterion for the <code>TzGo</code>
  command. The default value of <code>expandLimit</code> is 150.
<p>
<dt><code>generatorsLimit</code>:<dd>
  Whenever the elimination phase of the <code>TzGo</code> command is entered
  for a presentation <var>P</var> with <i>n</i> generators, then it will
  eliminate at most <i>n</i> &#8722; <code>generatorsLimit</code> generators (except
  for generators which turn out to be trivial). Hence you may use
  the <code>generatorsLimit</code> parameter as a break criterion for the
  <code>TzGo</code> command. The default value of <code>generatorsLimit</code> is 0.
<p>
<dt><code>lengthLimit</code>:<dd>
  The Tietze transformation commands will never eliminate  a
  generator of a presentation <var>P</var>, if they cannot exclude the
  possibility that the resulting total length of the relators
  exceeds the maximal <font face="Gill Sans,Helvetica,Arial">GAP</font> list length of 2<sup>31</sup>&#8722;1 or the value
  of the option <code>lengthLimit</code>. The default value of <code>lengthLimit</code>
  is 2<sup>31</sup>&#8722;1.
<p>
<dt><code>loopLimit</code>:<dd>
  Whenever the <code>TzGo</code> command is called for a presentation <var>P</var>,
  then it will loop over at most <code>loopLimit</code> of its basic
  steps. Hence you may use the <code>loopLimit</code> parameter as a break
  criterion for  the <code>TzGo</code>  command. The  default value of
  <code>loopLimit</code> is <code>infinity</code>.
<p>
<dt><code>printLevel</code>:<dd>
  Whenever  Tietze transformation commands are called for  a
  presentation <var>P</var> with <code>printLevel</code>  = 0, they will not
  provide any output except for error messages. If <code>printLevel</code>
   = 1, they will display some reasonable amount of output which
  allows you to watch the progress of the computation and to decide
  about your next commands. In the case <code>printLevel</code>  = 2, you
  will get a much more generous amount of output. Finally, if
  <code>printLevel</code>  = 3, various messages on internal details will
  be added. The default value of <code>printLevel</code> is 1.
<p>
<dt><code>saveLimit</code>:<dd>
  Whenever the <code>TzSearch</code> command has finished its main loop over
  all relators of a presentation <var>P</var>, then it checks whether during
  this loop the total length of the relators has been reduced by at
  least <code>saveLimit</code> per cent. If this is the case, then
  <code>TzSearch</code> repeats its procedure instead of returning. Hence you
  may use the <code>saveLimit</code> parameter as a break criterion for the
  <code>TzSearch</code> command and, in particular, for the search phase of
  the <code>TzGo</code> command. The default value of <code>saveLimit</code> is 10.
<p>
<dt><code>searchSimultaneous</code>:<dd>
  Whenever the <code>TzSearch</code> or the <code>TzSearchEqual</code> command is called
  for a presentation <var>P</var>, then it is allowed to handle up to
  <code>searchSimultaneous</code> short relators simultaneously (see for
  the description of the <code>TzSearch</code> command for more details). The
  choice of this parameter may heavily influence the performance as
  well as the result of the <code>TzSearch</code> and the <code>TzSearchEqual</code>
  commands and hence also of the search phase of the <code>TzGo</code>
  command. The default value of <code>searchSimultaneous</code> is 20.
</dl>
<p>
<a name = "SSEC012.2"></a>
<li><code>TzPrintOptions( </code><var>P</var><code> ) F</code>
<p>
prints the current values of the Tietze options of the presentation <var>P</var>.
<p>
<pre>
gap&gt; TzPrintOptions( P );
#I  protected          = 0
#I  eliminationsLimit  = 100
#I  expandLimit        = 150
#I  generatorsLimit    = 0
#I  lengthLimit        = 2147483647
#I  loopLimit          = infinity
#I  printLevel         = 1
#I  saveLimit          = 10
#I  searchSimultaneous = 20
</pre>
<p>
<p>
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP045.htm">Previous</a>] [<a href ="CHAP047.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<font face="Gill Sans,Helvetica,Arial">GAP 4 manual<br>May 2005
</font></body></html>