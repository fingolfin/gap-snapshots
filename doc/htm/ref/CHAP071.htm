<html><head><title>[ref] 71 Maps Concerning Character Tables</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP070.htm">Previous</a>] [<a href ="CHAP072.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>71 Maps Concerning Character Tables</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP071.htm#SECT001">Power Maps</a>
<li> <A HREF="CHAP071.htm#SECT002">Class Fusions between Character Tables</a>
<li> <A HREF="CHAP071.htm#SECT003">Parametrized Maps</a>
<li> <A HREF="CHAP071.htm#SECT004">Subroutines for the Construction of Power Maps</a>
<li> <A HREF="CHAP071.htm#SECT005">Subroutines for the Construction of Class Fusions</a>
</ol><p>
<p>
<a name = "I0"></a>

<a name = "I1"></a>

Besides the characters, <strong>power maps</strong> (see&nbsp;<a href="CHAP071.htm#SECT001">Power Maps</a>) are an important
part of a character table.
Often their computation is not easy, and if the table has no access to
the underlying group then in general they cannot be obtained from the
matrix of irreducible characters;
so it is useful to store them on the table.
<p>
If not only a single table is considered but different tables of a group
and a subgroup or of a group and a factor group are used,
also <strong>class fusion maps</strong> (see&nbsp;<a href="CHAP071.htm#SECT002">Class Fusions between Character Tables</a>)
must be known to get information about the embedding or simply to induce
or restrict characters (see&nbsp;<a href="CHAP070.htm#SECT009">Restricted and Induced Class Functions</a>).
<p>
These are examples of functions from conjugacy classes which will be
called <strong>maps</strong> in the following.
(This should not be confused with the term mapping, see&nbsp;<a href="CHAP031.htm">Mappings</a>.)
In <font face="Gill Sans,Helvetica,Arial">GAP</font>, maps are represented by lists.
Also each character, each list of element orders, centralizer orders,
or class lengths are maps,
and for a permutation <var>perm</var> of classes, <code>ListPerm( </code><var>perm</var><code> )</code> is a map.
<p>
When maps are constructed without access to a group, often one only knows
that the image of a given class is contained in a set of possible images,
e.g., that the image of a class under a subgroup fusion is in the set of
all classes with the same element order.
Using further information, such as centralizer orders, power maps and the
restriction of characters, the sets of possible images can be restricted
further.
In many cases, at the end the images are uniquely determined.
<p>
Because of this approach, many functions in this chapter work not only
with maps but with <strong>parametrized maps</strong> (or paramaps for short).
More about parametrized maps can be found in Section&nbsp;<a href="CHAP071.htm#SECT003">Parametrized Maps</a>.
<p>
The implementation follows&nbsp;<a href="biblio.htm#Bre91"><cite>Bre91</cite></a>,
a description of the main ideas together with several examples
can be found in&nbsp;<a href="biblio.htm#Bre99"><cite>Bre99</cite></a>.
<p>
Several examples in this chapter require the <font face="Gill Sans,Helvetica,Arial">GAP</font> Character Table Library
to be available.
If it is not yet loaded then we load it now.
<p>
<pre>
gap&gt; LoadPackage( "ctbllib" );
true
</pre>
<p>
<p>
<h2><a name="SECT001">71.1 Power Maps</a></h2>
<p><p>
The <i>n</i>-th power map of a character table is represented by a list that
stores at position <i>i</i> the position of the class containing the <i>n</i>-th
powers of the elements in the <i>i</i>-th class.
The <i>n</i>-th power map can be composed from the power maps of the prime
divisors <i>p</i> of <i>n</i>,
so usually only power maps for primes <i>p</i> are actually stored in the
character table.
<p>
For an ordinary character table <var>tbl</var> with access to its underlying group
<i>G</i>,
the <i>p</i>-th power map of <var>tbl</var> can be computed using the identification of
the conjugacy classes of <i>G</i> with the classes of <var>tbl</var>.
For an ordinary character table without access to a group,
in general the <i>p</i>-th power maps (and hence also the element orders) for
prime divisors <i>p</i> of the group order are not uniquely determined
by the matrix of irreducible characters.
So only necessary conditions can be checked in this case,
which in general yields only a list of several possibilities for the
desired power map.
Character tables of the <font face="Gill Sans,Helvetica,Arial">GAP</font> character table library store all <i>p</i>-th
power maps for prime divisors <i>p</i> of the group order.
<p>
Power maps of Brauer tables can be derived from the power maps of the
underlying ordinary tables.
<p>
For (computing and) accessing the <i>n</i>-th power map of a character table,
<code>PowerMap</code> (see&nbsp;<a href="CHAP071.htm#SSEC001.1">PowerMap</a>) can be used;
if the <i>n</i>-th power map cannot be uniquely determined then <code>PowerMap</code>
returns <code>fail</code>.
<p>
The list of all possible <i>p</i>-th power maps of a table in the sense that
certain necessary conditions are satisfied can be computed with
<code>PossiblePowerMaps</code> (see&nbsp;<a href="CHAP071.htm#SSEC001.2">PossiblePowerMaps</a>).
This provides a default strategy, the subroutines are listed in
Section&nbsp;<a href="CHAP071.htm#SECT004">Subroutines for the Construction of Power Maps</a>.
<p>
<a name = "SSEC001.1"></a>
<li><code>PowerMap( </code><var>tbl</var><code>, </code><var>n</var><code>[, </code><var>class</var><code>] ) O</code>
<a name = "SSEC001.1"></a>
<li><code>PowerMapOp( </code><var>tbl</var><code>, </code><var>n</var><code>[, </code><var>class</var><code>] ) O</code>
<a name = "SSEC001.1"></a>
<li><code>ComputedPowerMaps( </code><var>tbl</var><code> ) A</code>
<p>
Called with first argument a character table <var>tbl</var> and second argument an
integer <var>n</var>,
<code>PowerMap</code> returns the <var>n</var>-th power map of <var>tbl</var>.
This is a list containing at position <i>i</i> the position of the class of
<var>n</var>-th powers of the elements in the <i>i</i>-th class of <var>tbl</var>.
<p>
If the additional third argument <var>class</var> is present then the position of
<var>n</var>-th powers of the <var>class</var>-th class is returned.
<p>
If the <var>n</var>-th power map is not uniquely determined by <var>tbl</var> then <code>fail</code>
is returned.
This can happen only if <var>tbl</var> has no access to its underlying group.
<p>
The power maps of <var>tbl</var> that were computed already by <code>PowerMap</code>
are stored in <var>tbl</var> as value of the attribute <code>ComputedPowerMaps</code>,
the <i>n</i>-th power map at position <i>n</i>.
<code>PowerMap</code> checks whether the desired power map is already stored,
computes it using the operation <code>PowerMapOp</code> if it is not yet known,
and stores it.
So methods for the computation of power maps can be installed for
the operation <code>PowerMapOp</code>.
<p>
<pre>
gap&gt; tbl:= CharacterTable( "L3(2)" );;
gap&gt; ComputedPowerMaps( tbl );
[ , [ 1, 1, 3, 2, 5, 6 ], [ 1, 2, 1, 4, 6, 5 ],,,, [ 1, 2, 3, 4, 1, 1 ] ]
gap&gt; PowerMap( tbl, 5 );
[ 1, 2, 3, 4, 6, 5 ]
gap&gt; ComputedPowerMaps( tbl );
[ , [ 1, 1, 3, 2, 5, 6 ], [ 1, 2, 1, 4, 6, 5 ],, [ 1, 2, 3, 4, 6, 5 ],, 
  [ 1, 2, 3, 4, 1, 1 ] ]
gap&gt; PowerMap( tbl, 137, 2 );
2
</pre>
<p>
<a name = "SSEC001.2"></a>
<li><code>PossiblePowerMaps( </code><var>tbl</var><code>, </code><var>p</var><code>[, </code><var>options</var><code>] ) O</code>
<p>
For the ordinary character table <var>tbl</var> of the group <i>G</i>, say,
and a prime integer <var>p</var>,
<code>PossiblePowerMaps</code> returns the list of all maps that have the following
properties of the <i>p</i>-th power map of <var>tbl</var>.
(Representative orders are used only if the <code>OrdersClassRepresentatives</code>
value of <var>tbl</var> is known, see&nbsp;<a href="CHAP069.htm#SSEC008.5">OrdersClassRepresentatives</a>.)
<ol>
<li>
     For class <i>i</i>, the centralizer order of the image is a multiple of
     the <i>i</i>-th centralizer order;
     if the elements in the <i>i</i>-th class have order coprime to <i>p</i>
     then the centralizer orders of class <i>i</i> and its image are equal.
<li>
     Let <i>n</i> be the order of elements in class <i>i</i>.
     If <var>prime</var> divides <i>n</i> then the images have order <i>n</i>/<i>p</i>;
     otherwise the images have order <i>n</i>.
     These criteria are checked in <code>InitPowerMap</code> (see&nbsp;<a href="CHAP071.htm#SSEC004.1">InitPowerMap</a>).
<li>
     For each character &#967; of <i>G</i> and each element <i>g</i> in <i>G</i>,
     the values &#967;(<i>g</i><sup><i>p</i></sup>) and <tt>GaloisCyc</tt>( &#967;(<i>g</i>), <i>p</i> ) are
     algebraic integers that are congruent modulo <i>p</i>;
     if <i>p</i> does not divide the element order of <i>g</i> then the two values
     are equal.
     This congruence is checked for the characters specified below in
     the discussion of the <var>options</var> argument;
     For linear characters &#955; among these characters,
     the condition &#967;(<i>g</i>)<sup><i>p</i></sup> = &#967;(<i>g</i><sup><i>p</i></sup>) is checked.
     The corresponding function is <code>Congruences</code> 
     (see&nbsp;<a href="CHAP071.htm#SSEC004.2">Congruences!for character tables</a>).
<li>
     For each character &#967; of <i>G</i>, the kernel is a normal subgroup
     <i>N</i>, and <i>g</i><sup><i>p</i></sup>  &#8712; <i>N</i> for all <i>g</i>  &#8712; <i>N</i>;
     moreover, if <i>N</i> has index <i>p</i> in <i>G</i> then <i>g</i><sup><i>p</i></sup>  &#8712; <i>N</i> for all
     <i>g</i>  &#8712; <i>G</i>, and if the index of <i>N</i> in <i>G</i> is coprime to <i>p</i> then
     <i>g</i><sup><i>p</i></sup>  &#8713; <i>N</i> for each <i>g</i>  &#8713; <i>N</i>.
     These conditions are checked for the kernels of all characters
     &#967; specified below,
     the corresponding function is <code>ConsiderKernels</code>
     (see&nbsp;<a href="CHAP071.htm#SSEC004.3">ConsiderKernels</a>).
<li>
     If <i>p</i> is larger than the order <i>m</i> of an element <i>g</i>  &#8712; <i>G</i> then
     the class of <i>g</i><sup><i>p</i></sup> is determined by the power maps for primes
     dividing the residue of <i>p</i> modulo <i>m</i>.
     If these power maps are stored in the <code>ComputedPowerMaps</code> value
     (see&nbsp;<a href="CHAP071.htm#SSEC001.1">ComputedPowerMaps</a>) of <var>tbl</var> then this information is used.
     This criterion is checked in <code>ConsiderSmallerPowerMaps</code>
     (see&nbsp;<a href="CHAP071.htm#SSEC004.4">ConsiderSmallerPowerMaps</a>).
<li>
     For each character &#967; of <i>G</i>, the symmetrization &#968;
     defined by &#968;(<i>g</i>) = (&#967;(<i>g</i>)<sup><i>p</i></sup> &#8722; &#967;(<i>g</i><sup><i>p</i></sup>))/<i>p</i> is a character.
     This condition is checked for the kernels of all characters
     &#967; specified below,
     the corresponding function is <code>PowerMapsAllowedBySymmetrizations</code>
     (see&nbsp;<a href="CHAP071.htm#SSEC004.6">PowerMapsAllowedBySymmetrizations</a>).
</ol>
<p>
If <var>tbl</var> is a Brauer table, the possibilities are computed from those for
the underlying ordinary table.
<p>
The optional argument <var>options</var> must be a record that may have the
following components:
<p>
<dl compact>
<dt><code>chars</code>: <dd>
     a list of characters which are used for the check of the criteria
     3., 4., and 6.;
     the default is <code>Irr( </code><var>tbl</var><code> )</code>,
<p>
<dt><code>powermap</code>: <dd>
     a parametrized map which is an approximation of the desired map
<p>
<dt><code>decompose</code>: <dd>
     a Boolean;
     a <code>true</code> value indicates that all constituents of the
     symmetrizations of <code>chars</code> computed for criterion 6. lie in <code>chars</code>,
     so the symmetrizations can be decomposed into elements of <code>chars</code>;
     the default value of <code>decompose</code> is <code>true</code> if <code>chars</code> is not bound
     and <code>Irr( </code><var>tbl</var><code> )</code> is known, otherwise <code>false</code>,
<p>
<dt><code>quick</code>: <dd>
     a Boolean;
     if <code>true</code> then the subroutines are called with value <code>true</code> for
     the argument <var>quick</var>;
     especially, as soon as only one possibility remains
     this possibility is returned immediately;
     the default value is <code>false</code>,
<p>
<dt><code>parameters</code>: <dd>
     a record with components <code>maxamb</code>, <code>minamb</code> and <code>maxlen</code> which
     control the subroutine <code>PowerMapsAllowedBySymmetrizations</code>;
     it only uses characters with current indeterminateness up to
     <code>maxamb</code>,
     tests decomposability only for characters with current
     indeterminateness at least <code>minamb</code>,
     and admits a branch according to a character only if there is one
     with at most <code>maxlen</code> possible symmetrizations.
</dl>
<p>
<pre>
gap&gt; tbl:= CharacterTable( "U4(3).4" );;
gap&gt; PossiblePowerMaps( tbl, 2 );
[ [ 1, 1, 3, 4, 5, 2, 2, 8, 3, 4, 11, 12, 6, 14, 9, 1, 1, 2, 2, 3, 4, 5, 6, 
      8, 9, 9, 10, 11, 12, 16, 16, 16, 16, 17, 17, 18, 18, 18, 18, 20, 20, 
      20, 20, 22, 22, 24, 24, 25, 26, 28, 28, 29, 29 ] ]
</pre>
<p>
<a name = "SSEC001.3"></a>
<li><code>ElementOrdersPowerMap( </code><var>powermap</var><code> ) F</code>
<p>
Let <var>powermap</var> be a nonempty list containing at position <i>p</i>, if bound,
the <i>p</i>-th power map of a character table or group.
<code>ElementOrdersPowerMap</code> returns a list of the same length as each entry
in <var>powermap</var>, with entry at position <i>i</i> equal to the order of elements
in class <i>i</i> if this order is uniquely determined by <var>powermap</var>,
and equal to an unknown (see Chapter&nbsp;<a href="CHAP019.htm">Unknowns</a>) otherwise.
<p>
<pre>
gap&gt; tbl:= CharacterTable( "U4(3).4" );;
gap&gt; known:= ComputedPowerMaps( tbl );;
gap&gt; Length( known );
7
gap&gt; sub:= ShallowCopy( known );;  Unbind( sub[7] );
gap&gt; ElementOrdersPowerMap( sub );
[ 1, 2, 3, 3, 3, 4, 4, 5, 6, 6, Unknown(1), Unknown(2), 8, 9, 12, 2, 2, 4, 4, 
  6, 6, 6, 8, 10, 12, 12, 12, Unknown(3), Unknown(4), 4, 4, 4, 4, 4, 4, 8, 8, 
  8, 8, 12, 12, 12, 12, 12, 12, 20, 20, 24, 24, Unknown(5), Unknown(6), 
  Unknown(7), Unknown(8) ]
gap&gt; ord:= ElementOrdersPowerMap( known );
[ 1, 2, 3, 3, 3, 4, 4, 5, 6, 6, 7, 7, 8, 9, 12, 2, 2, 4, 4, 6, 6, 6, 8, 10, 
  12, 12, 12, 14, 14, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 
  20, 20, 24, 24, 28, 28, 28, 28 ]
gap&gt; ord = OrdersClassRepresentatives( tbl );
true
</pre>
<p>
<a name = "SSEC001.4"></a>
<li><code>PowerMapByComposition( </code><var>tbl</var><code>, </code><var>n</var><code> ) F</code>
<p>
<var>tbl</var> must be a nearly character table, and <var>n</var> a positive integer.
If the power maps for all prime divisors of <var>n</var> are stored in the
<code>ComputedPowerMaps</code> list of <var>tbl</var> then <code>PowerMapByComposition</code> returns
the <var>n</var>-th power map of <var>tbl</var>.
Otherwise <code>fail</code> is returned.
<p>
<pre>
gap&gt; tbl:= CharacterTable( "U4(3).4" );;  exp:= Exponent( tbl );
2520
gap&gt; PowerMapByComposition( tbl, exp );
[ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
  1, 1, 1 ]
gap&gt; Length( ComputedPowerMaps( tbl ) );
7
gap&gt; PowerMapByComposition( tbl, 11 );
fail
gap&gt; PowerMap( tbl, 11 );;
gap&gt; PowerMapByComposition( tbl, 11 );
[ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 
  22, 23, 24, 26, 25, 27, 28, 29, 31, 30, 33, 32, 35, 34, 37, 36, 39, 38, 41, 
  40, 43, 42, 45, 44, 47, 46, 49, 48, 51, 50, 53, 52 ]
</pre>
<p>
The permutation group of matrix automorphisms (see&nbsp;<a href="CHAP069.htm#SSEC020.1">MatrixAutomorphisms</a>)
acts on the possible power maps returned by <code>PossiblePowerMaps</code>
(see&nbsp;<a href="CHAP071.htm#SSEC001.2">PossiblePowerMaps</a>)
by permuting a list via <code>Permuted</code> (see&nbsp;<a href="CHAP021.htm#SSEC020.16">Permuted</a>)
and then mapping the images via <code>OnPoints</code> (see&nbsp;<a href="CHAP039.htm#SSEC002.1">OnPoints</a>).
Note that by definition, the group of table automorphisms acts trivially.
<p>
<a name = "SSEC001.5"></a>
<li><code>OrbitPowerMaps( </code><var>map</var><code>, </code><var>permgrp</var><code> ) F</code>
<p>
returns the orbit of the power map <var>map</var> under the action of the
permutation group <var>permgrp</var>
via a combination of <code>Permuted</code> (see&nbsp;<a href="CHAP021.htm#SSEC020.16">Permuted</a>) and <code>OnPoints</code>
(see&nbsp;<a href="CHAP039.htm#SSEC002.1">OnPoints</a>).
<p>
<a name = "I2"></a>

<a name = "SSEC001.6"></a>
<li><code>RepresentativesPowerMaps( </code><var>listofmaps</var><code>, </code><var>permgrp</var><code> ) F</code>
<p>
returns a list of orbit representatives of the power maps in the list
<var>listofmaps</var> under the action of the permutation group <var>permgrp</var>
via a combination of <code>Permuted</code> (see&nbsp;<a href="CHAP021.htm#SSEC020.16">Permuted</a>) and <code>OnPoints</code>
(see&nbsp;<a href="CHAP039.htm#SSEC002.1">OnPoints</a>).
<p>
<pre>
gap&gt; tbl:= CharacterTable( "3.McL" );;
gap&gt; grp:= MatrixAutomorphisms( Irr( tbl ) );  Size( grp );
&lt;permutation group with 5 generators&gt;
32
gap&gt; poss:= PossiblePowerMaps( CharacterTable( "3.McL" ), 3 );
[ [ 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 11, 11, 11, 14, 14, 14, 17, 17, 17, 4, 4, 
      4, 4, 4, 4, 29, 29, 29, 26, 26, 26, 32, 32, 32, 9, 8, 37, 37, 37, 40, 
      40, 40, 43, 43, 43, 11, 11, 11, 52, 52, 52, 49, 49, 49, 14, 14, 14, 14, 
      14, 14, 37, 37, 37, 37, 37, 37 ], 
  [ 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 11, 11, 11, 14, 14, 14, 17, 17, 17, 4, 4, 
      4, 4, 4, 4, 29, 29, 29, 26, 26, 26, 32, 32, 32, 8, 9, 37, 37, 37, 40, 
      40, 40, 43, 43, 43, 11, 11, 11, 52, 52, 52, 49, 49, 49, 14, 14, 14, 14, 
      14, 14, 37, 37, 37, 37, 37, 37 ] ]
gap&gt; reps:= RepresentativesPowerMaps( poss, grp );
[ [ 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 11, 11, 11, 14, 14, 14, 17, 17, 17, 4, 4, 
      4, 4, 4, 4, 29, 29, 29, 26, 26, 26, 32, 32, 32, 8, 9, 37, 37, 37, 40, 
      40, 40, 43, 43, 43, 11, 11, 11, 52, 52, 52, 49, 49, 49, 14, 14, 14, 14, 
      14, 14, 37, 37, 37, 37, 37, 37 ] ]
gap&gt; orb:= OrbitPowerMaps( reps[1], grp );
[ [ 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 11, 11, 11, 14, 14, 14, 17, 17, 17, 4, 4, 
      4, 4, 4, 4, 29, 29, 29, 26, 26, 26, 32, 32, 32, 8, 9, 37, 37, 37, 40, 
      40, 40, 43, 43, 43, 11, 11, 11, 52, 52, 52, 49, 49, 49, 14, 14, 14, 14, 
      14, 14, 37, 37, 37, 37, 37, 37 ], 
  [ 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 11, 11, 11, 14, 14, 14, 17, 17, 17, 4, 4, 
      4, 4, 4, 4, 29, 29, 29, 26, 26, 26, 32, 32, 32, 9, 8, 37, 37, 37, 40, 
      40, 40, 43, 43, 43, 11, 11, 11, 52, 52, 52, 49, 49, 49, 14, 14, 14, 14, 
      14, 14, 37, 37, 37, 37, 37, 37 ] ]
gap&gt; Parametrized( orb );
[ 1, 1, 1, 4, 4, 4, 1, 1, 1, 1, 11, 11, 11, 14, 14, 14, 17, 17, 17, 4, 4, 4, 
  4, 4, 4, 29, 29, 29, 26, 26, 26, 32, 32, 32, [ 8, 9 ], [ 8, 9 ], 37, 37, 
  37, 40, 40, 40, 43, 43, 43, 11, 11, 11, 52, 52, 52, 49, 49, 49, 14, 14, 14, 
  14, 14, 14, 37, 37, 37, 37, 37, 37 ]
</pre>
<p>
<p>
<h2><a name="SECT002">71.2 Class Fusions between Character Tables</a></h2>
<p><p>
<a name = "I3"></a>

<a name = "I3"></a>
<a name = "I4"></a>

For a group <i>G</i> and a subgroup <i>H</i> of <i>G</i>,
the fusion map between the character table of <i>H</i> and the character table
of <i>G</i> is represented by a list that stores at position <i>i</i> the position
of the <i>i</i>-th class of the table of <i>H</i> in the classes list of the table
of <i>G</i>.
<p>
For ordinary character tables <var>tbl1</var> and <var>tbl2</var> of <i>H</i> and <i>G</i>,
with access to the groups <i>H</i> and <i>G</i>,
the class fusion between <var>tbl1</var> and <var>tbl2</var> can be computed using the
identifications of the conjugacy classes of <i>H</i> with the classes of
<var>tbl1</var> and the conjugacy classes of <i>G</i> with the classes of <var>tbl2</var>.
For two ordinary character tables without access to its underlying group,
or in the situation that the group stored in <var>tbl1</var> is not physically a
subgroup of the group stored in <var>tbl2</var> but an isomorphic copy,
in general the class fusion is not uniquely determined by the information
stored on the tables such as irreducible characters and power maps.
So only necessary conditions can be checked in this case,
which in general yields only a list of several possibilities for the
desired class fusion.
Character tables of the <font face="Gill Sans,Helvetica,Arial">GAP</font> character table library store various
class fusions that are regarded as important,
for example fusions from maximal subgroups (see&nbsp;<a href="CHAP071.htm#SSEC002.2">ComputedClassFusions</a>
and <a href="../../../pkg/ctbllib/htm/CHAP002.htm#SSEC002.2">ctbllib:Maxes</a> in the manual for the <font face="Gill Sans,Helvetica,Arial">GAP</font> Character Table Library).
<p>
Class fusions between Brauer tables can be derived from the class fusions
between the underlying ordinary tables.
The class fusion from a Brauer table to the underlying ordinary table is
stored when the Brauer table is constructed from the ordinary table,
so no method is needed to compute such a fusion.
<p>
For (computing and) accessing the class fusion between two character
tables,
<code>FusionConjugacyClasses</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.1">FusionConjugacyClasses</a>) can be used;
if the class fusion cannot be uniquely determined then
<code>FusionConjugacyClasses</code> returns <code>fail</code>.
<p>
The list of all possible class fusion between two tables in the sense
that certain necessary conditions are satisfied can be computed with
<code>PossibleClassFusions</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.6">PossibleClassFusions</a>).
This provides a default strategy, the subroutines are listed in
Section&nbsp;<a href="CHAP071.htm#SECT005">Subroutines for the Construction of Class Fusions</a>.
<p>
It should be noted that all the following functions except
<code>FusionConjugacyClasses</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.1">FusionConjugacyClasses</a>)
deal only with the situation of class fusions from subgroups.
The computation of <strong>factor fusions</strong> from a character table to the table
of a factor group is not dealt with here.
Since the ordinary character table of a group <i>G</i> determines the
character tables of all factor groups of <i>G</i>, the factor fusion to a
given character table of a factor group of <i>G</i> is determined up to table
automorphisms (see&nbsp;<a href="CHAP069.htm#SSEC008.8">AutomorphismsOfTable</a>) once the class positions of
the kernel of the natural epimorphism have been fixed.
<p>
<a name = "SSEC002.1"></a>
<li><code>FusionConjugacyClasses( </code><var>tbl1</var><code>, </code><var>tbl2</var><code> ) O</code>
<li><code>FusionConjugacyClasses( </code><var>H</var><code>, </code><var>G</var><code> ) O</code>
<li><code>FusionConjugacyClasses( </code><var>hom</var><code>[, </code><var>tbl1</var><code>, </code><var>tbl2</var><code>] ) O</code>
<a name = "SSEC002.1"></a>
<li><code>FusionConjugacyClassesOp( </code><var>tbl1</var><code>, </code><var>tbl2</var><code> ) O</code>
<li><code>FusionConjugacyClassesOp( </code><var>hom</var><code> ) A</code>
<p>
Called with two character tables <var>tbl1</var> and <var>tbl2</var>,
<code>FusionConjugacyClasses</code> returns the fusion of conjugacy classes between
<var>tbl1</var> and <var>tbl2</var>.
(If one of the tables is a Brauer table,
it will delegate this task to the underlying ordinary table.)
<p>
Called with two groups <var>H</var> and <var>G</var> where <var>H</var> is a subgroup of <var>G</var>,
<code>FusionConjugacyClasses</code> returns the fusion of conjugacy classes between
<var>H</var> and <var>G</var>.
This is done by delegating to the ordinary character tables of <var>H</var> and
<var>G</var>,
since class fusions are stored only for character tables and not for
groups.
<p>
Note that the returned class fusion refers to the ordering of conjugacy
classes in the character tables if the arguments are character tables
and to the ordering of conjugacy classes in the groups if the arguments
are groups (see&nbsp;<a href="CHAP069.htm#SSEC006.2">ConjugacyClasses!for character tables</a>).
<p>
Called with a group homomorphism <var>hom</var>,
<code>FusionConjugacyClasses</code> returns the fusion of conjugacy classes between
the preimage and the image of <var>hom</var>;
contrary to the two cases above,
also factor fusions can be handled by this variant.
If <var>hom</var> is the only argument then the class fusion refers to the
ordering of conjugacy classes in the groups.
If the character tables of preimage and image are given as <var>tbl1</var> and
<var>tbl2</var>, respectively (each table with its group stored),
then the fusion refers to the ordering of classes in these tables.
<p>
If no class fusion exists or if the class fusion is not uniquely
determined, <code>fail</code> is returned;
this may happen when <code>FusionConjugacyClasses</code> is called with two
character tables that do not know compatible underlying groups.
<p>
Methods for the computation of class fusions can be installed for
the operation <code>FusionConjugacyClassesOp</code>.
<p>
<pre>
gap&gt; s4:= SymmetricGroup( 4 );
Sym( [ 1 .. 4 ] )
gap&gt; tbls4:= CharacterTable( s4 );;
gap&gt; d8:= SylowSubgroup( s4, 2 );
Group([ (1,2), (3,4), (1,3)(2,4) ])
gap&gt; FusionConjugacyClasses( d8, s4 );
[ 1, 2, 3, 3, 5 ]
gap&gt; tbls5:= CharacterTable( "S5" );;
gap&gt; FusionConjugacyClasses( CharacterTable( "A5" ), tbls5 );
[ 1, 2, 3, 4, 4 ]
gap&gt; FusionConjugacyClasses( CharacterTable( "A5" ), CharacterTable( "J1" ) );
fail
gap&gt; PossibleClassFusions( CharacterTable( "A5" ), CharacterTable( "J1" ) );
[ [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 5, 4 ] ]
</pre>
<p>
<a name = "SSEC002.2"></a>
<li><code>ComputedClassFusions( </code><var>tbl</var><code> ) A</code>
<p>
The class fusions from the character table <var>tbl</var> that have been computed
already by <code>FusionConjugacyClasses</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.1">FusionConjugacyClasses</a>) or
explicitly stored by <code>StoreFusion</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.4">StoreFusion</a>)
are stored in the <code>ComputedClassFusions</code> list of <var>tbl1</var>.
Each entry of this list is a record with the following components.
<p>
<dl compact>
<dt><code>name</code> <dd>
    the <code>Identifier</code> value of the character table to which the fusion
    maps,
<p>
<dt><code>map</code> <dd>
    the list of positions of image classes,
<p>
<dt><code>text</code> (optional) <dd>
    a string giving additional information about the fusion map,
    for example whether the map is uniquely determined by the character
    tables,
<p>
<dt><code>specification</code> (optional, rarely used) <dd>
    a value that distinguishes different fusions between the same tables.
</dl>
<p>
Note that stored fusion maps may differ from the maps returned by
<code>GetFusionMap</code> and the maps entered by <code>StoreFusion</code> if the table
<var>destination</var> has a nonidentity <code>ClassPermutation</code> value.
So if one fetches a fusion map from a table <var>tbl1</var> to a table <var>tbl2</var>
via access to the data in the <code>ComputedFusionMaps</code> list <var>tbl1</var> then the
stored value must be composed with the <code>ClassPermutation</code> value of <var>tbl2</var>
in order to obtain the correct class fusion.
(If one handles fusions only via <code>GetFusionMap</code> and <code>StoreFusion</code>
(see&nbsp;<a href="CHAP071.htm#SSEC002.3">GetFusionMap</a>, <a href="CHAP071.htm#SSEC002.4">StoreFusion</a>) then this adjustment is made
automatically.)
<p>
Fusions are identified via the <code>Identifier</code> value of the destination
table and not by this table itself because many fusions between
character tables in the <font face="Gill Sans,Helvetica,Arial">GAP</font> character table library are stored on
library tables, and it is not desirable to load together with a library
table also all those character tables that occur as destinations of
fusions from this table.
<p>
For storing fusions and accessing stored fusions,
see also&nbsp;<a href="CHAP071.htm#SSEC002.3">GetFusionMap</a>, <a href="CHAP071.htm#SSEC002.4">StoreFusion</a>.
For accessing the identifiers of tables that store a fusion into a
given character table, see&nbsp;<a href="CHAP071.htm#SSEC002.5">NamesOfFusionSources</a>.
<p>
<a name = "SSEC002.3"></a>
<li><code>GetFusionMap( </code><var>source</var><code>, </code><var>destination</var><code> ) F</code>
<li><code>GetFusionMap( </code><var>source</var><code>, </code><var>destination</var><code>, </code><var>specification</var><code> ) F</code>
<p>
For two ordinary character tables <var>source</var> and <var>destination</var>,
<code>GetFusionMap</code> checks whether the <code>ComputedClassFusion</code> list of <var>source</var>
(see&nbsp;<a href="CHAP071.htm#SSEC002.2">ComputedClassFusions</a>) contains a record with <code>name</code> component
<code>Identifier( </code><var>destination</var><code> )</code>, and returns returns the <code>map</code> component
of the first such record.
<code>GetFusionMap( </code><var>source</var><code>, </code><var>destination</var><code>, </code><var>specification</var><code> )</code> fetches
that fusion map for which the record additionally has the <code>specification</code>
component <var>specification</var>.
<p>
If both <var>source</var> and <var>destination</var> are Brauer tables,
first the same is done, and if no fusion map was found then
<code>GetFusionMap</code> looks whether a fusion map between the ordinary tables
is stored; if so then the fusion map between <var>source</var> and <var>destination</var>
is stored on <var>source</var>, and then returned.
<p>
If no appropriate fusion is found, <code>GetFusionMap</code> returns <code>fail</code>.
For the computation of class fusions, see&nbsp;<a href="CHAP071.htm#SSEC002.1">FusionConjugacyClasses</a>.
<p>
<a name = "SSEC002.4"></a>
<li><code>StoreFusion( </code><var>source</var><code>, </code><var>fusion</var><code>, </code><var>destination</var><code> ) F</code>
<p>
For two character tables <var>source</var> and <var>destination</var>,
<code>StoreFusion</code> stores the fusion <var>fusion</var> from <var>source</var> to <var>destination</var>
in the <code>ComputedClassFusions</code> list (see&nbsp;<a href="CHAP071.htm#SSEC002.2">ComputedClassFusions</a>)
of <var>source</var>,
and adds the <code>Identifier</code> string of <var>destination</var> to the
<code>NamesOfFusionSources</code> list (see&nbsp;<code>NamesOfFusionSources</code>)
of <var>destination</var>.
<p>
<var>fusion</var> can either be a fusion map (that is, the list of positions of
the image classes) or a record as described in&nbsp;<a href="CHAP071.htm#SSEC002.2">ComputedClassFusions</a>.
<p>
If fusions to <var>destination</var> are already stored on <var>source</var> then
another fusion can be stored only if it has a record component
<code>specification</code> that distinguishes it from the stored fusions.
In the case of such an ambiguity, <code>StoreFusion</code> raises an error.
<p>
<pre>
gap&gt; ComputedClassFusions( CharacterTable( d8 ) );
[ rec( name := "CT1", map := [ 1, 2, 3, 3, 5 ] ) ]
gap&gt; Identifier( tbls4 );
"CT1"
gap&gt; GetFusionMap( CharacterTable( d8 ), tbls4 );
[ 1, 2, 3, 3, 5 ]
gap&gt; GetFusionMap( tbls4, tbls5 );
fail
gap&gt; poss:= PossibleClassFusions( tbls4, tbls5 );
[ [ 1, 5, 2, 3, 6 ] ]
gap&gt; StoreFusion( tbls4, poss[1], tbls5 );
gap&gt; GetFusionMap( tbls4, tbls5 );
[ 1, 5, 2, 3, 6 ]
</pre>
<p>
<a name = "SSEC002.5"></a>
<li><code>NamesOfFusionSources( </code><var>tbl</var><code> ) A</code>
<p>
For a character table <var>tbl</var>, <code>NamesOfFusionSources</code> returns the list of
identifiers of all those character tables that are known to have fusions
to <var>tbl</var> stored.
The <code>NamesOfFusionSources</code> value is updated whenever a fusion to <var>tbl</var>
is stored using <code>StoreFusion</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.4">StoreFusion</a>).
<p>
<pre>
gap&gt; NamesOfFusionSources( tbls5 );
[ "2.A5.2", "Isoclinic(2.A5.2)", "A5", "S3x2", "(A5x3):2", "2^4:s5", 
  "2.M22M5", "4.M22M5", "M22.2M4", "2.M12M8", "2.2.2^4+6:S5", "2.2^4+6:S5", 
  "4.2^4.S5", "2.HSM10", "3^1+4:2^1+4.s5", "2^(1+4).S5", "(2^2xA5):2", 
  "2^10:(2^5:s5)", "3^4:S5", "M24C2B", "gl25", "mo62", "s2wrs5", "s4", 
  "twd5a", "w(d5)", "5:4", "CT1" ]
</pre>
<p>
<a name = "SSEC002.6"></a>
<li><code>PossibleClassFusions( </code><var>subtbl</var><code>, </code><var>tbl</var><code>[, </code><var>options</var><code>] ) O</code>
<p>
For two ordinary character tables <var>subtbl</var> and <var>tbl</var> of the groups <i>H</i>
and <i>G</i>, say,
<code>PossibleClassFusions</code> returns the list of all maps that have the
following properties of class fusions from <var>subtbl</var> to <var>tbl</var>.
<ol>
<li>
    For class <i>i</i>, the centralizer order of the image in <i>G</i> is a
    multiple of the <i>i</i>-th centralizer order in <i>H</i>,
    and the element orders in the <i>i</i>-th class and its image are equal.
    These criteria are checked in <code>InitFusion</code> (see&nbsp;<a href="CHAP071.htm#SSEC005.1">InitFusion</a>).
<li>
    The class fusion commutes with power maps.
    This is checked using <code>TestConsistencyMaps</code>
    (see&nbsp;<a href="CHAP071.htm#SSEC003.12">TestConsistencyMaps</a>).
<li>
    If the permutation character of <i>G</i> corresponding to the action of
    <i>G</i> on the cosets of <i>H</i> is specified (see the discussion of the
    <var>options</var> argument below) then it prescribes for each class <i>C</i> of
    <i>G</i> the number of elements of <i>H</i> fusing into <i>C</i>.
    The corresponding function is <code>CheckPermChar</code>
    (see&nbsp;<a href="CHAP071.htm#SSEC005.2">CheckPermChar</a>).
<li>
    The table automorphisms of <var>tbl</var> (see&nbsp;<a href="CHAP069.htm#SSEC008.8">AutomorphismsOfTable</a>) are
    used in order to compute only orbit representatives.
    (But note that the list returned by <code>PossibleClassFusions</code> contains
    the full orbits.)
<li>
    For each character &#967; of <i>G</i>, the restriction to <i>H</i> via the
    class fusion is a character of <i>H</i>.
    This condition is checked for all characters specified below,
    the corresponding function is <code>FusionsAllowedByRestrictions</code>
    (see&nbsp;<a href="CHAP071.htm#SSEC005.4">FusionsAllowedByRestrictions</a>).
<li>
    The class multiplication coefficients in <var>subtbl</var> do not exceed the
    corresponding coefficients in <var>tbl</var>.
    This is checked in <code>ConsiderStructureConstants</code>
    (see&nbsp;<a href="CHAP071.htm#SSEC002.9">ConsiderStructureConstants</a>, and see also the comment on the
    parameter <code>verify</code> below).
</ol>
<p>
If <var>subtbl</var> and <var>tbl</var> are Brauer tables then the possibilities are
computed from those for the underlying ordinary tables.
<p>
The optional argument <var>options</var> must be a record that may have the
following components:
<p>
<dl compact>
<dt><code>chars</code> <dd>
     a list of characters of <var>tbl</var> which are used for the check of&nbsp;5.;
     the default is <code>Irr( </code><var>tbl</var><code> )</code>,
<p>
<dt><code>subchars</code> <dd>
     a list of characters of <var>subtbl</var> which are constituents of the
     retrictions of <code>chars</code>, the default is <code>Irr( </code><var>subtbl</var><code> )</code>,
<p>
<dt><code>fusionmap</code> <dd>
     a parametrized map which is an approximation of the desired map,
<p>
<dt><code>decompose</code> <dd>
     a Boolean;
     a <code>true</code> value indicates that all constituents of the restrictions
     of <code>chars</code> computed for criterion 5. lie in <code>subchars</code>,
     so the restrictions can be decomposed into elements of <code>subchars</code>;
     the default value of <code>decompose</code> is <code>true</code> if <code>subchars</code> is not
     bound and <code>Irr( </code><var>subtbl</var><code> )</code> is known, otherwise <code>false</code>,
<p>
<dt><code>permchar</code> <dd>
     (a values list of) a permutation character; only those fusions
     affording that permutation character are computed,
<p>
<dt><code>quick</code> <dd>
     a Boolean;
     if <code>true</code> then the subroutines are called with value <code>true</code> for
     the argument <var>quick</var>;
     especially, as soon as only one possibility remains
     then this possibility is returned immediately;
     the default value is <code>false</code>,
<p>
<dt><code>verify</code> <dd>
     a Boolean;
     if <code>false</code> then <code>ConsiderStructureConstants</code> is called only if more
     than one orbit of possible class fusions exists, under the action
     of the groups of table automorphisms;
     the default value is <code>false</code> (because the computation of the
     structure constants is usually very time comsuming, compared with
     checking the other criteria),
<p>
<dt><code>parameters</code> <dd>
     a record with components <code>maxamb</code>, <code>minamb</code> and <code>maxlen</code>
     which control the subroutine <code>FusionsAllowedByRestrictions</code>;
     it only uses characters with current indeterminateness up to
     <code>maxamb</code>,
     tests decomposability only for characters with current
     indeterminateness at least <code>minamb</code>,
     and admits a branch according to a character only if there is one
     with at most <code>maxlen</code> possible restrictions.
</dl>
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "U3(3)" );;  tbl:= CharacterTable( "J4" );;
gap&gt; PossibleClassFusions( subtbl, tbl );
[ [ 1, 2, 4, 4, 5, 5, 6, 10, 12, 13, 14, 14, 21, 21 ], 
  [ 1, 2, 4, 4, 5, 5, 6, 10, 13, 12, 14, 14, 21, 21 ], 
  [ 1, 2, 4, 4, 6, 6, 6, 10, 12, 13, 15, 15, 22, 22 ], 
  [ 1, 2, 4, 4, 6, 6, 6, 10, 12, 13, 16, 16, 22, 22 ], 
  [ 1, 2, 4, 4, 6, 6, 6, 10, 13, 12, 15, 15, 22, 22 ], 
  [ 1, 2, 4, 4, 6, 6, 6, 10, 13, 12, 16, 16, 22, 22 ] ]
</pre>
<p>
The permutation groups of table automorphisms
(see&nbsp;<a href="CHAP069.htm#SSEC008.8">AutomorphismsOfTable</a>)
of the subgroup table <var>subtbl</var> and the supergroup table <var>tbl</var> act on the
possible class fusions returned by <code>PossibleClassFusions</code>
(see&nbsp;<a href="CHAP071.htm#SSEC002.6">PossibleClassFusions</a>),
the former by permuting a list via <code>Permuted</code> (see&nbsp;<a href="CHAP021.htm#SSEC020.16">Permuted</a>),
the latter by mapping the images via <code>OnPoints</code> (see&nbsp;<a href="CHAP039.htm#SSEC002.1">OnPoints</a>).
<p>
If the set of possible fusions with certain properties was computed
that are not invariant under the full groups of table automorphisms
then only a smaller group acts.
This may happen for example if a permutation character or if an explicit
approximation of the fusion map is prescribed in the call of
<code>PossibleClassFusions</code>.
<p>
<a name = "SSEC002.7"></a>
<li><code>OrbitFusions( </code><var>subtblautomorphisms</var><code>, </code><var>fusionmap</var><code>, </code><var>tblautomorphisms</var><code> ) F</code>
<p>
returns the orbit of the class fusion map <var>fusionmap</var> under the
actions of the permutation groups <var>subtblautomorphisms</var> and
<var>tblautomorphisms</var> of automorphisms of the character table of the
subgroup and the supergroup, respectively.
<p>
<a name = "I5"></a>

<a name = "SSEC002.8"></a>
<li><code>RepresentativesFusions( </code><var>subtblautomorphisms</var><code>, </code><var>listofmaps</var><code>, </code><var>tblautomorphisms</var><code> ) F</code>
<li><code>RepresentativesFusions( </code><var>subtbl</var><code>, </code><var>listofmaps</var><code>, </code><var>tbl</var><code> ) F</code>
<p>
returns a list of orbit representatives of class fusion maps in the list
<var>listofmaps</var> under the action of maximal admissible subgroups
of the table automorphisms <var>subtblautomorphisms</var> of the subgroup table
and <var>tblautomorphisms</var> of the supergroup table.
Both groups of table automorphisms must be permutation groups.
<p>
Instead of the groups of table automorphisms, also the character tables
<var>subtbl</var> and <var>tbl</var> may be entered.
In this case, the <code>AutomorphismsOfTable</code> values of the tables are used.
<p>
<pre>
gap&gt; fus:= GetFusionMap( subtbl, tbl );
[ 1, 2, 4, 4, 5, 5, 6, 10, 12, 13, 14, 14, 21, 21 ]
gap&gt; orb:= OrbitFusions( AutomorphismsOfTable( subtbl ), fus,
&gt;              AutomorphismsOfTable( tbl ) );
[ [ 1, 2, 4, 4, 5, 5, 6, 10, 12, 13, 14, 14, 21, 21 ], 
  [ 1, 2, 4, 4, 5, 5, 6, 10, 13, 12, 14, 14, 21, 21 ] ]
gap&gt; rep:= RepresentativesFusions( AutomorphismsOfTable( subtbl ), orb,
&gt;              AutomorphismsOfTable( tbl ) );
[ [ 1, 2, 4, 4, 5, 5, 6, 10, 12, 13, 14, 14, 21, 21 ] ]
</pre>
<p>
<a name = "SSEC002.9"></a>
<li><code>ConsiderStructureConstants( </code><var>subtbl</var><code>, </code><var>tbl</var><code>, </code><var>fusions</var><code>, </code><var>quick</var><code> ) F</code>
<p>
Let <var>subtbl</var> and <var>tbl</var> be ordinary character tables and <var>fusions</var> be a
list of possible class fusions from <var>subtbl</var> to <var>tbl</var>.
<code>ConsiderStructureConstants</code> returns the list of those maps &#963; in
<var>fusions</var> with the property that for all triples (<i>i</i>,<i>j</i>,<i>k</i>) of class
positions, <tt>ClassMultiplicationCoefficient</tt>( <i>subtbl</i> , <i>i</i>, <i>j</i>, <i>k</i> ) is not
bigger than <tt>ClassMultiplicationCoefficient</tt>( <i>tbl</i> , &#963;[<i>i</i>], &#963;[<i>j</i>], &#963;[<i>k</i>] );
see&nbsp;<a href="CHAP069.htm#SSEC010.6">ClassMultiplicationCoefficient!for character tables</a> for the
definition of class multiplication coefficients/structure constants.
<p>
The argument <var>quick</var> must be a Boolean; if it is <code>true</code> then only those
triples are checked for which for which at least two entries in <var>fusions</var>
have different images.
<p>
<p>
<h2><a name="SECT003">71.3 Parametrized Maps</a></h2>
<p><p>
<a name = "I6"></a>

<a name = "I6"></a>
<a name = "I7"></a>

A <strong>parametrized map</strong> is a list whose <i>i</i>-th entry is either unbound
(which means that nothing is known about the image(s) of the <i>i</i>-th
class) or the image of the <i>i</i>-th class
(i.e., an integer for fusion maps, power maps, element orders etc.,
and a cyclotomic for characters),
or a list of possible images of the <i>i</i>-th class.
In this sense, maps are special parametrized maps.
We often identify a parametrized map <var>paramap</var> with the set of all maps
<var>map</var> with the property that either <code></code><var>map</var><code>[i] = </code><var>paramap</var><code>[i]</code> or
<code></code><var>map</var><code>[i]</code> is contained in the list <code></code><var>paramap</var><code>[i]</code>;
we say then that <var>map</var> is contained in <var>paramap</var>.
<p>
This definition implies that parametrized maps cannot be used to describe
sets of maps where lists are possible images.
An exception are strings which naturally arise as images when class names
are considered.
So strings and lists of strings are allowed in parametrized maps,
and character constants (see Chapter&nbsp;<a href="CHAP026.htm">Strings and Characters</a>)
are not allowed in maps.
<p>
<a name = "SSEC003.1"></a>
<li><code>CompositionMaps( </code><var>paramap2</var><code>, </code><var>paramap1</var><code>[, </code><var>class</var><code>] ) F</code>
<p>
The composition of two parametrized maps <var>paramap1</var>, <var>paramap2</var> is
defined as the parametrized map <var>comp</var> that contains
all compositions <i>f</i><sub>2</sub> &#176;<i>f</i><sub>1</sub> of elements <i>f</i><sub>1</sub> of <var>paramap1</var> and
<i>f</i><sub>2</sub> of <var>paramap2</var>.
For example, the composition of a character &#967; of a group <i>G</i> by a
parametrized class fusion map from a subgroup <i>H</i> to <i>G</i> is the
parametrized map that contains all restrictions of &#967; by elements of
the parametrized fusion map.
<p>
<code>CompositionMaps(</code><var>paramap2</var><code>, </code><var>paramap1</var><code>)</code> is a parametrized map with
entry <code>CompositionMaps(</code><var>paramap2</var><code>, </code><var>paramap1</var><code>, </code><var>class</var><code>)</code> at position
<var>class</var>.
If <code></code><var>paramap1</var><code>[</code><var>class</var><code>]</code> is an integer then
<code>CompositionMaps(</code><var>paramap2</var><code>, </code><var>paramap1</var><code>, </code><var>class</var><code>)</code> is equal to
<code></code><var>paramap2</var><code>[ </code><var>paramap1</var><code>[ </code><var>class</var><code> ] ]</code>.
Otherwise it is the union of <code></code><var>paramap2</var><code>[</code><var>i</var><code>]</code> for <var>i</var> in
<code></code><var>paramap1</var><code>[ </code><var>class</var><code> ]</code>.
<p>
<pre>
gap&gt; map1:= [ 1, [ 2 .. 4 ], [ 4, 5 ], 1 ];;
gap&gt; map2:= [ [ 1, 2 ], 2, 2, 3, 3 ];;
gap&gt; CompositionMaps( map2, map1 );
[ [ 1, 2 ], [ 2, 3 ], 3, [ 1, 2 ] ]
gap&gt; CompositionMaps( map1, map2 );
[ [ 1, 2, 3, 4 ], [ 2, 3, 4 ], [ 2, 3, 4 ], [ 4, 5 ], [ 4, 5 ] ]
</pre>
<p>
<a name = "SSEC003.2"></a>
<li><code>InverseMap( </code><var>paramap</var><code> ) F</code>
<p>
For a parametrized map <var>paramap</var>,
<code>InverseMap</code> returns a mutable parametrized map whose <i>i</i>-th entry is
unbound if <i>i</i> is not in the image of <var>paramap</var>,
equal to <i>j</i> if <i>i</i> is (in) the image of <code></code><var>paramap</var><code>[</code><var>j</var><code>]</code> exactly for
<i>j</i>, and equal to the set of all preimages of <i>i</i> under <var>paramap</var>
otherwise.
<p>
We have <code>CompositionMaps( </code><var>paramap</var><code>, InverseMap( </code><var>paramap</var><code> ) )</code>
the identity map.
<p>
<pre>
gap&gt; tbl:= CharacterTable( "2.A5" );;  f:= CharacterTable( "A5" );;
gap&gt; fus:= GetFusionMap( tbl, f );
[ 1, 1, 2, 3, 3, 4, 4, 5, 5 ]
gap&gt; inv:= InverseMap( fus );
[ [ 1, 2 ], 3, [ 4, 5 ], [ 6, 7 ], [ 8, 9 ] ]
gap&gt; CompositionMaps( fus, inv );
[ 1, 2, 3, 4, 5 ]
gap&gt; # transfer a power map ``up'' to the factor group
gap&gt; pow:= PowerMap( tbl, 2 );
[ 1, 1, 2, 4, 4, 8, 8, 6, 6 ]
gap&gt; CompositionMaps( fus, CompositionMaps( pow, inv ) );
[ 1, 1, 3, 5, 4 ]
gap&gt; last = PowerMap( f, 2 );
true
gap&gt; # transfer a power map of the factor group ``down'' to the group
gap&gt; CompositionMaps( inv, CompositionMaps( PowerMap( f, 2 ), fus ) );
[ [ 1, 2 ], [ 1, 2 ], [ 1, 2 ], [ 4, 5 ], [ 4, 5 ], [ 8, 9 ], [ 8, 9 ], 
  [ 6, 7 ], [ 6, 7 ] ]
</pre>
<p>
<a name = "SSEC003.3"></a>
<li><code>ProjectionMap( </code><var>fusionmap</var><code> ) F</code>
<p>
For a map <var>fusionmap</var>, <code>ProjectionMap</code> returns a parametrized map
whose <i>i</i>-th entry is unbound if <i>i</i> is not in the image of <var>fusionmap</var>,
and equal to <i>j</i> if <i>j</i> is the smallest position such that <i>i</i> is
the image of <code></code><var>fusionmap</var><code>[</code><var>j</var><code>]</code>.
<p>
We have <code>CompositionMaps( </code><var>fusionmap</var><code>, ProjectionMap( </code><var>fusionmap</var><code> ) )</code>
the identity map, i.e., first projecting and then fusing yields the
identity.
Note that <var>fusionmap</var> must <strong>not</strong> be a parametrized map.
<p>
<pre>
gap&gt; ProjectionMap( [ 1, 1, 1, 2, 2, 2, 3, 4, 5, 5, 5, 6, 6, 6 ] );
[ 1, 4, 7, 8, 9, 12 ]
</pre>
<p>
<a name = "SSEC003.4"></a>
<li><code>Indirected( </code><var>character</var><code>, </code><var>paramap</var><code> ) O</code>
<p>
For a map <var>character</var> and a parametrized map <var>paramap</var>, <code>Indirected</code>
returns a parametrized map whose entry at position <i>i</i> is
<code></code><var>character</var><code>[ </code><var>paramap</var><code>[</code><var>i</var><code>] ]</code> if <code></code><var>paramap</var><code>[</code><var>i</var><code>]</code> is an integer,
and an unknown (see Chapter&nbsp;<a href="CHAP019.htm">Unknowns</a>) otherwise.
<p>
<pre>
gap&gt; tbl:= CharacterTable( "M12" );;
gap&gt; fus:= [ 1, 3, 4, [ 6, 7 ], 8, 10, [ 11, 12 ], [ 11, 12 ],
&gt;            [ 14, 15 ], [ 14, 15 ] ];;
gap&gt; List( Irr( tbl ){ [ 1 .. 6 ] }, x -&gt; Indirected( x, fus ) );
[ [ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 ], 
  [ 11, 3, 2, Unknown(9), 1, 0, Unknown(10), Unknown(11), 0, 0 ], 
  [ 11, 3, 2, Unknown(12), 1, 0, Unknown(13), Unknown(14), 0, 0 ], 
  [ 16, 0, -2, 0, 1, 0, 0, 0, Unknown(15), Unknown(16) ], 
  [ 16, 0, -2, 0, 1, 0, 0, 0, Unknown(17), Unknown(18) ], 
  [ 45, -3, 0, 1, 0, 0, -1, -1, 1, 1 ] ]
</pre>
<p>
<a name = "SSEC003.5"></a>
<li><code>Parametrized( </code><var>list</var><code> ) F</code>
<p>
For a list <var>list</var> of (parametrized) maps of the same length,
<code>Parametrized</code> returns the smallest parametrized map containing all
elements of <var>list</var>.
<p>
<code>Parametrized</code> is the inverse function to <code>ContainedMaps</code>
(see&nbsp;<a href="CHAP071.htm#SSEC003.6">ContainedMaps</a>).
<p>
<pre>
gap&gt; Parametrized( [ [ 1, 2, 3, 4, 5 ], [ 1, 3, 2, 4, 5 ],
&gt;                    [ 1, 2, 3, 4, 6 ] ] );
[ 1, [ 2, 3 ], [ 2, 3 ], 4, [ 5, 6 ] ]
</pre>
<p>
<a name = "SSEC003.6"></a>
<li><code>ContainedMaps( </code><var>paramap</var><code> ) F</code>
<p>
For a parametrized map <var>paramap</var>, <code>ContainedMaps</code> returns the set of all
maps contained in <var>paramap</var>.
<p>
<code>ContainedMaps</code> is the inverse function to <code>Parametrized</code>
(see&nbsp;<a href="CHAP071.htm#SSEC003.5">Parametrized</a>) in the sense that
<code>Parametrized( ContainedMaps( </code><var>paramap</var><code> ) )</code> is equal to <var>paramap</var>.
<p>
<pre>
gap&gt; ContainedMaps( [ 1, [ 2, 3 ], [ 2, 3 ], 4, [ 5, 6 ] ] );
[ [ 1, 2, 2, 4, 5 ], [ 1, 2, 2, 4, 6 ], [ 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 6 ], 
  [ 1, 3, 2, 4, 5 ], [ 1, 3, 2, 4, 6 ], [ 1, 3, 3, 4, 5 ], [ 1, 3, 3, 4, 6 ] ]
</pre>
<p>
<a name = "SSEC003.7"></a>
<li><code>UpdateMap( </code><var>character</var><code>, </code><var>paramap</var><code>, </code><var>indirected</var><code> ) F</code>
<p>
Let <var>character</var> be a map, <var>paramap</var> a parametrized map, and <var>indirected</var>
a parametrized map that is contained in
<code>CompositionMaps( </code><var>character</var><code>, </code><var>paramap</var><code> )</code>.
<p>
Then <code>UpdateMap</code> changes <var>paramap</var> to the parametrized map containing
exactly the maps whose composition with <var>character</var> is equal to
<var>indirected</var>.
<p>
If a contradiction is detected then <code>false</code> is returned immediately,
otherwise <code>true</code>.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "S4(4).2" );;  tbl:= CharacterTable( "He" );;
gap&gt; fus:= InitFusion( subtbl, tbl );;
gap&gt; fus;
[ 1, 2, 2, [ 2, 3 ], 4, 4, [ 7, 8 ], [ 7, 8 ], 9, 9, 9, [ 10, 11 ], 
  [ 10, 11 ], 18, 18, 25, 25, [ 26, 27 ], [ 26, 27 ], 2, [ 6, 7 ], [ 6, 7 ], 
  [ 6, 7, 8 ], 10, 10, 17, 17, 18, [ 19, 20 ], [ 19, 20 ] ]
gap&gt; chi:= Irr( tbl )[2];
Character( CharacterTable( "He" ), [ 51, 11, 3, 6, 0, 3, 3, -1, 1, 2, 0, 
  3*E(7)+3*E(7)^2+3*E(7)^4, 3*E(7)^3+3*E(7)^5+3*E(7)^6, 2, 
  E(7)+E(7)^2+2*E(7)^3+E(7)^4+2*E(7)^5+2*E(7)^6, 
  2*E(7)+2*E(7)^2+E(7)^3+2*E(7)^4+E(7)^5+E(7)^6, 1, 1, 0, 0, 
  -E(7)-E(7)^2-E(7)^4, -E(7)^3-E(7)^5-E(7)^6, E(7)+E(7)^2+E(7)^4, 
  E(7)^3+E(7)^5+E(7)^6, 1, 0, 0, -1, -1, 0, 0, E(7)+E(7)^2+E(7)^4, 
  E(7)^3+E(7)^5+E(7)^6 ] )
gap&gt; filt:= Filtered( Irr( subtbl ), x -&gt; x[1] = 50 );
[ Character( CharacterTable( "S4(4).2" ), [ 50, 10, 10, 2, 5, 5, -2, 2, 0, 0, 
      0, 1, 1, 0, 0, 0, 0, -1, -1, 10, 2, 2, 2, 1, 1, 0, 0, 0, -1, -1 ] ), 
  Character( CharacterTable( "S4(4).2" ), [ 50, 10, 10, 2, 5, 5, -2, 2, 0, 0, 
      0, 1, 1, 0, 0, 0, 0, -1, -1, -10, -2, -2, -2, -1, -1, 0, 0, 0, 1, 1 ] ) 
 ]
gap&gt; UpdateMap( chi, fus, filt[1] + TrivialCharacter( subtbl ) );
true
gap&gt; fus;
[ 1, 2, 2, 3, 4, 4, 8, 7, 9, 9, 9, 10, 10, 18, 18, 25, 25, [ 26, 27 ], 
  [ 26, 27 ], 2, [ 6, 7 ], [ 6, 7 ], [ 6, 7 ], 10, 10, 17, 17, 18, 
  [ 19, 20 ], [ 19, 20 ] ]
</pre>
<p>
<a name = "SSEC003.8"></a>
<li><code>MeetMaps( </code><var>paramap1</var><code>, </code><var>paramap2</var><code> ) F</code>
<p>
For two parametrized maps <var>paramap1</var> and <var>paramap2</var>, <code>MeetMaps</code> changes
<var>paramap1</var> such that the image of class <i>i</i> is the intersection of
<code></code><var>paramap1</var><code>[</code><var>i</var><code>]</code> and <code></code><var>paramap2</var><code>[</code><var>i</var><code>]</code>.
<p>
If this implies that no images remain for a class, the position of such a
class is returned.
If no such inconsistency occurs, <code>MeetMaps</code> returns <code>true</code>.
<p>
<pre>
gap&gt; map1:= [ [ 1, 2 ], [ 3, 4 ], 5, 6, [ 7, 8, 9 ] ];;
gap&gt; map2:= [ [ 1, 3 ], [ 3, 4 ], [ 5, 6 ], 6, [ 8, 9, 10 ] ];;
gap&gt; MeetMaps( map1, map2 );  map1;
true
[ 1, [ 3, 4 ], 5, 6, [ 8, 9 ] ]
</pre>
<p>
<a name = "SSEC003.9"></a>
<li><code>CommutativeDiagram( </code><var>paramap1</var><code>, </code><var>paramap2</var><code>, </code><var>paramap3</var><code>, </code><var>paramap4</var><code>[, </code><var>improvements</var><code>] ) F</code>
<p>
Let <var>paramap1</var>, <var>paramap2</var>, <var>paramap3</var>, <var>paramap4</var> be parametrized maps
covering parametrized maps <i>f</i><sub>1</sub>, <i>f</i><sub>2</sub>, <i>f</i><sub>3</sub>, <i>f</i><sub>4</sub> with the property
that <tt>CompositionMaps</tt>( <i>f</i><sub>2</sub>, <i>f</i><sub>1</sub> ) is equal to
<tt>CompositionMaps</tt>( <i>f</i><sub>4</sub>, <i>f</i><sub>3</sub> ).
<p>
<code>CommutativeDiagram</code> checks this consistency, and changes the arguments
such that all possible images are removed that cannot occur in the
parametrized maps <i>f</i><sub><i>i</i></sub>.
<p>
The return value is <code>fail</code> if an inconsistency was found.
Otherwise a record with the components <code>imp1</code>, <code>imp2</code>, <code>imp3</code>, <code>imp4</code>
is returned, each bound to the list of positions where the corresponding
parametrized map was changed,
<p>
The optional argument <var>improvements</var> must be a record with components
<code>imp1</code>, <code>imp2</code>, <code>imp3</code>, <code>imp4</code>.
If such a record is specified then only diagrams are considered where
entries of the <i>i</i>-th component occur as preimages of the <i>i</i>-th
parametrized map.
<p>
When an inconsistency is detected,
<code>CommutativeDiagram</code> immediately returns <code>fail</code>.
Otherwise a record is returned that contains four lists <code>imp1</code>, &#8230;,
<code>imp4</code>:
<code>imp</code><var>i</var><code></code> is the list of classes where <var>paramap_i</var> was changed.
<p>
<pre>
gap&gt; map1:= [ [ 1, 2, 3 ], [ 1, 3 ] ];;  map2:= [ [ 1, 2 ], 1, [ 1, 3 ] ];;
gap&gt; map3:= [ [ 2, 3 ], 3 ];;  map4:= [ , 1, 2, [ 1, 2 ] ];;
gap&gt; imp:= CommutativeDiagram( map1, map2, map3, map4 );
rec( imp1 := [ 2 ], imp2 := [ 1 ], imp3 := [  ], imp4 := [  ] )
gap&gt; map1;  map2;  map3;  map4;
[ [ 1, 2, 3 ], 1 ]
[ 2, 1, [ 1, 3 ] ]
[ [ 2, 3 ], 3 ]
[ , 1, 2, [ 1, 2 ] ]
gap&gt; imp2:= CommutativeDiagram( map1, map2, map3, map4, imp );
rec( imp1 := [  ], imp2 := [  ], imp3 := [  ], imp4 := [  ] )
</pre>
<p>
<a name = "SSEC003.10"></a>
<li><code>CheckFixedPoints( </code><var>inside1</var><code>, </code><var>between</var><code>, </code><var>inside2</var><code> ) F</code>
<p>
Let <var>inside1</var>, <var>between</var>, <var>inside2</var> be parametrized maps,
where <var>between</var> is assumed to map each fixed point of <var>inside1</var>
(that is, <code></code><var>inside1</var><code>[</code><var>i</var><code>] = </code><var>i</var><code></code>) to a fixed point of <var>inside2</var>
(that is, <var>between</var>[<var>i</var>] is either an integer that is fixed by <var>inside2</var>
or a list that has nonempty intersection with the union of its images
under <var>inside2</var>).
<code>CheckFixedPoints</code> changes <var>between</var> and <var>inside2</var> by removing all those
entries violate this condition.
<p>
When an inconsistency is detected,
<code>CheckFixedPoints</code> immediately returns <code>fail</code>.
Otherwise the list of positions is returned where changes occurred.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "L4(3).2_2" );;
gap&gt; tbl:= CharacterTable( "O7(3)" );;
gap&gt; fus:= InitFusion( subtbl, tbl );;  fus{ [ 48, 49 ] };
[ [ 54, 55, 56, 57 ], [ 54, 55, 56, 57 ] ]
gap&gt; CheckFixedPoints( ComputedPowerMaps( subtbl )[5], fus,
&gt;        ComputedPowerMaps( tbl )[5] );
[ 48, 49 ]
gap&gt; fus{ [ 48, 49 ] };
[ [ 56, 57 ], [ 56, 57 ] ]
</pre>
<p>
<a name = "SSEC003.11"></a>
<li><code>TransferDiagram( </code><var>inside1</var><code>, </code><var>between</var><code>, </code><var>inside2</var><code>[, </code><var>improvements</var><code>] ) F</code>
<p>
Let <var>inside1</var>, <var>between</var>, <var>inside2</var> be parametrized maps
covering parametrized maps <i>m</i><sub>1</sub>, <i>f</i>, <i>m</i><sub>2</sub> with the property
that <tt>CompositionMaps</tt>( <i>m</i><sub>2</sub>, <i>f</i> ) is equal to
<tt>CompositionMaps</tt>( <i>f</i>, <i>m</i><sub>1</sub> ).
<p>
<code>TransferDiagram</code> checks this consistency, and changes the arguments
such that all possible images are removed that cannot occur in the
parametrized maps <i>m</i><sub><i>i</i></sub> and <i>f</i>.
<p>
So <code>TransferDiagram</code> is similar to <code>CommutativeDiagram</code>
(see&nbsp;<a href="CHAP071.htm#SSEC003.9">CommutativeDiagram</a>),
but <var>between</var> occurs twice in each diagram checked.
<p>
If a record <var>improvements</var> with fields <code>impinside1</code>, <code>impbetween</code> and
<code>impinside2</code> is specified, only those diagrams with elements of
<code>impinside1</code> as preimages of <var>inside1</var>, elements of <code>impbetween</code> as
preimages of <var>between</var> or elements of <code>impinside2</code> as preimages of
<var>inside2</var> are considered.
<p>
When an inconsistency is detected,
<code>TransferDiagram</code> immediately returns <code>fail</code>.
Otherwise a record is returned that contains three lists <code>impinside1</code>,
<code>impbetween</code>, and <code>impinside2</code> of positions where the arguments were
changed.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "2F4(2)" );;  tbl:= CharacterTable( "Ru" );;
gap&gt; fus:= InitFusion( subtbl, tbl );;
gap&gt; permchar:= Sum( Irr( tbl ){ [ 1, 5, 6 ] } );;
gap&gt; CheckPermChar( subtbl, tbl, fus, permchar );; fus;
[ 1, 2, 2, 4, 5, 7, 8, 9, 11, 14, 14, [ 13, 15 ], 16, [ 18, 19 ], 20, 
  [ 25, 26 ], [ 25, 26 ], 5, 5, 6, 8, 14, [ 13, 15 ], [ 18, 19 ], [ 18, 19 ], 
  [ 25, 26 ], [ 25, 26 ], 27, 27 ]
gap&gt; tr:= TransferDiagram( PowerMap( subtbl, 2 ), fus, PowerMap( tbl, 2 ) );
rec( impinside1 := [  ], impbetween := [ 12, 23 ], impinside2 := [  ] )
gap&gt; tr:= TransferDiagram( PowerMap( subtbl, 3 ), fus, PowerMap( tbl, 3 ) );
rec( impinside1 := [  ], impbetween := [ 14, 24, 25 ], impinside2 := [  ] )
gap&gt; tr:= TransferDiagram( PowerMap( subtbl, 3 ), fus, PowerMap( tbl, 3 ),
&gt;             tr );
rec( impinside1 := [  ], impbetween := [  ], impinside2 := [  ] )
gap&gt; fus;
[ 1, 2, 2, 4, 5, 7, 8, 9, 11, 14, 14, 15, 16, 18, 20, [ 25, 26 ], [ 25, 26 ], 
  5, 5, 6, 8, 14, 13, 19, 19, [ 25, 26 ], [ 25, 26 ], 27, 27 ]
</pre>
<p>
<a name = "SSEC003.12"></a>
<li><code>TestConsistencyMaps( </code><var>powermap1</var><code>, </code><var>fusionmap</var><code>, </code><var>powermap2</var><code>[, </code><var>fus_imp</var><code>] ) F</code>
<p>
Let <var>powermap1</var> and <var>powermap2</var> be lists of parametrized maps,
and <var>fusionmap</var> a parametrized map,
such that for each <i>i</i>, the <i>i</i>-th entry in <var>powermap1</var>, <var>fusionmap</var>,
and the <i>i</i>-th entry in <var>powermap2</var> (if bound) are valid arguments for
<code>TransferDiagram</code> (see&nbsp;<a href="CHAP071.htm#SSEC003.11">TransferDiagram</a>).
So a typical situation for applying <code>TestConsistencyMaps</code> is that
<var>fusionmap</var> is an approximation of a class fusion, and <var>powermap1</var>,
<var>powermap2</var> are the lists of power maps of the subgroup and the group.
<p>
<code>TestConsistencyMaps</code> repeatedly applies <code>TransferDiagram</code> to these
arguments for all <i>i</i> until no more changes occur.
<p>
If a list <var>fus_imp</var> is specified then only those diagrams with
elements of <var>fus_imp</var> as preimages of <var>fusionmap</var> are considered.
<p>
When an inconsistency is detected,
<code>TestConsistencyMaps</code> immediately returns <code>false</code>.
Otherwise <code>true</code> is returned.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "2F4(2)" );;  tbl:= CharacterTable( "Ru" );;
gap&gt; fus:= InitFusion( subtbl, tbl );;
gap&gt; permchar:= Sum( Irr( tbl ){ [ 1, 5, 6 ] } );;
gap&gt; CheckPermChar( subtbl, tbl, fus, permchar );; fus;
[ 1, 2, 2, 4, 5, 7, 8, 9, 11, 14, 14, [ 13, 15 ], 16, [ 18, 19 ], 20, 
  [ 25, 26 ], [ 25, 26 ], 5, 5, 6, 8, 14, [ 13, 15 ], [ 18, 19 ], [ 18, 19 ], 
  [ 25, 26 ], [ 25, 26 ], 27, 27 ]
gap&gt; TestConsistencyMaps( ComputedPowerMaps( subtbl ), fus,
&gt;        ComputedPowerMaps( tbl ) );
true
gap&gt; fus;
[ 1, 2, 2, 4, 5, 7, 8, 9, 11, 14, 14, 15, 16, 18, 20, [ 25, 26 ], [ 25, 26 ], 
  5, 5, 6, 8, 14, 13, 19, 19, [ 25, 26 ], [ 25, 26 ], 27, 27 ]
gap&gt; Indeterminateness( fus );
16
</pre>
<p>
<a name = "SSEC003.13"></a>
<li><code>Indeterminateness( </code><var>paramap</var><code> ) F</code>
<p>
For a parametrized map <var>paramap</var>, <code>Indeterminateness</code> returns the number
of maps contained in <var>paramap</var>, that is, the product of lengths of lists
in <var>paramap</var> denoting lists of several images.
<p>
<pre>
gap&gt; Indeterminateness( [ 1, [ 2, 3 ], [ 4, 5 ], [ 6, 7, 8, 9, 10 ], 11 ] );
20
</pre>
<p>
<a name = "SSEC003.14"></a>
<li><code>PrintAmbiguity( </code><var>list</var><code>, </code><var>paramap</var><code> ) F</code>
<p>
For each map in the list <var>list</var>, <code>PrintAmbiguity</code> prints its position in
<var>list</var>,
the indeterminateness (see&nbsp;<a href="CHAP071.htm#SSEC003.13">Indeterminateness</a>) of the composition with
the parametrized map <var>paramap</var>,
and the list of positions where a list of images occurs in this
composition.
<p>
<pre>
gap&gt; paramap:= [ 1, [ 2, 3 ], [ 3, 4 ], [ 2, 3, 4 ], 5 ];;
gap&gt; list:= [ [ 1, 1, 1, 1, 1 ], [ 1, 1, 2, 2, 3 ], [ 1, 2, 3, 4, 5 ] ];;
gap&gt; PrintAmbiguity( list, paramap );
1 1 [  ]
2 4 [ 2, 4 ]
3 12 [ 2, 3, 4 ]
</pre>
<p>
<a name = "SSEC003.15"></a>
<li><code>ContainedSpecialVectors( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>paracharacter</var><code>, </code><var>func</var><code> ) F</code>
<a name = "SSEC003.15"></a>
<li><code>IntScalarProducts( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>candidate</var><code> ) F</code>
<a name = "SSEC003.15"></a>
<li><code>NonnegIntScalarProducts( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>candidate</var><code> ) F</code>
<a name = "SSEC003.15"></a>
<li><code>ContainedPossibleVirtualCharacters( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>paracharacter</var><code> ) F</code>
<a name = "SSEC003.15"></a>
<li><code>ContainedPossibleCharacters( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>paracharacter</var><code> ) F</code>
<p>
Let <var>tbl</var> be an ordinary character table,
<var>chars</var> a list of class functions (or values lists),
<var>paracharacter</var> a parametrized class function of <var>tbl</var>,
and <var>func</var> a function that expects the three arguments <var>tbl</var>, <var>chars</var>,
and a values list of a class function, and that returns either <code>true</code> or
<code>false</code>.
<p>
<code>ContainedSpecialVectors</code> returns
the list of all those elements <var>vec</var> of <var>paracharacter</var> that
have integral norm,
have integral scalar product with the principal character of <var>tbl</var>,
and that satisfy <code></code><var>func</var><code>( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>vec</var><code> ) = true</code>,
<p>
<a name = "I8"></a>

<a name = "I8"></a>
<a name = "I9"></a>

<a name = "I10"></a>

<a name = "I11"></a>

<a name = "I11"></a>
<a name = "I12"></a>

Two special cases of <var>func</var> are the check whether the scalar products in
<var>tbl</var> between the vector <var>vec</var> and all lists in <var>chars</var> are integers or
nonnegative integers, respectively.
These functions are accessible as global variables <code>IntScalarProducts</code>
and <code>NonnegIntScalarProducts</code>,
and <code>ContainedPossibleVirtualCharacters</code> and
<code>ContainedPossibleCharacters</code> provide access to these special cases of
<code>ContainedSpecialVectors</code>.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "HSM12" );;  tbl:= CharacterTable( "HS" );;
gap&gt; fus:= InitFusion( subtbl, tbl );;
gap&gt; rest:= CompositionMaps( Irr( tbl )[8], fus );
[ 231, [ -9, 7 ], [ -9, 7 ], [ -9, 7 ], 6, 15, 15, [ -1, 15 ], [ -1, 15 ], 1, 
  [ 1, 6 ], [ 1, 6 ], [ 1, 6 ], [ 1, 6 ], [ -2, 0 ], [ 1, 2 ], [ 1, 2 ], 
  [ 1, 2 ], 0, 0, 1, 0, 0, 0, 0 ]
gap&gt; irr:= Irr( subtbl );;
gap&gt; # no further condition
gap&gt; cont1:= ContainedSpecialVectors( subtbl, irr, rest,
&gt;                function( tbl, chars, vec ) return true; end );;
gap&gt; Length( cont1 );
24
gap&gt; # require scalar products to be integral
gap&gt; cont2:= ContainedSpecialVectors( subtbl, irr, rest,
&gt;                IntScalarProducts );
[ [ 231, 7, -9, -9, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 
      0, 0, 0, 0 ], 
  [ 231, 7, -9, 7, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 0, 
      0, 0, 0 ], 
  [ 231, 7, -9, -9, 6, 15, 15, 15, 15, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 
      0, 0, 0, 0 ], 
  [ 231, 7, -9, 7, 6, 15, 15, 15, 15, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 0, 
      0, 0, 0 ] ]
gap&gt; # additionally require scalar products to be nonnegative
gap&gt; cont3:= ContainedSpecialVectors( subtbl, irr, rest,
&gt;                NonnegIntScalarProducts );
[ [ 231, 7, -9, -9, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 
      0, 0, 0, 0 ], 
  [ 231, 7, -9, 7, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 0, 
      0, 0, 0 ] ]
gap&gt; cont2 = ContainedPossibleVirtualCharacters( subtbl, irr, rest );
true
gap&gt; cont3 = ContainedPossibleCharacters( subtbl, irr, rest );
true
</pre>
<p>
<a name = "SSEC003.16"></a>
<li><code>CollapsedMat( </code><var>mat</var><code>, </code><var>maps</var><code> ) F</code>
<p>
is a record with components
<p>
<p>
<dl compact>
<dt><code>fusion</code><dd>
   fusion that collapses those columns of <var>mat</var> that are equal in <var>mat</var>
   and also for all maps in the list <var>maps</var>,
<p>
<dt><code>mat</code><dd>
   the image of <var>mat</var> under that fusion.
</dl>
<p>
<pre>
gap&gt; mat:= [ [ 1, 1, 1, 1 ], [ 2, -1, 0, 0 ], [ 4, 4, 1, 1 ] ];;
gap&gt; coll:= CollapsedMat( mat, [] );
rec( mat := [ [ 1, 1, 1 ], [ 2, -1, 0 ], [ 4, 4, 1 ] ], 
  fusion := [ 1, 2, 3, 3 ] )
gap&gt; List( last.mat, x -&gt; x{ last.fusion } ) = mat;
true
gap&gt; coll:= CollapsedMat( mat, [ [ 1, 1, 1, 2 ] ] );
rec( mat := [ [ 1, 1, 1, 1 ], [ 2, -1, 0, 0 ], [ 4, 4, 1, 1 ] ], 
  fusion := [ 1, 2, 3, 4 ] )
</pre>
<p>
<a name = "SSEC003.17"></a>
<li><code>ContainedDecomposables( </code><var>constituents</var><code>, </code><var>moduls</var><code>, </code><var>parachar</var><code>, </code><var>func</var><code> ) F</code>
<a name = "SSEC003.17"></a>
<li><code>ContainedCharacters( </code><var>tbl</var><code>, </code><var>constituents</var><code>, </code><var>parachar</var><code> ) F</code>
<p>
For these functions, 
let <var>constituents</var> be a list of <strong>rational</strong> class functions,
<var>moduls</var> a list of positive integers,
<var>parachar</var> a parametrized rational class function,
<var>func</var> a function that returns either <code>true</code> or <code>false</code> when called
with (a values list of) a class function,
and <var>tbl</var> a character table.
<p>
<code>ContainedDecomposables</code> returns the set of all elements &#967; of
<var>parachar</var> that satisfy <i>func</i> ( &#967;) = <tt>true</tt>
and that lie in the <b>Z</b>-lattice spanned by <var>constituents</var>,
modulo <var>moduls</var>.
The latter means they lie in the <b>Z</b>-lattice spanned by <var>constituents</var>
and the set
<br clear="all" /><table border="0" width="100%"><tr><td><table align="center" cellspacing="0"  cellpadding="2"><tr><td nowrap="nowrap" align="center"> { <i>moduls</i> [<i>i</i>] &#183;<i>e</i><sub><i>i</i></sub>; 1  &#8804; <i>i</i>  &#8804; <i>n</i> }, </td></tr></table></td></tr></table>
where <i>n</i> is the length of <var>parachar</var> and  <i>e</i><sub><i>i</i></sub> is the <i>i</i>-th standard
basis vector.
<p>
One application of <code>ContainedDecomposables</code> is the following.
<var>constituents</var> is a list of (values lists of) rational characters of an
ordinary character table <var>tbl</var>,
<var>moduls</var> is the list of centralizer orders of <var>tbl</var>
(see&nbsp;<a href="CHAP069.htm#SSEC008.6">SizesCentralizers</a>),
and <var>func</var> checks whether a vector in the lattice mentioned above has
nonnegative integral scalar product in <var>tbl</var> with all entries of
<var>constituents</var>.
This situation is handled by <code>ContainedCharacters</code>.
Note that the entries of the result list are <strong>not</strong> necessary linear
combinations of <var>constituents</var>,
and they are <strong>not</strong> necessarily characters of <var>tbl</var>.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "HSM12" );;  tbl:= CharacterTable( "HS" );;
gap&gt; rat:= RationalizedMat( Irr( subtbl ) );;
gap&gt; fus:= InitFusion( subtbl, tbl );;
gap&gt; rest:= CompositionMaps( Irr( tbl )[8], fus );
[ 231, [ -9, 7 ], [ -9, 7 ], [ -9, 7 ], 6, 15, 15, [ -1, 15 ], [ -1, 15 ], 1, 
  [ 1, 6 ], [ 1, 6 ], [ 1, 6 ], [ 1, 6 ], [ -2, 0 ], [ 1, 2 ], [ 1, 2 ], 
  [ 1, 2 ], 0, 0, 1, 0, 0, 0, 0 ]
gap&gt; # compute all vectors in the lattice
gap&gt; ContainedDecomposables( rat, SizesCentralizers( subtbl ), rest,
&gt;        ReturnTrue );
[ [ 231, 7, -9, -9, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 
      0, 0, 0, 0 ], 
  [ 231, 7, -9, -9, 6, 15, 15, 15, 15, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 
      0, 0, 0, 0 ], 
  [ 231, 7, -9, 7, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 0, 
      0, 0, 0 ], 
  [ 231, 7, -9, 7, 6, 15, 15, 15, 15, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 0, 
      0, 0, 0 ] ]
gap&gt; # compute only those vectors that are characters
gap&gt; ContainedDecomposables( rat, SizesCentralizers( subtbl ), rest,
&gt;        x -&gt; NonnegIntScalarProducts( subtbl, Irr( subtbl ), x ) );
[ [ 231, 7, -9, -9, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 
      0, 0, 0, 0 ], 
  [ 231, 7, -9, 7, 6, 15, 15, -1, -1, 1, 6, 6, 1, 1, -2, 1, 2, 2, 0, 0, 1, 0, 
      0, 0, 0 ] ]
</pre>
<p>
<p>
<h2><a name="SECT004">71.4 Subroutines for the Construction of Power Maps</a></h2>
<p><p>
<a name = "SSEC004.1"></a>
<li><code>InitPowerMap( </code><var>tbl</var><code>, </code><var>prime</var><code> ) F</code>
<p>
For an ordinary character table <var>tbl</var> and a prime <var>prime</var>,
<code>InitPowerMap</code> returns a parametrized map that is a first approximation
of the <var>prime</var>-th powermap of <var>tbl</var>,
using the conditions 1.&nbsp;and 2.&nbsp;listed in the description of
<code>PossiblePowerMaps</code> (see&nbsp;<a href="CHAP071.htm#SSEC001.2">PossiblePowerMaps</a>).
<p>
If there are classes for which no images are possible, according to these
criteria, then <code>fail</code> is returned.
<p>
<pre>
gap&gt; t:= CharacterTable( "U4(3).4" );;
gap&gt; pow:= InitPowerMap( t, 2 );
[ 1, 1, 3, 4, 5, [ 2, 16 ], [ 2, 16, 17 ], 8, 3, [ 3, 4 ], [ 11, 12 ], 
  [ 11, 12 ], [ 6, 7, 18, 19, 30, 31, 32, 33 ], 14, [ 9, 20 ], 1, 1, 2, 2, 3, 
  [ 3, 4, 5 ], [ 3, 4, 5 ], [ 6, 7, 18, 19, 30, 31, 32, 33 ], 8, 9, 9, 
  [ 9, 10, 20, 21, 22 ], [ 11, 12 ], [ 11, 12 ], 16, 16, [ 2, 16 ], 
  [ 2, 16 ], 17, 17, [ 6, 18, 30, 31, 32, 33 ], [ 6, 18, 30, 31, 32, 33 ], 
  [ 6, 7, 18, 19, 30, 31, 32, 33 ], [ 6, 7, 18, 19, 30, 31, 32, 33 ], 20, 20, 
  [ 9, 20 ], [ 9, 20 ], [ 9, 10, 20, 21, 22 ], [ 9, 10, 20, 21, 22 ], 24, 24, 
  [ 15, 25, 26, 40, 41, 42, 43 ], [ 15, 25, 26, 40, 41, 42, 43 ], [ 28, 29 ], 
  [ 28, 29 ], [ 28, 29 ], [ 28, 29 ] ]
</pre>
<p>
In the argument lists of the functions <code>Congruences</code>, <code>ConsiderKernels</code>,
and <code>ConsiderSmallerPowerMaps</code>,
<var>tbl</var> is an ordinary character table,
<var>chars</var> a list of (values lists of) characters of <var>tbl</var>,
<var>prime</var> a prime integer,
<var>approxmap</var> a parametrized map that is an approximation for the
<var>prime</var>-th power map of <var>tbl</var>
(e.g., a list returned by <code>InitPowerMap</code>, see&nbsp;<a href="CHAP071.htm#SSEC004.1">InitPowerMap</a>),
and <var>quick</var> a Boolean.
<p>
The <var>quick</var> value <code>true</code> means that only those classes are considered
for which <var>approxmap</var> lists more than one possible image.
<p>
<a name = "SSEC004.2"></a>
<li><code>Congruences( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>approxmap</var><code>, </code><var>prime</var><code>, </code><var>quick</var><code> ) F</code>
<p>
<code>Congruences</code> replaces the entries of <var>approxmap</var> by improved values,
according to condition 3.&nbsp;listed in the description of
<code>PossiblePowerMaps</code> (see&nbsp;<a href="CHAP071.htm#SSEC001.2">PossiblePowerMaps</a>).
<p>
For each class for which no images are possible according to the tests,
the new value of <var>approxmap</var> is an empty list.
<code>Congruences</code> returns <code>true</code> if no such inconsistencies occur,
and <code>false</code> otherwise.
<p>
<pre>
gap&gt; Congruences( t, Irr( t ), pow, 2, false );  pow;
true
[ 1, 1, 3, 4, 5, 2, 2, 8, 3, 4, 11, 12, [ 6, 7 ], 14, 9, 1, 1, 2, 2, 3, 4, 5, 
  [ 6, 7 ], 8, 9, 9, 10, 11, 12, 16, 16, 16, 16, 17, 17, 18, 18, [ 18, 19 ], 
  [ 18, 19 ], 20, 20, 20, 20, 22, 22, 24, 24, [ 25, 26 ], [ 25, 26 ], 28, 28, 
  29, 29 ]
</pre>
<p>
<a name = "SSEC004.3"></a>
<li><code>ConsiderKernels( </code><var>tbl</var><code>, </code><var>chars</var><code>, </code><var>approxmap</var><code>, </code><var>prime</var><code>, </code><var>quick</var><code> ) F</code>
<p>
<code>ConsiderKernels</code> replaces the entries of <var>approxmap</var> by improved values,
according to condition 4.&nbsp;listed in the description of
<code>PossiblePowerMaps</code> (see&nbsp;<a href="CHAP071.htm#SSEC001.2">PossiblePowerMaps</a>).
<p>
<code>Congruences</code> returns <code>true</code> if the orders of the kernels of all
characters in <var>chars</var> divide the order of the group of <var>tbl</var>,
and <code>false</code> otherwise.
<p>
<pre>
gap&gt; t:= CharacterTable( "A7.2" );;  init:= InitPowerMap( t, 2 );
[ 1, 1, 3, 4, [ 2, 9, 10 ], 6, 3, 8, 1, 1, [ 2, 9, 10 ], 3, [ 3, 4 ], 6, 
  [ 7, 12 ] ]
gap&gt; ConsiderKernels( t, Irr( t ), init, 2, false );
true
gap&gt; init;
[ 1, 1, 3, 4, 2, 6, 3, 8, 1, 1, 2, 3, [ 3, 4 ], 6, 7 ]
</pre>
<p>
<a name = "SSEC004.4"></a>
<li><code>ConsiderSmallerPowerMaps( </code><var>tbl</var><code>, </code><var>approxmap</var><code>, </code><var>prime</var><code>, </code><var>quick</var><code> ) F</code>
<p>
<code>ConsiderSmallerPowerMaps</code> replaces the entries of <var>approxmap</var>
by improved values,
according to condition 5.&nbsp;listed in the description of
<code>PossiblePowerMaps</code> (see&nbsp;<a href="CHAP071.htm#SSEC001.2">PossiblePowerMaps</a>).
<p>
<code>ConsiderSmallerPowerMaps</code> returns <code>true</code> if each class admits at least
one image after the checks, otherwise <code>false</code> is returned.
If no element orders of <var>tbl</var> are stored
(see&nbsp;<a href="CHAP069.htm#SSEC008.5">OrdersClassRepresentatives</a>) then <code>true</code> is returned without any
tests.
<p>
<pre>
gap&gt; t:= CharacterTable( "3.A6" );;  init:= InitPowerMap( t, 5 );
[ 1, [ 2, 3 ], [ 2, 3 ], 4, [ 5, 6 ], [ 5, 6 ], [ 7, 8 ], [ 7, 8 ], 9, 
  [ 10, 11 ], [ 10, 11 ], 1, [ 2, 3 ], [ 2, 3 ], 1, [ 2, 3 ], [ 2, 3 ] ]
gap&gt; Indeterminateness( init );
4096
gap&gt; ConsiderSmallerPowerMaps( t, init, 5, false );
true
gap&gt; Indeterminateness( init );
256
</pre>
<p>
<a name = "SSEC004.5"></a>
<li><code>MinusCharacter( </code><var>character</var><code>, </code><var>prime_powermap</var><code>, </code><var>prime</var><code> ) F</code>
<p>
Let <var>character</var> be (the list of values of) a class function &#967;,
<var>prime</var> a prime integer <i>p</i>, and <var>prime_powermap</var> a parametrized map
that is an approximation of the <i>p</i>-th power map for the character table
of &#967;.
<code>MinusCharacter</code> returns the parametrized map of values of &#967;<sup><i>p</i>&#8722;</sup>,
which is defined by &#967;<sup><i>p</i>&#8722;</sup>(<i>g</i>) = ( &#967;(<i>g</i>)<sup><i>p</i></sup> &#8722; &#967;(<i>g</i><sup><i>p</i></sup>) ) / <i>p</i>.
<p>
<pre>
gap&gt; tbl:= CharacterTable( "S7" );;  pow:= InitPowerMap( tbl, 2 );;
gap&gt; pow;
[ 1, 1, 3, 4, [ 2, 9, 10 ], 6, 3, 8, 1, 1, [ 2, 9, 10 ], 3, [ 3, 4 ], 6, 
  [ 7, 12 ] ]
gap&gt; chars:= Irr( tbl ){ [ 2 .. 5 ] };;
gap&gt; List( chars, x -&gt; MinusCharacter( x, pow, 2 ) );
[ [ 0, 0, 0, 0, [ 0, 1 ], 0, 0, 0, 0, 0, [ 0, 1 ], 0, 0, 0, [ 0, 1 ] ], 
  [ 15, -1, 3, 0, [ -2, -1, 0 ], 0, -1, 1, 5, -3, [ 0, 1, 2 ], -1, 0, 0, 
      [ 0, 1 ] ], 
  [ 15, -1, 3, 0, [ -1, 0, 2 ], 0, -1, 1, 5, -3, [ 1, 2, 4 ], -1, 0, 0, 1 ], 
  [ 190, -2, 1, 1, [ 0, 2 ], 0, 1, 1, -10, -10, [ 0, 2 ], -1, -1, 0, 
      [ -1, 0 ] ] ]
</pre>
<p>
<a name = "SSEC004.6"></a>
<li><code>PowerMapsAllowedBySymmetrizations( </code><var>tbl</var><code>, </code><var>subchars</var><code>, </code><var>chars</var><code>, </code><var>approxmap</var><code>, </code><var>prime</var><code>, </code><var>parameters</var><code> ) F</code>
<p>
Let <var>tbl</var> be an ordinary character table,
<var>prime</var> a prime integer,
<var>approxmap</var> a parametrized map that is an approximation of the <var>prime</var>-th
power map of <var>tbl</var>
(e.g., a list returned by <code>InitPowerMap</code>, see&nbsp;<a href="CHAP071.htm#SSEC004.1">InitPowerMap</a>),
<var>chars</var> and <var>subchars</var> two lists of (values lists of) characters of
<var>tbl</var>,
and <var>parameters</var> a record with components
<code>maxlen</code>, <code>minamb</code>, <code>maxamb</code> (three integers),
<code>quick</code> (a Boolean),
and <code>contained</code> (a function).
Usual values of <code>contained</code> are <code>ContainedCharacters</code> or
<code>ContainedPossibleCharacters</code>.
<p>
<code>PowerMapsAllowedBySymmetrizations</code> replaces the entries of <var>approxmap</var>
by improved values,
according to condition 6.&nbsp;listed in the description of
<code>PossiblePowerMaps</code> (see&nbsp;<a href="CHAP071.htm#SSEC001.2">PossiblePowerMaps</a>).
<p>
More precisely, the strategy used is as follows.
<p>
First, for each &#967; &#8712; <i>chars</i> ,
let <code>minus:= MinusCharacter(&#967;, </code><var>approxmap</var><code>, </code><var>prime</var><code>)</code>.
<ul>
<li>
    If <tt>Indeterminateness</tt><tt>(</tt> <tt>minus</tt> <tt>)</tt> = 1 and
    <code></code><var>parameters</var><code>.quick = false</code> then the scalar products of <code>minus</code> with
    <var>subchars</var> are checked;
    if not all scalar products are nonnegative integers then
    an empty list is returned,
    otherwise &#967; is deleted from the list of characters to inspect.
<li>
    Otherwise if <code>Indeterminateness( minus )</code> is smaller than
    <code></code><var>parameters</var><code>.minamb</code> then &#967; is deleted from the list of
    characters.
<li>
    If <code></code><var>parameters</var><code>.minamb</code>  &#8804;  <code>Indeterminateness( minus )</code>  &#8804; 
    <code></code><var>parameters</var><code>.maxamb</code> then
    construct the list of contained class functions
    <code>poss:= </code><var>parameters</var><code>.contained(</code><var>tbl</var><code>, </code><var>subchars</var><code>, minus)</code>
    and <code>Parametrized( poss )</code>,
    and improve the approximation of the power map using <code>UpdateMap</code>.
</ul>
<p>
If this yields no further immediate improvements then we branch.
If there is a character from <var>chars</var> left with less or equal
<code></code><var>parameters</var><code>.maxlen</code> possible symmetrizations,
compute the union of power maps allowed by these possibilities.
Otherwise we choose a class <i>C</i> such that the possible symmetrizations of
a character in <var>chars</var> differ at <i>C</i>,
and compute recursively the union of all allowed power maps with image
at <i>C</i> fixed in the set given by the current approximation of the power
map.
<p>
<pre>
gap&gt; tbl:= CharacterTable( "U4(3).4" );;
gap&gt; pow:= InitPowerMap( tbl, 2 );;
gap&gt; Congruences( tbl, Irr( tbl ), pow, 2 );;  pow;
[ 1, 1, 3, 4, 5, 2, 2, 8, 3, 4, 11, 12, [ 6, 7 ], 14, 9, 1, 1, 2, 2, 3, 4, 5, 
  [ 6, 7 ], 8, 9, 9, 10, 11, 12, 16, 16, 16, 16, 17, 17, 18, 18, [ 18, 19 ], 
  [ 18, 19 ], 20, 20, 20, 20, 22, 22, 24, 24, [ 25, 26 ], [ 25, 26 ], 28, 28, 
  29, 29 ]
gap&gt; PowerMapsAllowedBySymmetrizations( tbl, Irr( tbl ), Irr( tbl ),
&gt;       pow, 2, rec( maxlen:= 10, contained:= ContainedPossibleCharacters,
&gt;       minamb:= 2, maxamb:= infinity, quick:= false ) );
[ [ 1, 1, 3, 4, 5, 2, 2, 8, 3, 4, 11, 12, 6, 14, 9, 1, 1, 2, 2, 3, 4, 5, 6, 
      8, 9, 9, 10, 11, 12, 16, 16, 16, 16, 17, 17, 18, 18, 18, 18, 20, 20, 
      20, 20, 22, 22, 24, 24, 25, 26, 28, 28, 29, 29 ] ]
</pre>
<p>
<p>
<h2><a name="SECT005">71.5 Subroutines for the Construction of Class Fusions</a></h2>
<p><p>
<a name = "SSEC005.1"></a>
<li><code>InitFusion( </code><var>subtbl</var><code>, </code><var>tbl</var><code> ) F</code>
<p>
For two ordinary character tables <var>subtbl</var> and <var>tbl</var>,
<code>InitFusion</code> returns a parametrized map that is a first approximation
of the class fusion from <var>subtbl</var> to <var>tbl</var>,
using condition&nbsp;1.&nbsp;listed in the description of <code>PossibleClassFusions</code>
(see&nbsp;<a href="CHAP071.htm#SSEC002.6">PossibleClassFusions</a>).
<p>
If there are classes for which no images are possible, according to this
criterion, then <code>fail</code> is returned.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "2F4(2)" );;  tbl:= CharacterTable( "Ru" );;
gap&gt; fus:= InitFusion( subtbl, tbl );
[ 1, 2, 2, 4, [ 5, 6 ], [ 5, 6, 7, 8 ], [ 5, 6, 7, 8 ], [ 9, 10 ], 11, 14, 
  14, [ 13, 14, 15 ], [ 16, 17 ], [ 18, 19 ], 20, [ 25, 26 ], [ 25, 26 ], 
  [ 5, 6 ], [ 5, 6 ], [ 5, 6 ], [ 5, 6, 7, 8 ], [ 13, 14, 15 ], 
  [ 13, 14, 15 ], [ 18, 19 ], [ 18, 19 ], [ 25, 26 ], [ 25, 26 ], 
  [ 27, 28, 29 ], [ 27, 28, 29 ] ]
</pre>
<p>
<a name = "SSEC005.2"></a>
<li><code>CheckPermChar( </code><var>subtbl</var><code>, </code><var>tbl</var><code>, </code><var>approxmap</var><code>, </code><var>permchar</var><code> ) F</code>
<p>
<code>CheckPermChar</code> replaces the entries of the parametrized map <var>approxmap</var>
by improved values,
according to condition&nbsp;3.&nbsp;listed in the description of
<code>PossibleClassFusions</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.6">PossibleClassFusions</a>).
<p>
<code>CheckPermChar</code> returns <code>true</code> if no inconsistency occurred, and <code>false</code>
otherwise.
<p>
<a name = "I13"></a>

<pre>
gap&gt; permchar:= Sum( Irr( tbl ){ [ 1, 5, 6 ] } );;
gap&gt; CheckPermChar( subtbl, tbl, fus, permchar ); fus;
true
[ 1, 2, 2, 4, 5, 7, 8, 9, 11, 14, 14, [ 13, 15 ], 16, [ 18, 19 ], 20, 
  [ 25, 26 ], [ 25, 26 ], 5, 5, 6, 8, 14, [ 13, 15 ], [ 18, 19 ], [ 18, 19 ], 
  [ 25, 26 ], [ 25, 26 ], 27, 27 ]
</pre>
<p>
<a name = "SSEC005.3"></a>
<li><code>ConsiderTableAutomorphisms( </code><var>approxmap</var><code>, </code><var>grp</var><code> ) F</code>
<p>
<code>ConsiderTableAutomorphisms</code> replaces the entries of the parametrized map
<var>approxmap</var> by improved values, according to condition&nbsp;4.&nbsp;listed in the
description of <code>PossibleClassFusions</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.6">PossibleClassFusions</a>).
<p>
Afterwards exactly one representative of fusion maps (contained in
<var>approxmap</var>) in each orbit under the action of the permutation group
<var>grp</var> is contained in the modified parametrized map.
<p>
<code>ConsiderTableAutomorphisms</code> returns the list of positions where
<var>approxmap</var> was changed.
<p>
<a name = "I14"></a>

<pre>
gap&gt; ConsiderTableAutomorphisms( fus, AutomorphismsOfTable( tbl ) );
[ 16 ]
gap&gt; fus;
[ 1, 2, 2, 4, 5, 7, 8, 9, 11, 14, 14, [ 13, 15 ], 16, [ 18, 19 ], 20, 25, 
  [ 25, 26 ], 5, 5, 6, 8, 14, [ 13, 15 ], [ 18, 19 ], [ 18, 19 ], [ 25, 26 ], 
  [ 25, 26 ], 27, 27 ]
</pre>
<p>
<a name = "SSEC005.4"></a>
<li><code>FusionsAllowedByRestrictions( </code><var>subtbl</var><code>, </code><var>tbl</var><code>, </code><var>subchars</var><code>, </code><var>chars</var><code>, </code><var>approxmap</var><code>, </code><var>parameters</var><code> ) F</code>
<p>
Let <var>subtbl</var> and <var>tbl</var> be ordinary character tables,
<var>subchars</var> and <var>chars</var> two lists of (values lists of) characters of
<var>subtbl</var> and <var>tbl</var>, respectively,
<var>approxmap</var> a parametrized map that is an approximation of the class
fusion of <var>subtbl</var> in <var>tbl</var>,
and <var>parameters</var> a record with components
<code>maxlen</code>, <code>minamb</code>, <code>maxamb</code> (three integers),
<var>quick</var> (a Boolean),
and <code>contained</code> (a function).
Usual values of <code>contained</code> are <code>ContainedCharacters</code> or
<code>ContainedPossibleCharacters</code>.
<p>
<code>FusionsAllowedByResrictions</code> replaces the entries of <var>approxmap</var>
by improved values,
according to condition 5.&nbsp;listed in the description of
<code>PossibleClassFusions</code> (see&nbsp;<a href="CHAP071.htm#SSEC002.6">PossibleClassFusions</a>).
<p>
More precisely, the strategy used is as follows.
<p>
First, for each &#967; &#8712; <i>chars</i> ,
let <code>restricted:= CompositionMaps( &#967;, </code><var>approxmap</var><code> )</code>.
<ul>
<li>
    If <tt>Indeterminateness</tt><tt>(</tt> <tt>restricted</tt> <tt>)</tt> = 1 and
    <code></code><var>parameters</var><code>.quick = false</code> then the scalar products of <code>restricted</code>
    with <var>subchars</var> are checked;
    if not all scalar products are nonnegative integers then
    an empty list is returned,
    otherwise &#967; is deleted from the list of characters to inspect.
<li>
    Otherwise if <code>Indeterminateness( minus )</code> is smaller than
    <code></code><var>parameters</var><code>.minamb</code> then &#967; is deleted from the list of
    characters.
<li>
    If <code></code><var>parameters</var><code>.minamb</code>  &#8804;  <code>Indeterminateness( restricted )</code>
     &#8804;  <code></code><var>parameters</var><code>.maxamb</code> then construct
    <code>poss:= </code><var>parameters</var><code>.contained( </code><var>subtbl</var><code>, </code><var>subchars</var><code>, restricted )</code>
    and <code>Parametrized( poss )</code>,
    and improve the approximation of the fusion map using <code>UpdateMap</code>.
</ul>
<p>
If this yields no further immediate improvements then we branch.
If there is a character from <var>chars</var> left with less or equal
<code></code><var>parameters</var><code>.maxlen</code> possible restrictions,
compute the union of fusion maps allowed by these possibilities.
Otherwise we choose a class <i>C</i> such that the possible restrictions of a
character in <var>chars</var> differ at <i>C</i>,
and compute recursively the union of all allowed fusion maps with image
at <i>C</i> fixed in the set given by the current approximation of the fusion
map.
<p>
<pre>
gap&gt; subtbl:= CharacterTable( "U3(3)" );;  tbl:= CharacterTable( "J4" );;
gap&gt; fus:= InitFusion( subtbl, tbl );;
gap&gt; TestConsistencyMaps( ComputedPowerMaps( subtbl ), fus,
&gt;        ComputedPowerMaps( tbl ) );
true
gap&gt; fus;
[ 1, 2, 4, 4, [ 5, 6 ], [ 5, 6 ], [ 5, 6 ], 10, [ 12, 13 ], [ 12, 13 ], 
  [ 14, 15, 16 ], [ 14, 15, 16 ], [ 21, 22 ], [ 21, 22 ] ]
gap&gt; ConsiderTableAutomorphisms( fus, AutomorphismsOfTable( tbl ) );
[ 9 ]
gap&gt; fus;
[ 1, 2, 4, 4, [ 5, 6 ], [ 5, 6 ], [ 5, 6 ], 10, 12, [ 12, 13 ], 
  [ 14, 15, 16 ], [ 14, 15, 16 ], [ 21, 22 ], [ 21, 22 ] ]
gap&gt; FusionsAllowedByRestrictions( subtbl, tbl, Irr( subtbl ),
&gt;        Irr( tbl ), fus, rec( maxlen:= 10,
&gt;        contained:= ContainedPossibleCharacters, minamb:= 2,
&gt;        maxamb:= infinity, quick:= false ) );
[ [ 1, 2, 4, 4, 5, 5, 6, 10, 12, 13, 14, 14, 21, 21 ], 
  [ 1, 2, 4, 4, 6, 6, 6, 10, 12, 13, 15, 15, 22, 22 ], 
  [ 1, 2, 4, 4, 6, 6, 6, 10, 12, 13, 16, 16, 22, 22 ] ]
</pre>
<p>
<p>
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP070.htm">Previous</a>] [<a href ="CHAP072.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<font face="Gill Sans,Helvetica,Arial">GAP 4 manual<br>March 2006
</font></body></html>