<html><head><title>[ref] 38 Group Homomorphisms</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP037.htm">Previous</a>] [<a href ="CHAP039.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>38 Group Homomorphisms</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP038.htm#SECT001">Creating Group Homomorphisms</a>
<li> <A HREF="CHAP038.htm#SECT002">Operations for Group Homomorphisms</a>
<li> <A HREF="CHAP038.htm#SECT003">Efficiency of Homomorphisms</a>
<li> <A HREF="CHAP038.htm#SECT004">Homomorphism for very large groups</a>
<li> <A HREF="CHAP038.htm#SECT005">Nice Monomorphisms</a>
<li> <A HREF="CHAP038.htm#SECT006">Group Automorphisms</a>
<li> <A HREF="CHAP038.htm#SECT007">Groups of Automorphisms</a>
<li> <A HREF="CHAP038.htm#SECT008">Calculating with Group Automorphisms</a>
<li> <A HREF="CHAP038.htm#SECT009">Searching for Homomorphisms</a>
<li> <A HREF="CHAP038.htm#SECT010">Representations for Group Homomorphisms</a>
</ol><p>
<p>
A group homomorphism is a mapping from one group to another that respects
multiplication and inverses. They are implemented as a special class of
mappings, so in particular all operations for mappings, such as <code>Image</code>,
<code>PreImage</code>, <code>PreImagesRepresentative</code>,
<code>KernelOfMultiplicativeGeneralMapping</code>, <code>Source</code>, <code>Range</code>, <code>IsInjective</code> and
<code>IsSurjective</code>  (see chapter&nbsp;<a href="CHAP031.htm">Mappings</a>, in particular section&nbsp;<a href="CHAP031.htm#SECT008">Mappings that Respect Multiplication</a>) are applicable to them.
<p>
Homomorphisms can be used to transfer calculations into isomorphic groups in
another representation, for which better algorithms are available.
Section&nbsp;<a href="CHAP038.htm#SECT005">Nice Monomorphisms</a> explains a technique how to enforce this
automatically.
<p>
Homomorphisms are also used to represent group automorphisms, and section
<a href="CHAP038.htm#SECT006">Group Automorphisms</a> explains explains <font face="Gill Sans,Helvetica,Arial">GAP</font>'s facilities to work
with automorphism groups.
<p>
The penultimate section of this chapter, <a href="CHAP038.htm#SECT009">Searching for Homomorphisms</a>, explains
how to make <font face="Gill Sans,Helvetica,Arial">GAP</font> to search for all homomorphisms between two groups which
fulfill certain specifications.
<p>
<p>
<h2><a name="SECT001">38.1 Creating Group Homomorphisms</a></h2>
<p><p>
The most important way of creating group homomorphisms is to give images for
a set of group generators and to extend it to the group generated by them
by the homomorphism property.
<p>
<a name = "SSEC001.1"></a>
<li><code>GroupHomomorphismByImages( </code><var>G</var><code>, </code><var>H</var><code>, </code><var>gens</var><code>, </code><var>imgs</var><code> ) F</code>
<p>
<code>GroupHomomorphismByImages</code> returns the group homomorphism with
source <var>G</var> and range <var>H</var> that is defined by mapping the list <var>gens</var> of
generators of <var>G</var> to the list <var>imgs</var> of images in <var>H</var>.
<p>
If <var>gens</var> does not generate <var>G</var> or if the mapping of the generators does
not extend to a homomorphism
(i.e., if mapping the generators describes only a multi-valued mapping)
then <code>fail</code> is returned.
<p>
This test can be quite expensive. If one is certain that the mapping of
the generators extends to a homomorphism,
one can avoid the checks by calling <code>GroupHomomorphismByImagesNC</code>.
(There also is the possibility to
construct potentially multi-valued mappings with
<code>GroupGeneralMappingByImages</code> and to test with <code>IsMapping</code> that
they are indeed homomorphisms.)
<p>
<a name = "SSEC001.2"></a>
<li><code>GroupHomomorphismByImagesNC( </code><var>G</var><code>, </code><var>H</var><code>, </code><var>gensG</var><code>, </code><var>gensH</var><code> ) O</code>
<p>
<code>GroupHomomorphismByImagesNC</code> creates a homomorphism as
<code>GroupHomomorphismByImages</code> does, however it does not test whether
<var>gens</var> generates <var>G</var> and that the mapping of
<var>gens</var> to <var>imgs</var> indeed defines a group homomorphism.
Because these tests can be expensive it can be substantially faster than
<code>GroupHomomorphismByImages</code>.
Results are unpredictable if the conditions do not hold.
<p>
(For creating a possibly multi-valued mapping from <var>G</var> to <var>H</var> that
respects multiplication and inverses,
<code>GroupGeneralMappingByImages</code> can be used.)
<p>
<pre>
gap&gt; gens:=[(1,2,3,4),(1,2)];
[ (1,2,3,4), (1,2) ]
gap&gt; g:=Group(gens);
Group([ (1,2,3,4), (1,2) ])
gap&gt; h:=Group((1,2,3),(1,2));
Group([ (1,2,3), (1,2) ])
gap&gt; hom:=GroupHomomorphismByImages(g,h,gens,[(1,2),(1,3)]);
[ (1,2,3,4), (1,2) ] -&gt; [ (1,2), (1,3) ]
gap&gt; Image(hom,(1,4));
(2,3)
gap&gt; map:=GroupHomomorphismByImages(g,h,gens,[(1,2,3),(1,2)]);
fail
</pre>
<p>
<a name = "SSEC001.3"></a>
<li><code>GroupGeneralMappingByImages( </code><var>G</var><code>, </code><var>H</var><code>, </code><var>gensG</var><code>, </code><var>gensH</var><code> ) O</code>
<p>
returns a generalized mapping defined by extending the mapping from
<var>gensG</var> to <var>gensH</var> homomorphically.
(<code>GroupHomomorphismByImages</code> creates a <code>GroupGeneralMappingByImages</code> and
tests whether it <code>IsMapping</code>.)
<p>
<pre>
gap&gt; map:=GroupGeneralMappingByImages(g,h,gens,[(1,2,3),(1,2)]);
[ (1,2,3,4), (1,2) ] -&gt; [ (1,2,3), (1,2) ]
gap&gt; IsMapping(map);
false
</pre>
<p>
<strong>A second</strong> way to create homomorphisms is to give functions that compute image
and preimage. (A similar case are homomorphisms that are induced by
conjugation. Special constructors for such mappings are described in
section&nbsp;<a href="CHAP038.htm#SECT006">Group Automorphisms</a>).
<p>
<a name = "SSEC001.4"></a>
<li><code>GroupHomomorphismByFunction( </code><var>S</var><code>, </code><var>R</var><code>, </code><var>fun</var><code> ) F</code>
<li><code>GroupHomomorphismByFunction( </code><var>S</var><code>, </code><var>R</var><code>, </code><var>fun</var><code>, </code><var>invfun</var><code> ) F</code>
<li><code>GroupHomomorphismByFunction( </code><var>S</var><code>, </code><var>R</var><code>, </code><var>fun</var><code>, `false</code>, <var>prefun</var> ) F</code>
<p>
<code>GroupHomomorphismByFunction</code> returns a group homomorphism <var>hom</var> with
source <var>S</var> and range <var>R</var>, such that each element <var>s</var> of <var>S</var> is mapped to
the element <code></code><var>fun</var><code>( </code><var>s</var><code> )</code>, where <var>fun</var> is a <font face="Gill Sans,Helvetica,Arial">GAP</font> function.
<p>
If the argument <var>invfun</var> is bound then <var>hom</var> is a bijection between <var>S</var>
and <var>R</var>, and the preimage of each element <var>r</var> of <var>R</var> is given by
<code></code><var>invfun</var><code>( </code><var>r</var><code> )</code>, where <var>invfun</var> is a <font face="Gill Sans,Helvetica,Arial">GAP</font>  function.
<p>
In the third variant, a function <var>prefun</var> is given that can be used to
compute a single preimage. In this case, the third entry must be
<code>false</code>.
<p>
No test is performed on whether the functions actually give an
homomorphism between both groups because this would require testing the
full multiplication table.
<p>
<code>GroupHomomorphismByFunction</code> creates a mapping which
<code>IsSPGeneralMapping</code>.
<p>
<pre>
gap&gt; hom:=GroupHomomorphismByFunction(g,h,
&gt; function(x) if SignPerm(x)=-1 then return (1,2); else return ();fi;end);
MappingByFunction( Group([ (1,2,3,4), (1,2) ]), Group([ (1,2,3), (1,2) 
 ]), function( x ) ... end )
gap&gt; ImagesSource(hom);
Group([ (1,2), (1,2) ])
gap&gt; Image(hom,(1,2,3,4));
(1,2)
</pre>
<p>
<strong>The third</strong> class are epimorphisms from a group onto its factor
group. Such homomorphisms can be constructed by
<code>NaturalHomomorphismByNormalSubgroup</code>
(see&nbsp;<a href="CHAP037.htm#SSEC018.1">NaturalHomomorphismByNormalSubgroup</a>).
<p>
<strong>The fourth</strong> class is homomorphisms in a permutation group that are induced by
an action on a set. Such homomorphisms are described in the context of group
actions, see chapter&nbsp;<a href="CHAP039.htm">Group Actions</a> and in particular
section&nbsp;<a href="CHAP039.htm#SSEC006.1">ActionHomomorphism</a>.
<p>
<a name = "SSEC001.5"></a>
<li><code>AsGroupGeneralMappingByImages( </code><var>map</var><code> ) A</code>
<p>
 If <var>map</var> is a mapping from one group to another this attribute returns
 a group general mapping that which implements the same abstract
 mapping. (Some operations can be performed more effective in this
 representation, see
 also&nbsp;<a href="CHAP038.htm#SSEC010.2">IsGroupGeneralMappingByAsGroupGeneralMappingByImages</a>.)
<p>
<pre>
gap&gt; AsGroupGeneralMappingByImages(hom);
[ (1,2,3,4), (1,2) ] -&gt; [ (1,2), (1,2) ]
</pre>
<p>
<p>
<h2><a name="SECT002">38.2 Operations for Group Homomorphisms</a></h2>
<p><a name = "I0"></a>

<p>
Group homomorphisms are mappings, so all the operations and properties for
mappings described in chapter&nbsp;<a href="CHAP031.htm">Mappings</a> are applicable to them. (However
often much better methods, than for general mappings are available.)
<p>
Group homomorphisms will map groups to groups by just mapping the set of
generators.
<p>
<code>KernelOfMultiplicativeGeneralMapping</code> can be used to compute the kernel
of a group homomorphism.
<p>
<pre>
gap&gt; hom:=GroupHomomorphismByImages(g,h,gens,[(1,2),(1,3)]);;
gap&gt; Kernel(hom);
Group([ (1,4)(2,3), (1,2)(3,4) ])
</pre>
<p>
Homomorphisms can map between groups in different representations and are
also used to get isomorphic groups in a different representation.
<p>
<pre>
gap&gt; m1:=[[0,-1],[1,0]];;m2:=[[0,-1],[1,1]];;
gap&gt; sl2z:=Group(m1,m2);; # SL(2,Integers) as matrix group
gap&gt; F:=FreeGroup(2);;
gap&gt; psl2z:=F/[F.1^2,F.2^3]; #PSL(2,Z) as FP group
&lt;fp group on the generators [ f1, f2 ]&gt;
gap&gt; phom:=GroupHomomorphismByImagesNC(sl2z,psl2z,[m1,m2],
&gt; GeneratorsOfGroup(psl2z)); # the non NC-version would be expensive
[ [ [ 0, -1 ], [ 1, 0 ] ], [ [ 0, -1 ], [ 1, 1 ] ] ] -&gt; [ f1, f2 ]
gap&gt; Kernel(phom); # the diagonal matrices
Group([ [ [ -1, 0 ], [ 0, -1 ] ], [ [ -1, 0 ], [ 0, -1 ] ] ])
gap&gt; p1:=(1,2)(3,4);;p2:=(2,4,5);;a5:=Group(p1,p2);;
gap&gt; ahom:=GroupHomomorphismByImages(psl2z,a5,
&gt; GeneratorsOfGroup(psl2z),[p1,p2]); # here homomorphism test is cheap.
[ f1, f2 ] -&gt; [ (1,2)(3,4), (2,4,5) ]
gap&gt; u:=PreImage(ahom,Group((1,2,3),(1,2)(4,5)));
Group(&lt;fp, no generators known&gt;)
gap&gt; Index(psl2z,u);
10
gap&gt; isofp:=IsomorphismFpGroup(u);; Image(isofp);
&lt;fp group of size infinity on the generators [ F1, F2, F3, F4 ]&gt;
gap&gt; RelatorsOfFpGroup(Image(isofp));
[ F1^2, F4^2, F3^3 ]
gap&gt; up:=PreImage(phom,u);;
gap&gt; List(GeneratorsOfGroup(up),TraceMat);
[ -2, -2, 0, -4, 1, 0 ]
</pre>
<p>
<a name = "I1"></a>

For an automorphism <var>aut</var>, <code>Inverse</code> returns the inverse automorphism
<i>aut</i> <sup>&#8722;1</sup>. However if <var>hom</var> is a bijective homomorphism between
different groups, or if <var>hom</var> is injective and considered to be a bijection
to its image, the operation <code>InverseGeneralMapping</code> should be used instead.
(See&nbsp;<a href="CHAP030.htm#SSEC010.8">Inverse</a> for a further discussion of this problem.)
<p>
<pre>
gap&gt; iso:=IsomorphismPcGroup(g);
Pcgs([ (3,4), (2,4,3), (1,4)(2,3), (1,3)(2,4) ]) -&gt; [ f1, f2, f3, f4 ]
gap&gt; Inverse(iso);
#I  The mapping must be bijective and have source=range
#I  You might want to use `InverseGeneralMapping'
fail
gap&gt; InverseGeneralMapping(iso);
[ f1, f2, f3, f4 ] -&gt; Pcgs([ (3,4), (2,4,3), (1,4)(2,3), (1,3)(2,4) ])
</pre>
<p>
<p>
<h2><a name="SECT003">38.3 Efficiency of Homomorphisms</a></h2>
<p><p>
<font face="Gill Sans,Helvetica,Arial">GAP</font> permits to create homomorphisms between arbitrary groups.  This
section considers the efficiency of the implementation and shows ways how to
choose suitable representations. For permutation groups (see&nbsp;<a href="CHAP041.htm">Permutation Groups</a>) or Pc groups (see&nbsp;<a href="CHAP044.htm">Pc Groups</a>) this is normally nothing to worry
about, unless the groups get extremely large. For other groups however
certain calculations might be expensive and some precaution might be needed
to avoid unnecessarily expensive calculations.
<p>
In short, it is always worth to tell a mapping that it is a homomorphism
(this can be done by <code>SetIsMapping</code>) (or to create it directly with
<code>GroupHomomorphismByImagesNC</code>).
<p>
The basic operations required are to compute image and preimage of elements
and to test whether a mapping is a homomorphism. Their cost
will differ depending on the type of the mapping.
<p>
<p>
<strong>Mappings given on generators (<code>GroupHomomorphismByImages</code>,
<code>GroupGeneralMappingByImages</code>)</strong>
<p>
Computing images requires to express an element of the source as word in the
generators. If it cannot be done effectively (this is determined by
<code>KnowsHowToDecompose</code>, see&nbsp;<a href="CHAP037.htm#SSEC025.6">KnowsHowToDecompose</a> which returns <code>true</code> for
example for arbitrary permutation groups, for Pc groups or for finitely
presented groups with the images of the free generators) the span of the
generators has to be computed elementwise which can be very expensive and
memory consuming.
<p>
Computing preimages adheres to the same rules with swapped r&ocirc;les of
generators and their images.
<p>
The test whether a mapping is a homomorphism requires
the computation of a presentation for the source and evaluation of its
relators in the images of its generators. For larger groups this can be
expensive and <code>GroupHomomorphismByImagesNC</code> should be used if the mapping is
known to be a homomorphism.
<p>
<p>
<strong>Action homomorphisms (<code>ActionHomomorphism</code>)</strong>
<p>
The calculation of images is determined by the acting function used and
-- for large domains -- is often dominated by the search for the position of
an image in a list of the domain elements. This can be improved by sorting
this list if an efficient method for <code>&lt;</code>  to compare elements of the domain
is available.
<p>
Once the images of a generating set are computed, computing preimages (which is
done via the <code>AsGroupGeneralMappingByImages</code>) and computing the kernel
bahaves the same as for a <code>GroupHomomorphismByImages</code> in a permutation
group.
<p>
<font face="Gill Sans,Helvetica,Arial">GAP</font> will always assume that the acting function provided implements a proper
group action and thus that the mapping is indeed a homomorphism.
<p>
<p>
<strong>Mappings given by functions (<code>GroupHomomorphismByFunction</code>,
<code>GroupGeneralMappingByFunctions</code>)</strong>
<p>
Computing images is wholly determined by the function that performs the
image calculation. If no function to compute preimages is given, computing
preimages requires mapping every element of the source to find an element
that maps to the requested image. This is time and memory consuming.
<p>
Testing whether a <code>GroupGeneralMappingByFunctions</code> is a homomorphism would
require mapping all products of elements and thus should be avoided.
<p>
<p>
<strong>Other operations</strong>
<p>
To compute the kernel of a homomorphism (unless the mapping is known to be
injective) requires the capability to compute a
presentation of the image and to evaluate the relators of this presentation
in preimages of the presentations generators.
<p>
The calculation of the <code>Image</code> (respectively <code>ImagesSource</code>) requires to map
a generating set of the source, testing surjectivity is a comparison for
equality with the range.
<p>
Testing injectivity is a test for triviality of the kernel.
<p>
The comparison of mappings is based on a lexicographic comparison of a
sorted element list of the source. For groups this can be simplified:
<p>
<a name = "SSEC003.1"></a>
<li><code>ImagesSmallestGenerators( </code><var>map</var><code> ) A</code>
<p>
 returns the list of images of <code>GeneratorsSmallest(Source(</code><var>map</var><code>))</code>. This
 list can be used to compare group homomorphisms.  (The standard
 comparison is to compare the image lists on the set of elements of the
 source. If however x and y have the same images under a and b,
 certainly all their products have. Therefore it is sufficient to test
 this on the images of the smallest generators.)
<p>
<p>
<h2><a name="SECT004">38.4 Homomorphism for very large groups</a></h2>
<p><p>
Some homomorphisms (notably particular actions) transfer known information
about the source group (such as a stabilizer chain) to the image group if
this is substantially cheaper than to compute the information in the image
group anew. In most cases this is no problem and in fact speeds up further
calculations notably.
<p>
For a huge source group, however this can be time consuming or take a large
amount of extra memory for storage. In this case it can be helpful to avoid
as much automatism as possible.
<p>
The following list of tricks might be useful in such a case. (However you
will lose much automatic deduction. So please restrict the use of these to
cases where the standard approach does not work.)
<p>
<dl compact>
<dt>-<dd>
Compute only images (or the <code>PreImageRepresentative</code>) of group elements. Do
not compute the images of (sub)groups or the full preimage of a subgroup.
<p>
<dt>-<dd>
Create action homomorphisms as ``surjective'' (see <code>ActionHomomorphism</code>)
(otherwise the range is set to be the full symmetric group)
However do not compute  Range or Image, but only the images of a
generator set.
<p>
<dt>-<dd>
If you suspect an action homomorphism to do too much internally, replace the
action function with a function that does the same; i.e. replace <code>OnPoints</code>
by
<pre>
function(p,g) return p^g;end;
</pre>
The action will be the same, but as the action function is not <code>OnPoints</code>,
the extra processing for special cases is not triggered.
</dl>
<p>
<p>
<h2><a name="SECT005">38.5 Nice Monomorphisms</a></h2>
<p><p>
<font face="Gill Sans,Helvetica,Arial">GAP</font> contains very efficient algorithms for some special representations
of groups (for example pc groups or permutation groups) while for other
representations only slow generic methods are available. In this case it
can be worthwhile to do all calculations rather in an isomorphic image of
the group, which is in a ``better'' representation. The way to achieve this
in <font face="Gill Sans,Helvetica,Arial">GAP</font> is via <strong>nice monomorphisms</strong>.
<p>
For this mechanism to work, of course there must be effective methods to
evaluate the <code>NiceMonomorphism</code> on elements and to take preimages under it.
As by definition no good algorithms exist for the source group,
normally this can only be achieved by using an <code>ActionHomomorphism</code> or a
<code>GroupHomomorphismByFunction</code> (see also
section&nbsp;<a href="CHAP038.htm#SECT003">Efficiency of Homomorphisms</a>).
<p>
<a name = "SSEC005.1"></a>
<li><code>IsHandledByNiceMonomorphism( </code><var>obj</var><code> ) P</code>
<p>
If this property is <code>true</code>, high-valued methods that translate all
calculations in <var>obj</var> in the image under the <code>NiceMonomorphism</code> become
available for <var>obj</var>.
<p>
<a name = "SSEC005.2"></a>
<li><code>NiceMonomorphism( </code><var>obj</var><code> ) A</code>
<p>
is a homomorphism that is defined (at least) on the whole of <var>obj</var> and
whose restriction to <var>obj</var> is injective. The concrete morphism (and also
the image group) will depend on the representation of <var>obj</var>.
<p>
<a name = "SSEC005.3"></a>
<li><code>NiceObject( </code><var>obj</var><code> ) A</code>
<p>
The <code>NiceObject</code> of <var>obj</var> is the image of <var>obj</var> under its
<code>NiceMonomorphism</code>.
<p>
A typical example are finite matrix groups, which use a faithful action on
vectors to translate all calculations in a permutation group.
<pre>
gap&gt; gl:=GL(3,2);
SL(3,2)
gap&gt; IsHandledByNiceMonomorphism(gl);
true
gap&gt; NiceObject(gl);
Group([ (5,7)(6,8), (2,3,5)(4,7,6) ])
gap&gt; Image(NiceMonomorphism(gl),Z(2)*[[1,0,0],[0,1,1],[1,0,1]]);
(2,6)(3,4,7,8)
</pre>
<p>
<a name = "SSEC005.4"></a>
<li><code>IsCanonicalNiceMonomorphism( </code><var>nhom</var><code> ) P</code>
<p>
A <code>NiceMonomorphism</code> <var>nhom</var> is canonical if the image set will only
depend on the set of group elements but not on the generating set and
<code>&lt;</code> comparison of group elements translates through the nice
monomorphism. This
implies that equal objects will always have equal <code>NiceObject</code>s.
In some situations however this condition would be expensive to
achieve, therefore it is not guaranteed for every nice monomorphism.
<p>
<p>
<h2><a name="SECT006">38.6 Group Automorphisms</a></h2>
<p><p>
Group automorphisms are bijective homomorphism from a group onto itself.
An important subclass are automorphisms which are induced by conjugation of
the group itself or a supergroup.
<p>
<a name = "SSEC006.1"></a>
<li><code>ConjugatorIsomorphism( </code><var>G</var><code>, </code><var>g</var><code> ) O</code>
<p>
Let <var>G</var> be a group, and <var>g</var> an element in the same family as the elements
of <var>G</var>.
<code>ConjugatorIsomorphism</code> returns the isomorphism from <var>G</var> to <code></code><var>G</var><code>^</code><var>g</var><code></code>
defined by <i>h</i>  &#8594; <i>h</i> <sup><i>g</i> </sup> for all <i>h</i>   &#8712; <i>G</i> .
<p>
If <var>g</var> normalizes <var>G</var> then <code>ConjugatorIsomorphism</code> does the same as
<code>ConjugatorAutomorphismNC</code> (see&nbsp;<a href="CHAP038.htm#SSEC006.2">ConjugatorAutomorphism</a>).
<p>
<a name = "SSEC006.2"></a>
<li><code>ConjugatorAutomorphism( </code><var>G</var><code>, </code><var>g</var><code> ) F</code>
<a name = "SSEC006.2"></a>
<li><code>ConjugatorAutomorphismNC( </code><var>G</var><code>, </code><var>g</var><code> ) O</code>
<p>
Let <var>G</var> be a group, and <var>g</var> an element in the same family as the elements
of <var>G</var> such that <var>g</var> normalizes <var>G</var>.
<code>ConjugatorAutomorphism</code> returns the automorphism of <var>G</var>
defined by <i>h</i>  &#8594; <i>h</i> <sup><i>g</i> </sup> for all <i>h</i>   &#8712; <i>G</i> .
<p>
If conjugation by <var>g</var> does <strong>not</strong> leave <var>G</var> invariant,
<code>ConjugatorAutomorphism</code> returns <code>fail</code>;
in this case,
the isomorphism from <var>G</var> to <code></code><var>G</var><code>^</code><var>g</var><code></code> induced by conjugation with <var>g</var>
can be constructed
with <code>ConjugatorIsomorphism</code> (see&nbsp;<a href="CHAP038.htm#SSEC006.1">ConjugatorIsomorphism</a>).
<p>
<code>ConjugatorAutomorphismNC</code> does the same as <code>ConjugatorAutomorphism</code>,
except that the check is omitted whether <var>g</var> normalizes <var>G</var> and it is
assumed that <var>g</var> is chosen to be in <var>G</var> if possible.
<p>
<a name = "SSEC006.3"></a>
<li><code>InnerAutomorphism( </code><var>G</var><code>, </code><var>g</var><code> ) F</code>
<a name = "SSEC006.3"></a>
<li><code>InnerAutomorphismNC( </code><var>G</var><code>, </code><var>g</var><code> ) O</code>
<p>
Let <var>G</var> be a group, and <i>g</i>   &#8712; <i>G</i> .
<code>InnerAutomorphism</code> returns the automorphism of <var>G</var>
defined by <i>h</i>  &#8594; <i>h</i> <sup><i>g</i> </sup> for all <i>h</i>   &#8712; <i>G</i> .
<p>
If <var>g</var> is <strong>not</strong> an element of <var>G</var>,
<code>InnerAutomorphism</code> returns <code>fail</code>;
in this case,
the isomorphism from <var>G</var> to <code></code><var>G</var><code>^</code><var>g</var><code></code> induced by conjugation with <var>g</var>
can be constructed
with <code>ConjugatorIsomorphism</code> (see&nbsp;<a href="CHAP038.htm#SSEC006.1">ConjugatorIsomorphism</a>)
or with <code>ConjugatorAutomorphism</code> (see&nbsp;<a href="CHAP038.htm#SSEC006.2">ConjugatorAutomorphism</a>).
<p>
<code>InnerAutomorphismNC</code> does the same as <code>InnerAutomorphism</code>,
except that the check is omitted whether <i>g</i>   &#8712; <i>G</i> .
<p>
<a name = "SSEC006.4"></a>
<li><code>IsConjugatorIsomorphism( </code><var>hom</var><code> ) P</code>
<a name = "SSEC006.4"></a>
<li><code>IsConjugatorAutomorphism( </code><var>hom</var><code> ) P</code>
<a name = "SSEC006.4"></a>
<li><code>IsInnerAutomorphism( </code><var>hom</var><code> ) P</code>
<p>
Let <var>hom</var> be a group general mapping (see&nbsp;<a href="CHAP031.htm#SSEC008.4">IsGroupGeneralMapping</a>)
with source <i>G</i>, say.
<code>IsConjugatorIsomorphism</code> returns <code>true</code> if <var>hom</var> is induced by
conjugation of <i>G</i> by an element <i>g</i> that lies in <i>G</i> or in a group into
which <i>G</i> is naturally embedded in the sense described below,
and <code>false</code> otherwise.
Natural embeddings are dealt with in the case that <i>G</i> is
a permutation group (see Chapter&nbsp;<a href="CHAP041.htm">Permutation Groups</a>),
a matrix group (see Chapter&nbsp;<a href="CHAP042.htm">Matrix Groups</a>),
a finitely presented group (see Chapter&nbsp;<a href="CHAP045.htm">Finitely Presented Groups</a>), or
a group given w.r.t.&nbsp;a polycyclic presentation (see Chapter&nbsp;<a href="CHAP044.htm">Pc Groups</a>).
In all other cases, <code>IsConjugatorIsomorphism</code> may return <code>false</code>
if <var>hom</var> is induced by conjugation but is not an inner automorphism.
<p>
If <code>IsConjugatorIsomorphism</code> returns <code>true</code> for <var>hom</var> then
an element <i>g</i> that induces <var>hom</var> can be accessed as value of
the attribute <code>ConjugatorOfConjugatorIsomorphism</code>
(see&nbsp;<a href="CHAP038.htm#SSEC006.5">ConjugatorOfConjugatorIsomorphism</a>).
<p>
<code>IsConjugatorAutomorphism</code> returns <code>true</code> if <var>hom</var> is an automorphism
(see&nbsp;<a href="CHAP031.htm#SSEC012.3">IsEndoGeneralMapping</a>) that is regarded as a conjugator isomorphism
by <code>IsConjugatorIsomorphism</code>, and <code>false</code> otherwise.
<p>
<code>IsInnerAutomorphism</code> returns <code>true</code> if <var>hom</var> is a conjugator
automorphism such that an element <i>g</i> inducing <var>hom</var> can be chosen in
<i>G</i>, and <code>false</code> otherwise.
<p>
<a name = "SSEC006.5"></a>
<li><code>ConjugatorOfConjugatorIsomorphism( </code><var>hom</var><code> ) A</code>
<p>
For a conjugator isomorphism <var>hom</var> (see&nbsp;<a href="CHAP038.htm#SSEC006.1">ConjugatorIsomorphism</a>),
<code>ConjugatorOfConjugatorIsomorphism</code> returns an element <i>g</i> such that
mapping under <var>hom</var> is induced by conjugation with <i>g</i>.
<p>
To avoid problems with <code>IsInnerAutomorphism</code>,
it is guaranteed that the conjugator is taken from the source of <var>hom</var>
if possible.
<p>
<pre>
gap&gt; hgens:=[(1,2,3),(1,2,4)];;h:=Group(hgens);;
gap&gt; hom:=GroupHomomorphismByImages(h,h,hgens,[(1,2,3),(2,3,4)]);;
gap&gt; IsInnerAutomorphism(hom);
true
gap&gt; ConjugatorOfConjugatorIsomorphism(hom);
(1,2,3)
gap&gt; hom:=GroupHomomorphismByImages(h,h,hgens,[(1,3,2),(1,4,2)]);
[ (1,2,3), (1,2,4) ] -&gt; [ (1,3,2), (1,4,2) ]
gap&gt; IsInnerAutomorphism(hom);
false
gap&gt; IsConjugatorAutomorphism(hom);
true
gap&gt; ConjugatorOfConjugatorIsomorphism(hom);
(1,2)
</pre>
<p>
<p>
<h2><a name="SECT007">38.7 Groups of Automorphisms</a></h2>
<p><p>
Group automorphism can be multiplied and inverted and thus it is possible
to form groups of automorphisms.
<p>
<a name = "SSEC007.1"></a>
<li><code>IsGroupOfAutomorphisms( </code><var>G</var><code> ) P</code>
<p>
indicates whether <var>G</var> consists of automorphisms of another group <var>H</var>.
The group <var>H</var> can be obtained from <var>G</var> via the attribute
<code>AutomorphismDomain</code>.
<p>
<a name = "SSEC007.2"></a>
<li><code>AutomorphismDomain( </code><var>G</var><code> ) A</code>
<p>
If <var>G</var> consists of automorphisms of <var>H</var>, this attribute returns <var>H</var>.
<p>
<a name = "SSEC007.3"></a>
<li><code>AutomorphismGroup( </code><var>obj</var><code> ) A</code>
<p>
returns the full automorphism group of the object <var>obj</var>. The
automorphisms act on the domain by the caret operator <code>^</code>.
The automorphism group often stores a ``NiceMonomorphism'' (see
<a href="CHAP038.htm#SSEC005.2">NiceMonomorphism</a>) to a permutation group, obtained by the action on a
subset of <var>obj</var>.
<p>
Note that current methods for the calculation of the automorphism group of a
group <i>G</i> require <i>G</i> to be a permutation group or a pc group to be
efficient. For groups in other representations the calculation is likely
very slow.
<p>
<a name = "SSEC007.4"></a>
<li><code>IsAutomorphismGroup( </code><var>G</var><code> ) P</code>
<p>
indicates whether <var>G</var> is the full automorphism group of another group
<var>H</var>, this group is given as <code>AutomorphismDomain</code> of <var>G</var>.
<p>
<pre>
gap&gt; g:=Group((1,2,3,4),(1,3));
Group([ (1,2,3,4), (1,3) ])
gap&gt; au:=AutomorphismGroup(g);
&lt;group of size 8 with 3 generators&gt;
gap&gt; GeneratorsOfGroup(au);
[ ^(1,2,3,4), ^(1,3), [ (1,4,3,2), (1,2)(3,4) ] -&gt; [ (1,2,3,4), (2,4) ] ]
gap&gt; NiceObject(au);
Group([ (1,4)(2,6), (2,6)(3,5), (1,2)(3,5)(4,6) ])
</pre>
<p>
<a name = "SSEC007.5"></a>
<li><code>InnerAutomorphismsAutomorphismGroup( </code><var>autgroup</var><code> ) A</code>
<p>
For an automorphism group <var>autgroup</var> of a group this attribute stores
the subgroup of inner automorphisms (automorphisms induced by conjugation)
of the original group.
<p>
<pre>
gap&gt; InnerAutomorphismsAutomorphismGroup(au);
&lt;group with 2 generators&gt;
</pre>
<p>
<a name = "SSEC007.6"></a>
<li><code>InducedAutomorphism( </code><var>epi</var><code>, </code><var>aut</var><code> ) O</code>
<p>
Let <var>aut</var> be an automorphism of a group <var>G</var> and <code></code><var>epi</var><code>: </code><var>G</var><code> -&gt; </code><var>H</var><code></code> an
homomorphism such that <code>ker </code><var>epi</var><code></code> is fixed under <var>aut</var>.
Let <var>U</var> be the image of <var>epi</var>. This command returns the automorphism of
<var>U</var> induced by <var>aut</var> via <var>epi</var>, that is the automorphism of <var>U</var> which maps
<code></code><var>g</var><code>^</code><var>epi</var><code></code> to <code>(</code><var>g</var><code>^</code><var>aut</var><code>)^</code><var>epi</var><code></code>, for <var>g</var>  &#8712;  <var>G</var>.
<p>
<pre>
gap&gt; g:=Group((1,2,3,4),(1,2));
Group([ (1,2,3,4), (1,2) ])
gap&gt; n:=Subgroup(g,[(1,2)(3,4),(1,3)(2,4)]);
Group([ (1,2)(3,4), (1,3)(2,4) ])
gap&gt; epi:=NaturalHomomorphismByNormalSubgroup(g,n);
[ (1,2,3,4), (1,2) ] -&gt; [ f1*f2, f1 ]
gap&gt; aut:=InnerAutomorphism(g,(1,2,3));
^(1,2,3)
gap&gt; InducedAutomorphism(epi,aut);
^f2
</pre>
<p>
<p>
<h2><a name="SECT008">38.8 Calculating with Group Automorphisms</a></h2>
<p><p>
Usually the best way to calculate in a group of automorphisms is to go
translate all calculations to an isomorphic group in a representation, for
which better algorithms are available, say a permutation group. This
translation can be done automatically using a <code>NiceMonomorphism</code>
(see&nbsp;<a href="CHAP038.htm#SSEC005.2">NiceMonomorphism</a>.)
<p>
Once a group knows to be a group of automorphisms (this can be achieved
by testing or setting the property <code>IsGroupOfAutomorphisms</code>
(see&nbsp;<a href="CHAP038.htm#SSEC007.1">IsGroupOfAutomorphisms</a>),
<font face="Gill Sans,Helvetica,Arial">GAP</font> will try itself to find such a nice monomorphism once calculations in
the automorphism group are done.
<p>
Note that nice homomorphisms inherit down to subgroups, but cannot
necessarily be extended from a subgroup to the whole group. Thus when
working with a group of automorphisms, it can be beneficial to 
enforce calculation of the nice monomorphism for the whole
group (for example by explicitly calling <code>Random(G)</code> and ignoring
the result -- it will be stored internally) at the start of the calculation.
Otherwise <font face="Gill Sans,Helvetica,Arial">GAP</font> might first calculate a nice monomorphism for the subgroup,
only to be forced to calculate a new nice monomorphism for the whole group
later on.
<p>
<a name = "SSEC008.1"></a>
<li><code>AssignNiceMonomorphismAutomorphismGroup( </code><var>autgrp</var><code>, </code><var>group</var><code> ) F</code>
<p>
computes a nice monomorphism for <var>autgroup</var> acting on <var>group</var> and stores
it as <code>NiceMonomorphism</code> in <var>autgrp</var>.
<p>
If the centre of <code>AutomorphismDomain</code> of <var>autgrp</var> is trivial, the
operation will first try to represent all automorphisms by conjugation
(in <var>group</var> or a natural parent of <var>group</var>).
<p>
If this fails the operation tries to find a small subset of <var>group</var> on
which the action will be faithful.
<p>
The operation sets the attribute <code>NiceMonomorphism</code> and does not return
a value.
<p>
If a good domain for a faithful permutation action is known already, a
homomorphism for the action on it can be created using
<code>NiceMonomorphismAutomGroup</code>. It might be stored by <code>SetNiceMonomorphism</code>
(see <a href="CHAP038.htm#SSEC005.2">NiceMonomorphism</a>).
<p>
<a name = "SSEC008.2"></a>
<li><code>NiceMonomorphismAutomGroup( </code><var>autgrp</var><code>, </code><var>elms</var><code>, </code><var>elmsgens</var><code> ) F</code>
<p>
This function creates a monomorphism for an automorphism group
<var>autgrp</var> of a group by permuting the group elements in the list <var>elms</var>.
This list must be chosen to yield a faithful representation. <var>elmsgens</var>
is a list of generators which are a subset of <var>elms</var>. (They can differ
from the groups original generators.) It does not yet assign it as
<code>NiceMonomorphism</code>.
<p>
Another nice way of representing automorphisms as permutations has been
described in <a href="biblio.htm#Sims97"><cite>Sims97</cite></a>. It it not yet available in <font face="Gill Sans,Helvetica,Arial">GAP</font>, a description
however can be found in section&nbsp;<a href="../ext/CHAP008.htm#SECT003">Stabilizer Chains for Automorphisms Acting on Enumerators</a> of ``Extending <font face="Gill Sans,Helvetica,Arial">GAP</font>''.
<p>
<p>
<h2><a name="SECT009">38.9 Searching for Homomorphisms</a></h2>
<p><p>
<a name = "I2"></a>

<a name = "SSEC009.1"></a>
<li><code>IsomorphismGroups( </code><var>G</var><code>, </code><var>H</var><code> ) F</code>
<p>
computes an isomorphism between the groups <var>G</var> and <var>H</var>
if they are isomorphic and returns <code>fail</code> otherwise.
<p>
With the existing methods the amount of time needed grows with
the size of a generating system of <var>G</var>. (Thus in particular for
<i>p</i>-groups calculations can be slow.) If you do only need to know
whether groups are isomorphic, you might want to consider <code>IdSmallGroup</code>
(see&nbsp;<a href="CHAP048.htm#SSEC007.5">IdSmallGroup</a>) or the random isomorphism test
(see&nbsp;<a href="CHAP044.htm#SSEC010.1">RandomIsomorphismTest</a>).
<p>
<a name = "I3"></a>

<pre>
gap&gt; g:=Group((1,2,3,4),(1,3));;
gap&gt; h:=Group((1,4,6,7)(2,3,5,8), (1,5)(2,6)(3,4)(7,8));;
gap&gt; IsomorphismGroups(g,h);
[ (1,2,3,4), (1,3) ] -&gt; [ (1,4,6,7)(2,3,5,8), (1,2)(3,7)(4,8)(5,6) ]
gap&gt; IsomorphismGroups(g,Group((1,2,3,4),(1,2)));
fail
</pre>
<p>
<a name = "SSEC009.2"></a>
<li><code>GQuotients( </code><var>F</var><code>, </code><var>G</var><code> ) O</code>
<p>
computes all epimorphisms from <var>F</var> onto <var>G</var> up to automorphisms of <var>G</var>.
This classifies all factor groups of <var>F</var> which are isomorphic to <var>G</var>.
<p>
With the existing methods the amount of time needed grows with
the size of a generating system of <var>G</var>. (Thus in particular for
<i>p</i>-groups calculations can be slow.)
<p>
If the <code>findall</code> option is set to <code>false</code>, the algorithm will stop once
one homomorphism has been found (this can be faster and might be
sufficient if not all homomorphisms are needed).
<p>
<a name = "I4"></a>

<a name = "I5"></a>

<pre>
gap&gt; g:=Group((1,2,3,4),(1,2));
Group([ (1,2,3,4), (1,2) ])
gap&gt; h:=Group((1,2,3),(1,2));
Group([ (1,2,3), (1,2) ])
gap&gt; quo:=GQuotients(g,h);
[ [ (1,3,2,4), (2,4,3) ] -&gt; [ (2,3), (1,2,3) ] ]
</pre>
<p>
<a name = "SSEC009.3"></a>
<li><code>IsomorphicSubgroups( </code><var>G</var><code>, </code><var>H</var><code> ) O</code>
<p>
computes all monomorphisms from <var>H</var> into <var>G</var> up to <var>G</var>-conjugacy of the
image groups.  This classifies all <var>G</var>-classes of subgroups of <var>G</var> which
are isomorphic to <var>H</var>.
<p>
With the existing methods, the amount of time needed grows with
the size of a generating system of <var>G</var>. (Thus in particular for
<i>p</i>-groups calculations can be slow.) A main use of
<code>IsomorphicSubgroups</code> therefore is to find nonsolvable subgroups
(which often can be generated by 2 elements).
<p>
(To find <i>p</i>-subgroups it is often faster to compute the subgroup
lattice of the sylow subgroup and to use <code>IdGroup</code> to identify the type of
the subgroups.)
<p>
If the <code>findall</code> option is set to <code>false</code>, the algorithm will stop once
one homomorphism has been found (this can be faster and might be
sufficient if not all homomorphisms are needed).
<p>
<a name = "I6"></a>

<a name = "I7"></a>

<pre>
gap&gt; g:=Group((1,2,3,4),(1,2));
Group([ (1,2,3,4), (1,2) ])
gap&gt; h:=Group((3,4),(1,2));;
gap&gt; emb:=IsomorphicSubgroups(g,h);
[ [ (3,4), (1,2) ] -&gt; [ (3,4), (1,2) ], 
  [ (3,4), (1,2) ] -&gt; [ (1,3)(2,4), (1,2)(3,4) ] ]
</pre>
<p>
<a name = "SSEC009.4"></a>
<li><code>MorClassLoop( </code><var>range</var><code>, </code><var>classes</var><code>, </code><var>params</var><code>, </code><var>action</var><code> ) F</code>
<p>
This function loops over element tuples taken from <var>classes</var> and checks
these for properties such as generating a given group, or fulfilling
relations.  This can be used to find small generating sets or all types
of Morphisms.
The element tuples are used only up to up to inner automorphisms as
all images can be obtained easily from them by conjugation while
running through all of them usually would take too long.
<p>
<var>range</var> is a group from which these elements are taken.
The classes are given in a list <var>classes</var> which  is a list of records
with components
<p>
<dl compact>
<dt><code>classes</code><dd>A list of conjugacy classes
<dt><code>representative</code><dd>One element in the union of these classes
<dt><code>size</code><dd>The sum of the sizes of these classes
</dl>
<p>
<var>params</var> is a record containing optional components:
<p>
<dl compact>
<dt><code>gens</code><dd> generators that are to be mapped (for testing morphisms). The length
of this list determines the length of element tuples considered.
<p>
<dt><code>from</code><dd> a preimage group (that contains <var>gens</var>)
<p>
<dt><code>to</code><dd> image group (which might be smaller than <code>range</code>)
<p>
<dt><code>free</code><dd> free generators, a list of the same length than the
 generators <code>gens</code>.
<p>
<dt><code>rels</code><dd> some relations that hold among the generators <code>gens</code>. They are given
as a list [<var>word</var>,<var>order</var>] where <var>word</var> is a word in the free generators
<code>free</code>.
<p>
<dt><code>dom</code><dd> a set of elements on which automorphisms act faithfully (used to do
element tests in partial automorphism groups).
<p>
<dt><code>aut</code><dd> Subgroup of already known automorphisms.
</dl>
<p>
<var>action</var> is a number whose bit-representation indicates the requirements
which are enforced on the element tuples found:
<dl compact>
<dt>1<dd>homomorphism
<p>
<dt>2<dd>injective
<p>
<dt>4<dd>surjective
<p>
<dt>8<dd>find all (otherwise stops after the first find)
</dl>
If the search is for homomorphisms, the function returns homomorphisms
obtained by mapping the given generators <code>gens</code> instead of element tuples.
<p>
The ``Morpheus'' algorithm used to find homomorphisms is described in
section V.5 of <a href="biblio.htm#Hulpke96"><cite>Hulpke96</cite></a>.
<p>
<p>
<h2><a name="SECT010">38.10 Representations for Group Homomorphisms</a></h2>
<p><p>
The different representations of group homomorphisms are used to indicate
from what type of group to what type of group they map and thus determine
which methods are used to compute images and preimages.
<p>
The information in this section is mainly relevant for implementing new
methods and not for using homomorphisms.
<p>
<a name = "SSEC010.1"></a>
<li><code>IsGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<p>
Representation for mappings from one group to another that are defined
by extending a mapping of group generators homomorphically.
Instead of record components, the attribute <code>MappingGeneratorImages</code> is
used to store generators and their images.
<p>
<a name = "SSEC010.2"></a>
<li><code>IsGroupGeneralMappingByAsGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<p>
Representation for mappings that delegate work on a
<code>GroupHomomorphismByImages</code>.
<p>
<a name = "SSEC010.3"></a>
<li><code>IsPreimagesByAsGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<p>
Representation for mappings that delegate work for preimages to a
GroupHomomorphismByImages.
<p>
<a name = "SSEC010.4"></a>
<li><code>IsPermGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<a name = "SSEC010.4"></a>
<li><code>IsPermGroupHomomorphismByImages( </code><var>map</var><code> ) R</code>
<p>
is the representation for mappings that map from a perm group
<p>
<a name = "SSEC010.5"></a>
<li><code>IsToPermGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<a name = "SSEC010.5"></a>
<li><code>IsToPermGroupHomomorphismByImages( </code><var>map</var><code> ) R</code>
<p>
is the representation for mappings that map to a perm group
<p>
<a name = "SSEC010.6"></a>
<li><code>IsGroupGeneralMappingByPcgs( </code><var>map</var><code> ) R</code>
<p>
is the representations for mappings that map a pcgs to images and thus
may use exponents to decompose generators.
<p>
<a name = "SSEC010.7"></a>
<li><code>IsPcGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<a name = "SSEC010.7"></a>
<li><code>IsPcGroupHomomorphismByImages( </code><var>map</var><code> ) R</code>
<p>
is the representation for mappings from a pc group
<p>
<a name = "SSEC010.8"></a>
<li><code>IsToPcGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<a name = "SSEC010.8"></a>
<li><code>IsToPcGroupHomomorphismByImages( </code><var>map</var><code> ) R</code>
<p>
is the representation for mappings to a pc group
<p>
<a name = "SSEC010.9"></a>
<li><code>IsFromFpGroupGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<a name = "SSEC010.9"></a>
<li><code>IsFromFpGroupHomomorphismByImages( </code><var>map</var><code> ) R</code>
<p>
is the representation of mappings from an fp group.
<p>
<a name = "SSEC010.10"></a>
<li><code>IsFromFpGroupStdGensGeneralMappingByImages( </code><var>map</var><code> ) R</code>
<a name = "SSEC010.10"></a>
<li><code>IsFromFpGroupStdGensHomomorphismByImages( </code><var>map</var><code> ) R</code>
<p>
is the representation of mappings from an fp group that give images of
the standard generators.
<p>
<p>
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP037.htm">Previous</a>] [<a href ="CHAP039.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<font face="Gill Sans,Helvetica,Arial">GAP 4 manual<br>December 2008
</font></body></html>