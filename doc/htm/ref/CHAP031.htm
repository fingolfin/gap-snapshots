<html><head><title>[ref] 31 Mappings</title></head>
<body text="#000000" bgcolor="#ffffff">
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP030.htm">Previous</a>] [<a href ="CHAP032.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<h1>31 Mappings</h1><p>
<P>
<H3>Sections</H3>
<oL>
<li> <A HREF="CHAP031.htm#SECT001">Creating Mappings</a>
<li> <A HREF="CHAP031.htm#SECT002">Properties and Attributes of (General) Mappings</a>
<li> <A HREF="CHAP031.htm#SECT003">Images under Mappings</a>
<li> <A HREF="CHAP031.htm#SECT004">Preimages under Mappings</a>
<li> <A HREF="CHAP031.htm#SECT005">Arithmetic Operations for General Mappings</a>
<li> <A HREF="CHAP031.htm#SECT006">Mappings which are Compatible with Algebraic Structures</a>
<li> <A HREF="CHAP031.htm#SECT007">Magma Homomorphisms</a>
<li> <A HREF="CHAP031.htm#SECT008">Mappings that Respect Multiplication</a>
<li> <A HREF="CHAP031.htm#SECT009">Mappings that Respect Addition</a>
<li> <A HREF="CHAP031.htm#SECT010">Linear Mappings</a>
<li> <A HREF="CHAP031.htm#SECT011">Ring Homomorphisms</a>
<li> <A HREF="CHAP031.htm#SECT012">General Mappings</a>
<li> <A HREF="CHAP031.htm#SECT013">Technical Matters Concerning General Mappings</a>
</ol><p>
<p>
<a name = "I0"></a>

<a name = "I1"></a>

A <strong>mapping</strong> in <font face="Gill Sans,Helvetica,Arial">GAP</font> is what is called a ``function'' in mathematics.
<font face="Gill Sans,Helvetica,Arial">GAP</font> also implements <strong>generalized mappings</strong> in which one element might
have several images, these can be imagined as subsets of the cartesian
product and are often called ``relations''.
<p>
Most operations are declared for general mappings and therefore this manual
often  refers to ``(general) mappings'', unless you deliberately need the
generalization you can ignore the ``general'' bit and just read
it as ``mappings''.
<p>
A <strong>general mapping</strong> <i>F</i> in <font face="Gill Sans,Helvetica,Arial">GAP</font> is described by
its source <i>S</i>, its range <i>R</i>, and a subset <i>Rel</i> of the direct product
<i>S</i> &times;<i>R</i>, which is called the underlying relation of <i>F</i>.
<i>S</i>, <i>R</i>, and <i>Rel</i> are generalized domains (see Chapter&nbsp;<a href="CHAP012.htm#SECT004">Domains</a>).
The corresponding attributes for general mappings are <code>Source</code>, <code>Range</code>,
and <code>UnderlyingRelation</code>.
<p>
Note that general mappings themselves are <strong>not</strong> domains.
One reason for this is that two general mappings with same underlying
relation are regarded as equal only if also the sources are equal and
the ranges are equal.
Other, more technical, reasons are that general mappings and domains
have different basic operations, and that general mappings are
arithmetic objects (see&nbsp;<a href="CHAP031.htm#SECT005">Arithmetic Operations for General Mappings</a>);
both should not apply to domains.
<p>
Each element of an underlying relation of a general mapping lies in the
category of tuples (see&nbsp;<a href="CHAP031.htm">IsTuple</a>).
<p>
For each <i>s</i>  &#8712; <i>S</i>, the set { <i>r</i>  &#8712; <i>R</i> &#124; (<i>s</i>,<i>r</i>)  &#8712; <i>Rel</i> }
is called the set of <strong>images</strong> of <i>s</i>.
Analogously, for <i>r</i>  &#8712; <i>R</i>, the set { <i>s</i>  &#8712; <i>S</i> &#124; (<i>s</i>,<i>r</i>)  &#8712; <i>Rel</i> }
is called the set of <strong>preimages</strong> of <i>r</i>.
<p>
The <strong>ordering</strong> of general mappings via <code>&lt;</code> is defined by the ordering
of source, range, and underlying relation. Specifically, if the Source
and Range domains of <var>map1</var> and <var>map2</var> are the same, then one considers 
the union of the preimages of <var>map1</var> and <var>map2</var> as a strictly ordered set.
The smaller of <var>map1</var> and <var>map2</var> is the one whose image is smaller on the 
first point of this sequence where they differ.
<p>
For mappings which preserve an algebraic structure a <strong>kernel</strong> is defined.
Depending on the structure preserved the operation to compute this kernel is
called differently, see section&nbsp;<a href="CHAP031.htm#SECT006">Mappings which are Compatible with Algebraic Structures</a>.
<p>
Some technical details of general mappings are described in section&nbsp;<a href="CHAP031.htm#SECT012">General Mappings</a>.
<p>
<a name = ""></a>
<li><code>IsTuple( </code><var>obj</var><code> ) C</code>
<p>
<code>IsTuple</code> is a subcategory of the meet of <code>IsDenseList</code>
(see&nbsp;<a href="CHAP021.htm#SSEC001.2">IsDenseList</a>), <code>IsMultiplicativeElementWithInverse</code>
(see&nbsp;<a href="CHAP030.htm#SSEC014.13">IsMultiplicativeElementWithInverse</a>),
and <code>IsAdditiveElementWithInverse</code> (see&nbsp;<a href="CHAP030.htm#SSEC014.7">IsAdditiveElementWithInverse</a>),
where the arithmetic operations (addition, zero, additive inverse,
multiplication, powering, one, inverse) are defined componentwise.
<p>
Note that each of these operations will cause an error message if
its result for at least one component cannot be formed.
<p>
The sum and the product of a tuple and a list in <code>IsListDefault</code> is the
list of sums and products, respectively.
The sum and the product of a tuple and a non-list is the tuple of
componentwise sums and products, respectively.
<p>
<p>
<h2><a name="SECT001">31.1 Creating Mappings</a></h2>
<p><p>
<a name = "SSEC001.1"></a>
<li><code>GeneralMappingByElements( </code><var>S</var><code>, </code><var>R</var><code>, </code><var>elms</var><code> ) F</code>
<p>
is the general mapping with source <var>S</var> and range <var>R</var>,
and with underlying relation consisting of the tuples collection <var>elms</var>.
<p>
<a name = "SSEC001.2"></a>
<li><code>MappingByFunction( </code><var>S</var><code>, </code><var>R</var><code>, </code><var>fun</var><code> ) F</code>
<li><code>MappingByFunction( </code><var>S</var><code>, </code><var>R</var><code>, </code><var>fun</var><code>, </code><var>invfun</var><code> ) F</code>
<li><code>MappingByFunction( </code><var>S</var><code>, </code><var>R</var><code>, </code><var>fun</var><code>, `false</code>, <var>prefun</var> ) F</code>
<p>
<code>MappingByFunction</code> returns a mapping <var>map</var> with source <var>S</var> and range
<var>R</var>, such that each element <var>s</var> of <var>S</var> is mapped to the element
<code></code><var>fun</var><code>( </code><var>s</var><code> )</code>, where <var>fun</var> is a <font face="Gill Sans,Helvetica,Arial">GAP</font> function.
<p>
If the argument <var>invfun</var> is bound then <var>map</var> is a bijection between <var>S</var>
and <var>R</var>, and the preimage of each element <var>r</var> of <var>R</var> is given by
<code></code><var>invfun</var><code>( </code><var>r</var><code> )</code>, where <var>invfun</var> is a <font face="Gill Sans,Helvetica,Arial">GAP</font>  function.
<p>
In the third variant, a function <var>prefun</var> is given that can be used to
compute a single preimage. In this case, the third entry must be
<code>false</code>.
<p>
<code>MappingByFunction</code> creates a mapping which <code>IsNonSPGeneralMapping</code>
<p>
<a name = "SSEC001.3"></a>
<li><code>InverseGeneralMapping( </code><var>map</var><code> ) A</code>
<p>
The <strong>inverse general mapping</strong> of a general mapping <var>map</var> is the general
mapping whose underlying relation (see&nbsp;<a href="CHAP031.htm#SSEC002.9">UnderlyingRelation</a>) contains a
pair (<i>r</i>,<i>s</i>) if and only if the underlying relation of <var>map</var> contains
the pair (<i>s</i>,<i>r</i>).
<p>
See the introduction to Chapter&nbsp;<a href="CHAP031.htm">Mappings</a> for the subtleties concerning
the difference between <code>InverseGeneralMapping</code> and <code>Inverse</code>.
<p>
Note that the inverse general mapping of a mapping <var>map</var> is in general
only a general mapping.
If <var>map</var> knows to be bijective its inverse general mapping will know to
be a mapping.
In this case also <code>Inverse( </code><var>map</var><code> )</code> works.
<p>
<a name = "SSEC001.4"></a>
<li><code>CompositionMapping( </code><var>map1</var><code>, </code><var>map2</var><code>, ... ) F</code>
<p>
<code>CompositionMapping</code> allows one to compose arbitrarily many general
mappings, and delegates each step to <code>CompositionMapping2</code>.
<p>
Additionally, the properties <code>IsInjective</code> and <code>IsSingleValued</code> are
maintained; if the source of the <i>i</i>+1-th general mapping is identical to
the range of the <i>i</i>-th general mapping, also <code>IsTotal</code> and
<code>IsSurjective</code> are maintained.
(So one should not call <code>CompositionMapping2</code> directly if one wants to
maintain these properties.)
<p>
Depending on the types of <var>map1</var> and <var>map2</var>, the returned mapping might
be constructed completely new (for example by giving domain generators
and their images, this is for example the case if both mappings preserve
the same alagebraic structures and <font face="Gill Sans,Helvetica,Arial">GAP</font> can decompose elements of the
source of <var>map2</var> into generators) or as an (iterated) composition
(see&nbsp;<a href="CHAP031.htm#SSEC001.6">IsCompositionMappingRep</a>).
<p>
<a name = "SSEC001.5"></a>
<li><code>CompositionMapping2( </code><var>map2</var><code>, </code><var>map1</var><code> ) O</code>
<p>
<code>CompositionMapping2</code> returns the composition of <var>map2</var> and <var>map1</var>,
this is the general mapping that maps an element first under <var>map1</var>,
and then maps the images under <var>map2</var>.
<p>
(Note the reverse ordering of arguments in the composition via <code>*</code>.
<p>
<a name = "SSEC001.6"></a>
<li><code>IsCompositionMappingRep( </code><var>map</var><code> ) R</code>
<p>
Mappings in this representation are stored as composition of two
mappings, (pre)images of elements are computed in a two-step process.
The constituent mappings of the composition can be obtained via
<code>ConstituentsCompositionMapping</code>.
<p>
<a name = "SSEC001.7"></a>
<li><code>ConstituentsCompositionMapping( </code><var>map</var><code> ) F</code>
<p>
If <var>map</var> is stored in the representation <code>IsCompositionMappingRep</code> as
composition of two mappings <var>map1</var> and <var>map2</var>, this function returns the
two constituent mappings in a list [<var>map1</var>,<var>map2</var>].
<p>
<a name = "SSEC001.8"></a>
<li><code>ZeroMapping( </code><var>S</var><code>, </code><var>R</var><code> ) O</code>
<p>
A zero mapping is a total general mapping that maps each element of its
source to the zero element of its range.
<p>
(Each mapping with empty source is a zero mapping.)
<p>
<a name = "SSEC001.9"></a>
<li><code>IdentityMapping( </code><var>D</var><code> ) A</code>
<p>
is the bijective mapping with source and range equal to the collection
<var>D</var>, which maps each element of <var>D</var> to itself.
<p>
<a name = "SSEC001.10"></a>
<li><code>Embedding( </code><var>S</var><code>, </code><var>T</var><code> ) O</code>
<li><code>Embedding( </code><var>S</var><code>, </code><var>i</var><code> ) O</code>
<p>
returns the embedding of the domain <var>S</var> in the  domain  <var>T</var>,  or  in  the
second form, some domain indexed by the positive integer <var>i</var>. The precise
natures of the various methods are described elsewhere: for Lie algebras,
see&nbsp;<code>LieFamily</code> (<a href="CHAP061.htm#SSEC001.3">LieFamily</a>); for group  products,  see&nbsp;<a href="CHAP047.htm#SECT006">Embeddings  and Projections for  Group  Products</a>  for  a  general  description,  or  for
examples see&nbsp;<a href="CHAP047.htm#SECT001">Direct Products</a> for direct products, <a href="CHAP047.htm#SECT002">Semidirect Products</a>
for semidirect products, or&nbsp;<a href="CHAP047.htm#SECT004">Wreath Products</a> for wreath products; or for
magma rings see&nbsp;<a href="CHAP063.htm#SECT003">Natural Embeddings related to Magma Rings</a>.
<p>
<a name = "SSEC001.11"></a>
<li><code>Projection( </code><var>S</var><code>, </code><var>T</var><code> ) O</code>
<li><code>Projection( </code><var>S</var><code>, </code><var>i</var><code> ) O</code>
<li><code>Projection( </code><var>S</var><code> ) O</code>
<p>
returns the projection of the domain <var>S</var> onto the domain <var>T</var>, or  in  the
second form, some domain indexed by the positive integer <var>i</var>, or  in  the
third form some natural subdomain of <var>S</var>. Various methods are defined for
group products; see&nbsp;<a href="CHAP047.htm#SECT006">Embeddings and Projections for Group Products</a> for a
general description, or for examples  see&nbsp;<a href="CHAP047.htm#SECT001">Direct  Products</a>  for  direct
products,  <a href="CHAP047.htm#SECT002">Semidirect  Products</a>  for  semidirect  products,  <a href="CHAP047.htm#SSEC003.2">Subdirect Products</a>  for  subdirect  products,  or&nbsp;<a href="CHAP047.htm#SECT004">Wreath  Products</a>  for   wreath
products.
<p>
<a name = "SSEC001.12"></a>
<li><code>RestrictedMapping( </code><var>map</var><code>, </code><var>subdom</var><code> ) O</code>
<p>
If <var>subdom</var> is a subdomain of the source of the general mapping <var>map</var>,
this operation returns the restriction of <var>map</var> to <var>subdom</var>.
<p>
<p>
<h2><a name="SECT002">31.2 Properties and Attributes of (General) Mappings</a></h2>
<p><p>
<a name = "SSEC002.1"></a>
<li><code>IsTotal( </code><var>map</var><code> ) P</code>
<p>
is <code>true</code> if each element in the source <i>S</i> of the general mapping <var>map</var>
has images, i.e.,
<i>s</i><sup><i>map</i> </sup>  &#8800; &#8709; for all <i>s</i> &#8712; <i>S</i>,
and <code>false</code> otherwise.
<p>
<a name = "SSEC002.2"></a>
<li><code>IsSingleValued( </code><var>map</var><code> ) P</code>
<p>
is <code>true</code> if each element in the source <i>S</i> of the general mapping <var>map</var>
has at most one image, i.e.,
&#124;<i>s</i><sup><i>map</i> </sup>&#124;  &#8804; 1 for all <i>s</i> &#8712; <i>S</i>,
and <code>false</code> otherwise.
<p>
Equivalently, <code>IsSingleValued( </code><var>map</var><code> )</code> is <code>true</code> if and only if
the preimages of different elements in <i>R</i> are disjoint.
<p>
<a name = "SSEC002.3"></a>
<li><code>IsMapping( </code><var>map</var><code> ) P</code>
<p>
A <strong>mapping</strong> <var>map</var> is a general mapping that assigns to each element <code>elm</code>
of its source a unique element <code>Image( </code><var>map</var><code>, </code><var>elm</var><code> )</code> of its range.
<p>
Equivalently, the general mapping <var>map</var> is a mapping if and only if it is
total and single-valued (see&nbsp;<a href="CHAP031.htm#SSEC002.1">IsTotal</a>, <a href="CHAP031.htm#SSEC002.2">IsSingleValued</a>).
<p>
<a name = "SSEC002.4"></a>
<li><code>IsInjective( </code><var>map</var><code> ) P</code>
<p>
is <code>true</code> if the images of different elements in the source <i>S</i> of the
general mapping <var>map</var> are disjoint, i.e.,
<i>x</i><sup><i>map</i> </sup> &#8745;<i>y</i><sup><i>map</i> </sup> = &#8709; for <i>x</i> &#8800; <i>y</i> &#8712; <i>S</i>,
and <code>false</code> otherwise.
<p>
Equivalently, <code>IsInjective( </code><var>map</var><code> )</code> is <code>true</code> if and only if each
element in the range of <var>map</var> has at most one preimage in <i>S</i>.
<p>
<a name = "SSEC002.5"></a>
<li><code>IsSurjective( </code><var>map</var><code> ) P</code>
<p>
is <code>true</code> if each element in the range <i>R</i> of the general mapping <var>map</var>
has preimages in the source <i>S</i> of <var>map</var>, i.e.,
{ <i>s</i> &#8712; <i>S</i>  | <i>x</i> &#8712; <i>s</i><sup><i>map</i> </sup> }  &#8800; &#8709; for all <i>x</i> &#8712; <i>R</i>,
and <code>false</code> otherwise.
<p>
<a name = "SSEC002.6"></a>
<li><code>IsBijective( </code><var>map</var><code> ) P</code>
<p>
A general mapping <var>map</var> is <strong>bijective</strong> if and only if it is an injective
and surjective mapping (see&nbsp;<a href="CHAP031.htm#SSEC002.3">IsMapping</a>, <a href="CHAP031.htm#SSEC002.4">IsInjective</a>, <a href="CHAP031.htm#SSEC002.5">IsSurjective</a>).
<p>
<a name = "SSEC002.7"></a>
<li><code>Range( </code><var>map</var><code> ) A</code>
<p>
<a name = "SSEC002.8"></a>
<li><code>Source( </code><var>map</var><code> ) A</code>
<p>
<a name = "SSEC002.9"></a>
<li><code>UnderlyingRelation( </code><var>map</var><code> ) A</code>
<p>
The <strong>underlying relation</strong> of a general mapping <var>map</var> is the domain
of pairs (<i>s</i>,<i>r</i>), with <i>s</i> in the source and <i>r</i> in the range of <var>map</var>
(see&nbsp;<a href="CHAP031.htm#SSEC002.8">Source</a>, <a href="CHAP031.htm#SSEC002.7">Range</a>), and <i>r</i> &#8712; <code>ImagesElm( </code><var>map</var><code>, <i>s</i> )</code>.
<p>
Each element of the underlying relation is a tuple (see&nbsp;<a href="CHAP031.htm">IsTuple</a>).
<p>
<a name = "SSEC002.10"></a>
<li><code>UnderlyingGeneralMapping( </code><var>map</var><code> ) A</code>
<p>
attribute for underlying relations of general mappings
<p>
<p>
<h2><a name="SECT003">31.3 Images under Mappings</a></h2>
<p><p>
<a name = "SSEC003.1"></a>
<li><code>ImagesSource( </code><var>map</var><code> ) A</code>
<p>
is the set of images of the source of the general mapping <var>map</var>.
<p>
<code>ImagesSource</code> delegates to <code>ImagesSet</code>,
it is introduced only to store the image of <var>map</var> as attribute value.
<p>
<a name = "SSEC003.2"></a>
<li><code>ImagesRepresentative( </code><var>map</var><code>, </code><var>elm</var><code> ) O</code>
<p>
If <var>elm</var> is an element of the source of the general mapping <var>map</var> then
<code>ImagesRepresentative</code> returns either a representative of the set of
images of <var>elm</var> under <var>map</var> or <code>fail</code>, the latter if and only if <var>elm</var>
has no images under <var>map</var>.
<p>
Anything may happen if <var>elm</var> is not an element of the source of <var>map</var>.
<p>
<a name = "SSEC003.3"></a>
<li><code>ImagesElm( </code><var>map</var><code>, </code><var>elm</var><code> ) O</code>
<p>
If <var>elm</var> is an element of the source of the general mapping <var>map</var> then
<code>ImagesElm</code> returns the set of all images of <var>elm</var> under <var>map</var>.
<p>
Anything may happen if <var>elm</var> is not an element of the source of <var>map</var>.
<p>
<a name = "SSEC003.4"></a>
<li><code>ImagesSet( </code><var>map</var><code>, </code><var>elms</var><code> ) O</code>
<p>
If <var>elms</var> is a subset of the source of the general mapping <var>map</var> then
<code>ImagesSet</code> returns the set of all images of <var>elms</var> under <var>map</var>.
<p>
Anything may happen if <var>elms</var> is not a subset of the source of <var>map</var>.
<p>
<a name = "SSEC003.5"></a>
<li><code>ImageElm( </code><var>map</var><code>, </code><var>elm</var><code> ) O</code>
<p>
If <var>elm</var> is an element of the source of the total and single-valued
mapping <var>map</var> then
<code>ImageElm</code> returns the unique image of <var>elm</var> under <var>map</var>.
<p>
Anything may happen if <var>elm</var> is not an element of the source of <var>map</var>.
<p>
<a name = "SSEC003.6"></a>
<li><code>Image( </code><var>map</var><code> ) F</code>
<li><code>Image( </code><var>map</var><code>, </code><var>elm</var><code> ) F</code>
<li><code>Image( </code><var>map</var><code>, </code><var>coll</var><code> ) F</code>
<p>
<code>Image( </code><var>map</var><code> )</code> is the image of the general mapping <var>map</var>, i.e.,
the subset of elements of the range of <var>map</var> that are actually values of
<var>map</var>.
Note that in this case the argument may also be multi-valued.
<p>
<code>Image( </code><var>map</var><code>, </code><var>elm</var><code> )</code> is the image of the element <var>elm</var> of the source
of the mapping <var>map</var> under <var>map</var>, i.e., the unique element of the range
to which <var>map</var> maps <var>elm</var>.
This can also be expressed as <code></code><var>elm</var><code> ^ </code><var>map</var><code></code>.
Note that <var>map</var> must be total and single valued, a multi valued general
mapping is not allowed (see&nbsp;<a href="CHAP031.htm#SSEC003.7">Images</a>).
<p>
<code>Image( </code><var>map</var><code>, </code><var>coll</var><code> )</code> is the image of the subset <var>coll</var> of the source
of the mapping <var>map</var> under <var>map</var>, i.e., the subset of the range
to which <var>map</var> maps elements of <var>coll</var>.
<var>coll</var> may be a proper set or a domain.
The result will be either a proper set or a domain.
Note that in this case <var>map</var> may also be multi-valued.
(If <var>coll</var> and the result are lists then the positions of
entries do in general <strong>not</strong> correspond.)
<p>
<code>Image</code> delegates to <code>ImagesSource</code> when called with one argument,
and to <code>ImageElm</code> resp. <code>ImagesSet</code> when called with two arguments.
<p>
If the second argument is not an element or a subset of the source of
the first argument, an error is signalled.
<p>
<a name = "SSEC003.7"></a>
<li><code>Images( </code><var>map</var><code> ) F</code>
<li><code>Images( </code><var>map</var><code>, </code><var>elm</var><code> ) F</code>
<li><code>Images( </code><var>map</var><code>, </code><var>coll</var><code> ) F</code>
<p>
<code>Images( </code><var>map</var><code> )</code> is the image of the general mapping <var>map</var>, i.e.,
the subset of elements of the range of <var>map</var> that are actually values of
<var>map</var>.
<p>
<code>Images( </code><var>map</var><code>, </code><var>elm</var><code> )</code> is the set of images of the element <var>elm</var> of
the source of the general mapping <var>map</var> under <var>map</var>, i.e., the set of
elements of the range to which <var>map</var> maps <var>elm</var>.
<p>
<code>Images( </code><var>map</var><code>, </code><var>coll</var><code> )</code> is the set of images of the subset <var>coll</var> of
the source of the general mapping <var>map</var> under <var>map</var>, i.e., the subset
of the range to which <var>map</var> maps elements of <var>coll</var>.
<var>coll</var> may be a proper set or a domain.
The result will be either a proper set or a domain.
(If <var>coll</var> and the result are lists then the positions of
entries do in general <strong>not</strong> correspond.)
<p>
<code>Images</code> delegates to <code>ImagesSource</code> when called with one argument,
and to <code>ImagesElm</code> resp. <code>ImagesSet</code> when called with two arguments.
<p>
If the second argument is not an element or a subset of the source of
the first argument, an error is signalled.
<p>
<p>
<h2><a name="SECT004">31.4 Preimages under Mappings</a></h2>
<p><p>
<a name = "SSEC004.1"></a>
<li><code>PreImagesRange( </code><var>map</var><code> ) A</code>
<p>
is the set of preimages of the range of the general mapping <var>map</var>.
<p>
<code>PreImagesRange</code> delegates to <code>PreImagesSet</code>,
it is introduced only to store the preimage of <var>map</var> as attribute value.
<p>
<a name = "SSEC004.2"></a>
<li><code>PreImagesElm( </code><var>map</var><code>, </code><var>elm</var><code> ) O</code>
<p>
If <var>elm</var> is an element of the range of the general mapping <var>map</var> then
<code>PreImagesElm</code> returns the set of all preimages of <var>elm</var> under <var>map</var>.
<p>
Anything may happen if <var>elm</var> is not an element of the range of <var>map</var>.
<p>
<a name = "SSEC004.3"></a>
<li><code>PreImageElm( </code><var>map</var><code>, </code><var>elm</var><code> ) O</code>
<p>
If <var>elm</var> is an element of the range of the injective and surjective
general mapping <var>map</var> then
<code>PreImageElm</code> returns the unique preimage of <var>elm</var> under <var>map</var>.
<p>
Anything may happen if <var>elm</var> is not an element of the range of <var>map</var>.
<p>
<a name = "SSEC004.4"></a>
<li><code>PreImagesRepresentative( </code><var>map</var><code>, </code><var>elm</var><code> ) O</code>
<p>
If <var>elm</var> is an element of the range of the general mapping <var>map</var> then
<code>PreImagesRepresentative</code> returns either a representative of the set of
preimages of <var>elm</var> under <var>map</var> or <code>fail</code>, the latter if and only if <var>elm</var>
has no preimages under <var>map</var>.
<p>
Anything may happen if <var>elm</var> is not an element of the range of <var>map</var>.
<p>
<a name = "SSEC004.5"></a>
<li><code>PreImagesSet( </code><var>map</var><code>, </code><var>elms</var><code> ) O</code>
<p>
If <var>elms</var> is a subset of the range of the general mapping <var>map</var> then
<code>PreImagesSet</code> returns the set of all preimages of <var>elms</var> under <var>map</var>.
<p>
Anything may happen if <var>elms</var> is not a subset of the range of <var>map</var>.
<p>
<a name = "SSEC004.6"></a>
<li><code>PreImage( </code><var>map</var><code> ) F</code>
<li><code>PreImage( </code><var>map</var><code>, </code><var>elm</var><code> ) F</code>
<li><code>PreImage( </code><var>map</var><code>, </code><var>coll</var><code> ) F</code>
<p>
<code>PreImage( </code><var>map</var><code> )</code> is the preimage of the general mapping <var>map</var>, i.e.,
the subset of elements of the source of <var>map</var> that actually have values
under <var>map</var>.
Note that in this case the argument may also be non-injective or
non-surjective.
<p>
<code>PreImage( </code><var>map</var><code>, </code><var>elm</var><code> )</code> is the preimage of the element <var>elm</var> of the
range of the injective and surjective mapping <var>map</var> under <var>map</var>, i.e.,
the unique element of the source which is mapped under <var>map</var> to <var>elm</var>.
Note that <var>map</var> must be injective and surjective (see&nbsp;<a href="CHAP031.htm#SSEC004.7">PreImages</a>).
<p>
<code>PreImage( </code><var>map</var><code>, </code><var>coll</var><code> )</code> is the preimage of the subset <var>coll</var> of the
range of the general mapping <var>map</var> under <var>map</var>, i.e., the subset of the
source which is mapped under <var>map</var> to elements of <var>coll</var>.
<var>coll</var> may be a proper set or a domain.
The result will be either a proper set or a domain.
Note that in this case <var>map</var> may also be non-injective or
non-surjective.
(If <var>coll</var> and the result are lists then the positions of
entries do in general <strong>not</strong> correspond.)
<p>
<code>PreImage</code> delegates to <code>PreImagesRange</code> when called with one argument,
and to <code>PreImageElm</code> resp. <code>PreImagesSet</code> when called with two arguments.
<p>
If the second argument is not an element or a subset of the range of
the first argument, an error is signalled.
<p>
<a name = "SSEC004.7"></a>
<li><code>PreImages( </code><var>map</var><code> ) F</code>
<li><code>PreImages( </code><var>map</var><code>, </code><var>elm</var><code> ) F</code>
<li><code>PreImages( </code><var>map</var><code>, </code><var>coll</var><code> ) F</code>
<p>
<code>PreImages( </code><var>map</var><code> )</code> is the preimage of the general mapping <var>map</var>, i.e.,
the subset of elements of the source of <var>map</var> that have actually values
under <var>map</var>.
<p>
<code>PreImages( </code><var>map</var><code>, </code><var>elm</var><code> )</code> is the set of preimages of the element <var>elm</var>
of the range of the general mapping <var>map</var> under <var>map</var>, i.e., the set of
elements of the source which <var>map</var> maps to <var>elm</var>.
<p>
<code>PreImages( </code><var>map</var><code>, </code><var>coll</var><code> )</code> is the set of images of the subset <var>coll</var> of
the range of the general mapping <var>map</var> under <var>map</var>, i.e., the subset
of the source which <var>map</var> maps to elements of <var>coll</var>.
<var>coll</var> may be a proper set or a domain.
The result will be either a proper set or a domain.
(If <var>coll</var> and the result are lists then the positions of
entries do in general <strong>not</strong> correspond.)
<p>
<code>PreImages</code> delegates to <code>PreImagesRange</code> when called with one argument,
and to <code>PreImagesElm</code> resp. <code>PreImagesSet</code> when called with two
arguments.
<p>
If the second argument is not an element or a subset of the range of
the first argument, an error is signalled.
<p>
<p>
<h2><a name="SECT005">31.5 Arithmetic Operations for General Mappings</a></h2>
<p><p>
General mappings are arithmetic objects.
One can form groups and vector spaces of general mappings provided
that they are invertible or can be added and admit scalar multiplication,
respectively.
<p>
For two general mappings with same source, range, preimage, and image,
the <strong>sum</strong> is defined pointwise, i.e., the images of a point under the sum
is the set of all sums with first summand in the images of the first
general mapping and second summand in the images of the second general
mapping.
<p>
<strong>Scalar multiplication</strong> of general mappings is defined likewise.
<p>
The <strong>product</strong> of two general mappings is defined as the composition.
This multiplication is always associative.
In addition to the composition via <code>*</code>, general mappings can be composed
--in reversed order-- via <code>CompositionMapping</code>.
<p>
General mappings are in the category of multiplicative elements with
inverses.
Similar to matrices, not every general mapping has an inverse or an
identity, and we define the behaviour of <code>One</code> and <code>Inverse</code> for
general mappings as follows.
<code>One</code> returns <code>fail</code> when called for a general mapping whose source and
range differ, otherwise <code>One</code> returns the identity mapping of the source.
(Note that the source may differ from the preimage).
<code>Inverse</code> returns <code>fail</code> when called for a non-bijective general mapping
or for a general mapping whose source and range differ; otherwise
<code>Inverse</code> returns the inverse mapping.
<p>
Besides the usual inverse of multiplicative elements, which means that
<code>Inverse( </code><var>g</var><code> ) * </code><var>g</var><code> = </code><var>g</var><code> * Inverse( </code><var>g</var><code> ) = One( </code><var>g</var><code> )</code>,
for general mappings we have the attribute <code>InverseGeneralMapping</code>.
If <var>F</var> is a general mapping with source <i>S</i>, range <i>R</i>, and underlying
relation <i>Rel</i> then <code>InverseGeneralMapping( </code><var>F</var><code> )</code> has source <i>R</i>,
range <i>S</i>, and underlying relation { (<i>r</i>,<i>s</i>)  | (<i>s</i>,<i>r</i>)  &#8712; <i>Rel</i> }.
For a general mapping that has an inverse in the usual sense,
i.e., for a bijection of the source, of course both concepts coincide.
<p>
<code>Inverse</code> may delegate to <code>InverseGeneralMapping</code>.
<code>InverseGeneralMapping</code> must not delegate to <code>Inverse</code>, but a known
value of <code>Inverse</code> may be fetched.
So methods to compute the inverse of a general mapping should be
installed for <code>InverseGeneralMapping</code>.
<p>
(Note that in many respects, general mappings behave similar to matrices,
for example one can define left and right identities and inverses, which
do not fit into the current concepts of <font face="Gill Sans,Helvetica,Arial">GAP</font>.)
<p>
<p>
<h2><a name="SECT006">31.6 Mappings which are Compatible with Algebraic Structures</a></h2>
<p><p>
From an algebraical point of view, the most important mappings are those
which are compatible with a structure. For Magmas, Groups and Rings, <font face="Gill Sans,Helvetica,Arial">GAP</font>
supports the following four types of such mappings:
<p>
1. General mappings that respect multiplication
<p>
2. General mappings that respect addition
<p>
3. General mappings that respect scalar mult.
<p>
4. General mappings that respect multiplicative and additive structure
<p>
(Very technical note: GAP defines categories <code>IsSPGeneralMapping</code> and
<code>IsNonSPGeneralMapping</code>. The distinction between these is orthogonal to the
Structure Compatibility described here and should not be confused.)
<p>
<p>
<h2><a name="SECT007">31.7 Magma Homomorphisms</a></h2>
<p><p>
<a name = "SSEC007.1"></a>
<li><code>IsMagmaHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
A <code>MagmaHomomorphism</code> is a total single valued mapping which respects 
multiplication.
<p>
<a name = "SSEC007.2"></a>
<li><code>MagmaHomomorphismByFunctionNC( </code><var>G</var><code>, </code><var>H</var><code>, </code><var>fn</var><code> ) F</code>
<p>
Creates the homomorphism from G to H without checking
that <var>fn</var> is a homomorphism.
<p>
<a name = "SSEC007.3"></a>
<li><code>NaturalHomomorphismByGenerators( </code><var>f</var><code>, </code><var>s</var><code> ) O</code>
<p>
returns a mapping from the magma <var>f</var> with <var>n</var> generators to the
magma <var>s</var> with <var>n</var> generators, which maps the ith generator of <var>f</var> to the 
ith generator of <var>s</var>.
<p>
<p>
<h2><a name="SECT008">31.8 Mappings that Respect Multiplication</a></h2>
<p><p>
<a name = "SSEC008.1"></a>
<li><code>RespectsMultiplication( </code><var>mapp</var><code> ) P</code>
<p>
Let <var>mapp</var> be a general mapping with underlying relation
<i>F</i>  &#8838; <i>S</i> &times;<i>R</i>,
where <i>S</i> and <i>R</i> are the source and the range of <var>mapp</var>, respectively.
Then <code>RespectsMultiplication</code> returns <code>true</code> if
<i>S</i> and <i>R</i> are magmas such that
(<i>s</i><sub>1</sub>,<i>r</i><sub>1</sub>), (<i>s</i><sub>2</sub>,<i>r</i><sub>2</sub>)  &#8712; <i>F</i> implies (<i>s</i><sub>1</sub> * <i>s</i><sub>2</sub>,<i>r</i><sub>1</sub> * <i>r</i><sub>2</sub>)  &#8712; <i>F</i>,
and <code>false</code> otherwise.
<p>
If <var>mapp</var> is single-valued then <code>RespectsMultiplication</code> returns <code>true</code>
if and only if the equation
<code></code><var>s1</var><code>^</code><var>mapp</var><code> * </code><var>s2</var><code>^</code><var>mapp</var><code> = (</code><var>s1</var><code>*</code><var>s2</var><code>)^</code><var>mapp</var><code></code>
holds for all <var>s1</var>, <var>s2</var> in <i>S</i>.
<p>
<a name = "SSEC008.2"></a>
<li><code>RespectsOne( </code><var>mapp</var><code> ) P</code>
<p>
Let <var>mapp</var> be a general mapping with underlying relation
<i>F</i>  &#8838; <i>S</i>  &times;<i>R</i> ,
where <var>S</var> and <var>R</var> are the source and the range of <var>mapp</var>, respectively.
Then <code>RespectsOne</code> returns <code>true</code> if
<var>S</var> and <var>R</var> are magmas-with-one such that
( <tt>One</tt><tt>(</tt><i>S</i> <tt>)</tt>, <tt>One</tt><tt>(</tt><i>R</i> <tt>)</tt> )  &#8712; <i>F</i>,
and <code>false</code> otherwise.
<p>
If <var>mapp</var> is single-valued then <code>RespectsOne</code> returns <code>true</code>
if and only if the equation
<code>One( </code><var>S</var><code> )^</code><var>mapp</var><code> = One( </code><var>R</var><code> )</code>
holds.
<p>
<a name = "SSEC008.3"></a>
<li><code>RespectsInverses( </code><var>mapp</var><code> ) P</code>
<p>
Let <var>mapp</var> be a general mapping with underlying relation
<i>F</i>  &#8838; <i>S</i>  &times;<i>R</i> ,
where <var>S</var> and <var>R</var> are the source and the range of <var>mapp</var>, respectively.
Then <code>RespectsInverses</code> returns <code>true</code> if
<var>S</var> and <var>R</var> are magmas-with-inverses such that,
for <i>s</i>  &#8712; <i>S</i>  and <i>r</i>  &#8712; <i>R</i> , 
(<i>s</i>,<i>r</i>)  &#8712; <i>F</i> implies (<i>s</i><sup>&#8722;1</sup>,<i>r</i><sup>&#8722;1</sup>)  &#8712; <i>F</i>,
and <code>false</code> otherwise.
<p>
If <var>mapp</var> is single-valued then <code>RespectsInverses</code> returns <code>true</code>
if and only if the equation
<code>Inverse( </code><var>s</var><code> )^</code><var>mapp</var><code> = Inverse( </code><var>s</var><code>^</code><var>mapp</var><code> )</code>
holds for all <var>s</var> in <i>S</i>.
<p>
Mappings that are defined on a group and respect multiplication and inverses
are group homomorphisms. Chapter&nbsp;<a href="CHAP038.htm">Group Homomorphisms</a> explains them in more
detail.
<p>
<a name = "SSEC008.4"></a>
<li><code>IsGroupGeneralMapping( </code><var>mapp</var><code> ) P</code>
<a name = "SSEC008.4"></a>
<li><code>IsGroupHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
A <code>GroupGeneralMapping</code> is a mapping which respects multiplication and
inverses. If it is total and single valued it is called a group
homomorphism.
<p>
<a name = "SSEC008.5"></a>
<li><code>KernelOfMultiplicativeGeneralMapping( </code><var>mapp</var><code> ) A</code>
<p>
Let <var>mapp</var> be a general mapping.
Then <code>KernelOfMultiplicativeGeneralMapping</code> returns the set of all
elements in the source of <var>mapp</var> that have the identity of the range in
their set of images.
<p>
(This is a monoid if <var>mapp</var> respects multiplication and one,
and if the source of <var>mapp</var> is associative.)
<p>
<a name = "SSEC008.6"></a>
<li><code>CoKernelOfMultiplicativeGeneralMapping( </code><var>mapp</var><code> ) A</code>
<p>
Let <var>mapp</var> be a general mapping.
Then <code>CoKernelOfMultiplicativeGeneralMapping</code> returns the set of all
elements in the range of <var>mapp</var> that have the identity of the source in
their set of preimages.
<p>
(This is a monoid if <var>mapp</var> respects multiplication and one,
and if the range of <var>mapp</var> is associative.)
<p>
<p>
<h2><a name="SECT009">31.9 Mappings that Respect Addition</a></h2>
<p><p>
<a name = "SSEC009.1"></a>
<li><code>RespectsAddition( </code><var>mapp</var><code> ) P</code>
<p>
Let <var>mapp</var> be a general mapping with underlying relation
<i>F</i>  &#8838; <i>S</i> &times;<i>R</i>,
where <i>S</i> and <i>R</i> are the source and the range of <var>mapp</var>, respectively.
Then <code>RespectsAddition</code> returns <code>true</code> if
<i>S</i> and <i>R</i> are additive magmas such that
(<i>s</i><sub>1</sub>,<i>r</i><sub>1</sub>), (<i>s</i><sub>2</sub>,<i>r</i><sub>2</sub>)  &#8712; <i>F</i> implies (<i>s</i><sub>1</sub> + <i>s</i><sub>2</sub>,<i>r</i><sub>1</sub> + <i>r</i><sub>2</sub>)  &#8712; <i>F</i>,
and <code>false</code> otherwise.
<p>
If <var>mapp</var> is single-valued then <code>RespectsAddition</code> returns <code>true</code>
if and only if the equation
<code></code><var>s1</var><code>^</code><var>mapp</var><code> + </code><var>s2</var><code>^</code><var>mapp</var><code> = (</code><var>s1</var><code>+</code><var>s2</var><code>)^</code><var>mapp</var><code></code>
holds for all <var>s1</var>, <var>s2</var> in <i>S</i>.
<p>
<a name = "SSEC009.2"></a>
<li><code>RespectsAdditiveInverses( </code><var>mapp</var><code> ) P</code>
<p>
Let <var>mapp</var> be a general mapping with underlying relation
<i>F</i>  &#8838; <i>S</i> &times;<i>R</i>,
where <i>S</i> and <i>R</i> are the source and the range of <var>mapp</var>, respectively.
Then <code>RespectsAdditiveInverses</code> returns <code>true</code> if
<i>S</i> and <i>R</i> are additive-magmas-with-inverses such that
(<i>s</i>,<i>r</i>)  &#8712; <i>F</i> implies (&#8722;<i>s</i>,&#8722;<i>r</i>)  &#8712; <i>F</i>,
and <code>false</code> otherwise.
<p>
If <var>mapp</var> is single-valued then <code>RespectsAdditiveInverses</code> returns <code>true</code>
if and only if the equation
<code>AdditiveInverse( </code><var>s</var><code> )^</code><var>mapp</var><code> = AdditiveInverse( </code><var>s</var><code>^</code><var>mapp</var><code> )</code>
holds for all <var>s</var> in <i>S</i>.
<p>
<a name = "SSEC009.3"></a>
<li><code>RespectsZero( </code><var>mapp</var><code> ) P</code>
<p>
Let <var>mapp</var> be a general mapping with underlying relation
<i>F</i>  &#8838; <i>S</i>  &times;<i>R</i> ,
where <var>S</var> and <var>R</var> are the source and the range of <var>mapp</var>, respectively.
Then <code>RespectsZero</code> returns <code>true</code> if
<var>S</var> and <var>R</var> are additive-magmas-with-zero such that
( <tt>Zero</tt><tt>(</tt><i>S</i> <tt>)</tt>, <tt>Zero</tt><tt>(</tt><i>R</i> <tt>)</tt> )  &#8712; <i>F</i>,
and <code>false</code> otherwise.
<p>
If <var>mapp</var> is single-valued then <code>RespectsZero</code> returns <code>true</code>
if and only if the equation
<code>Zero( </code><var>S</var><code> )^</code><var>mapp</var><code> = Zero( </code><var>R</var><code> )</code>
holds.
<p>
<a name = "SSEC009.4"></a>
<li><code>IsAdditiveGroupGeneralMapping( </code><var>mapp</var><code> ) P</code>
<a name = "SSEC009.4"></a>
<li><code>IsAdditiveGroupHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
<a name = "SSEC009.5"></a>
<li><code>KernelOfAdditiveGeneralMapping( </code><var>mapp</var><code> ) A</code>
<p>
Let <var>mapp</var> be a general mapping.
Then <code>KernelOfAdditiveGeneralMapping</code> returns the set of all
elements in the source of <var>mapp</var> that have the zero of the range in
their set of images.
<p>
<a name = "SSEC009.6"></a>
<li><code>CoKernelOfAdditiveGeneralMapping( </code><var>mapp</var><code> ) A</code>
<p>
Let <var>mapp</var> be a general mapping.
Then <code>CoKernelOfAdditiveGeneralMapping</code> returns the set of all
elements in the range of <var>mapp</var> that have the zero of the source in
their set of preimages.
<p>
<p>
<h2><a name="SECT010">31.10 Linear Mappings</a></h2>
<p><p>
Also see Sections&nbsp;<a href="CHAP031.htm#SECT008">Mappings that Respect Multiplication</a> and&nbsp;<a href="CHAP031.htm#SECT009">Mappings that Respect Addition</a>.
<p>
<a name = "SSEC010.1"></a>
<li><code>RespectsScalarMultiplication( </code><var>mapp</var><code> ) P</code>
<p>
Let <var>mapp</var> be a general mapping, with underlying relation
<i>F</i>  &#8838; <i>S</i> &times;<i>R</i>,
where <i>S</i> and <i>R</i> are the source and the range of <var>mapp</var>, respectively.
Then <code>RespectsScalarMultiplication</code> returns <code>true</code> if
<i>S</i> and <i>R</i> are left modules with the left acting domain <i>D</i> of <i>S</i>
contained in the left acting domain of <i>R</i> and such that
(<i>s</i>,<i>r</i>)  &#8712; <i>F</i> implies (<i>c</i> * <i>s</i>,<i>c</i> * <i>r</i>)  &#8712; <i>F</i> for all <i>c</i>  &#8712; <i>D</i>,
and <code>false</code> otherwise.
<p>
If <var>mapp</var> is single-valued then <code>RespectsScalarMultiplication</code> returns
<code>true</code> if and only if the equation
<code></code><var>c</var><code> * </code><var>s</var><code>^</code><var>mapp</var><code> = (</code><var>c</var><code> * </code><var>s</var><code>)^</code><var>mapp</var><code></code>
holds for all <var>c</var> in <i>D</i> and <var>s</var> in <i>S</i>.
<p>
<a name = "SSEC010.2"></a>
<li><code>IsLeftModuleGeneralMapping( </code><var>mapp</var><code> ) P</code>
<a name = "SSEC010.2"></a>
<li><code>IsLeftModuleHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
<a name = "SSEC010.3"></a>
<li><code>IsLinearMapping( </code><var>F</var><code>, </code><var>mapp</var><code> ) O</code>
<p>
For a field <var>F</var> and a general mapping <var>mapp</var>, <code>IsLinearMapping</code> returns
<code>true</code> if <var>mapp</var> is an <var>F</var>-linear mapping, and <code>false</code> otherwise.
<p>
A mapping <i>f</i> is a linear mapping (or vector space homomorphism) if
the source and range are vector spaces over the same division ring <i>D</i>,
and if <i>f</i>( <i>a</i> + <i>b</i> ) = <i>f</i>(<i>a</i>) + <i>f</i>(<i>b</i>) and <i>f</i>( <i>s</i> * <i>a</i> ) = <i>s</i> * <i>f</i>(<i>a</i>) hold
for all elements <i>a</i>, <i>b</i> in the source of <i>f</i> and <i>s</i>  &#8712; <i>D</i>.
<p>
See also <code>KernelOfMultiplicativeGeneralMapping</code>
(<a href="CHAP031.htm#SSEC008.5">KernelOfMultiplicativeGeneralMapping</a>) and
<code>CoKernelOfMultiplicativeGeneralMapping</code>
(<a href="CHAP031.htm#SSEC008.6">CoKernelOfMultiplicativeGeneralMapping</a>).
<p>
<p>
<h2><a name="SECT011">31.11 Ring Homomorphisms</a></h2>
<p><p>
<a name = "SSEC011.1"></a>
<li><code>IsRingGeneralMapping( </code><var>mapp</var><code> ) P</code>
<a name = "SSEC011.1"></a>
<li><code>IsRingHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
<a name = "SSEC011.2"></a>
<li><code>IsRingWithOneGeneralMapping( </code><var>mapp</var><code> ) P</code>
<a name = "SSEC011.2"></a>
<li><code>IsRingWithOneHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
<a name = "SSEC011.3"></a>
<li><code>IsAlgebraGeneralMapping( </code><var>mapp</var><code> ) P</code>
<a name = "SSEC011.3"></a>
<li><code>IsAlgebraHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
<a name = "SSEC011.4"></a>
<li><code>IsAlgebraWithOneGeneralMapping( </code><var>mapp</var><code> ) P</code>
<a name = "SSEC011.4"></a>
<li><code>IsAlgebraWithOneHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
<a name = "SSEC011.5"></a>
<li><code>IsFieldHomomorphism( </code><var>mapp</var><code> ) P</code>
<p>
A general mapping is a field homomorphism if and only if it is
a ring homomorphism with source a field.
<p>
<p>
<h2><a name="SECT012">31.12 General Mappings</a></h2>
<p><p>
<a name = "SSEC012.1"></a>
<li><code>IsGeneralMapping( </code><var>map</var><code> ) C</code>
<p>
Each general mapping lies in the category <code>IsGeneralMapping</code>.
It implies the categories <code>IsMultiplicativeElementWithInverse</code>
(see&nbsp;<a href="CHAP030.htm#SSEC014.13">IsMultiplicativeElementWithInverse</a>)
and <code>IsAssociativeElement</code> (see&nbsp;<a href="CHAP030.htm#SSEC015.1">IsAssociativeElement</a>);
for a discussion of these implications,
see&nbsp;<a href="CHAP031.htm#SECT005">Arithmetic Operations for General Mappings</a>.
<p>
<a name = "SSEC012.2"></a>
<li><code>IsConstantTimeAccessGeneralMapping( </code><var>map</var><code> ) P</code>
<p>
is <code>true</code> if the underlying relation of the general mapping <var>map</var>
knows its <code>AsList</code> value, and <code>false</code> otherwise.
<p>
In the former case, <var>map</var> is allowed to use this list for calls to
<code>ImagesElm</code> etc.
<p>
<a name = "SSEC012.3"></a>
<li><code>IsEndoGeneralMapping( </code><var>obj</var><code> ) P</code>
<p>
If a general mapping has this property then its source and range are
equal.
<p>
<p>
<h2><a name="SECT013">31.13 Technical Matters Concerning General Mappings</a></h2>
<p><p>
<code>Source</code> and <code>Range</code> are basic operations for general mappings.
<code>UnderlyingRelation</code> is secondary, its default method sets up a
domain that delegates tasks to the general mapping.
(Note that this allows one to handle also infinite relations by generic
methods if source or range of the general mapping is finite.)
<p>
The distinction between basic operations and secondary operations for
general mappings may be a little bit complicated.
Namely, each general mapping must be in one of the two categories
<code>IsNonSPGeneralMapping</code>, <code>IsSPGeneralMapping</code>.
(The category <code>IsGeneralMapping</code> is defined as the disjoint union
of these two.)
<p>
For general mappings of the first category, <code>ImagesElm</code> and
<code>PreImagesElm</code> are basic operations.
(Note that in principle it is possible to delegate from <code>PreImagesElm</code>
to <code>ImagesElm</code>.)
Methods for the secondary operations <code>(Pre)ImageElm</code>, <code>(Pre)ImagesSet</code>,
and <code>(Pre)ImagesRepresentative</code> may use <code>(Pre)ImagesElm</code>,
and methods for <code>(Pre)ImagesElm</code> must not call the secondary operations.
In particular, there are no generic methods for <code>(Pre)ImagesElm</code>.
<p>
Methods for <code>(Pre)ImagesSet</code> must <strong>not</strong> use <code>PreImagesRange</code> and
<code>ImagesSource</code>, e.g., compute the intersection of the set in question
with the preimage of the range resp. the image of the source.
<p>
For general mappings of the second category (which means structure
preserving general mappings), the situation is different.
The set of preimages under a group homomorphism, for example, is either
empty or can be described as a coset of the (multiplicative) kernel.
So it is reasonable to have <code>(Pre)ImagesRepresentative</code> and
<code>Multplicative(Co)Kernel</code> as basic operations here,
and to make <code>(Pre)ImagesElm</code> secondary operations
that may delegate to these.
<p>
In order to avoid infinite recursions,
we must distinguish between the two different types of mappings.
<p>
(Note that the basic domain operations such as <code>AsList</code> for the
underlying relation of a general mapping may use either <code>ImagesElm</code>
or <code>ImagesRepresentative</code> and the appropriate cokernel.
Conversely, if <code>AsList</code> for the underlying relation is known then
<code>ImagesElm</code> resp. <code>ImagesRepresentative</code> may delegate to it, the general
mapping gets the property <code>IsConstantTimeAccessGeneralMapping</code> for this;
note that this is not allowed if only an enumerator of the underlying
relation is known.)
<p>
Secondary operations are
<code>IsInjective</code>, <code>IsSingleValued</code>, <code>IsSurjective</code>, <code>IsTotal</code>;
they may use the basic operations, and must not be used by them.
<p>
<a name = "SSEC013.1"></a>
<li><code>IsSPGeneralMapping( </code><var>map</var><code> ) C</code>
<a name = "SSEC013.1"></a>
<li><code>IsNonSPGeneralMapping( </code><var>map</var><code> ) C</code>
<p>
<a name = "SSEC013.2"></a>
<li><code>IsGeneralMappingFamily( </code><var>obj</var><code> ) C</code>
<p>
<a name = "SSEC013.3"></a>
<li><code>FamilyRange( </code><var>Fam</var><code> ) A</code>
<p>
is the elements family of the family of the range of each general
mapping in the family <var>Fam</var>.
<p>
<a name = "SSEC013.4"></a>
<li><code>FamilySource( </code><var>Fam</var><code> ) A</code>
<p>
is the elements family of the family of the source of each general
mapping in the family <var>Fam</var>.
<p>
<a name = "SSEC013.5"></a>
<li><code>FamiliesOfGeneralMappingsAndRanges( </code><var>Fam</var><code> ) AM</code>
<p>
is a list that stores at the odd positions the families of general
mappings with source in the family <var>Fam</var>, at the even positions the
families of ranges of the general mappings.
<p>
<a name = "SSEC013.6"></a>
<li><code>GeneralMappingsFamily( </code><var>sourcefam</var><code>, </code><var>rangefam</var><code> ) F</code>
<p>
All general mappings with same source family <var>FS</var> and same range family
<var>FR</var> lie in the family <code>GeneralMappingsFamily( </code><var>FS</var><code>, </code><var>FR</var><code> )</code>.
<p>
<a name = "SSEC013.7"></a>
<li><code>TypeOfDefaultGeneralMapping( </code><var>source</var><code>, </code><var>range</var><code>, </code><var>filter</var><code> ) F</code>
<p>
is the type of mappings with <code>IsDefaultGeneralMappingRep</code> with source
<var>source</var> and range <var>range</var> and additional categories <var>filter</var>.
<p>
Methods for the operations <code>ImagesElm</code>, <code>ImagesRepresentative</code>,
<code>ImagesSet</code>, <code>ImageElm</code>, <code>PreImagesElm</code>, <code>PreImagesRepresentative</code>,
<code>PreImagesSet</code>, and <code>PreImageElm</code> take two arguments, a general mapping
<var>map</var> and an element or collection of elements <var>elm</var>.
These methods must <strong>not</strong> check whether <var>elm</var> lies in the source or the
range of <var>map</var>.
In the case that <var>elm</var> does not, <code>fail</code> may be returned as well as any
other <font face="Gill Sans,Helvetica,Arial">GAP</font> object, and even an error message is allowed.
Checks of the arguments are done only by the functions <code>Image</code>, <code>Images</code>,
<code>PreImage</code>, and <code>PreImages</code>, which then delegate to the operations listed
above.
<p>
<p>
[<a href="../index.htm">Top</a>] [<a href = "chapters.htm">Up</a>] [<a href ="CHAP030.htm">Previous</a>] [<a href ="CHAP032.htm">Next</a>] [<a href = "theindex.htm">Index</a>]
<P>
<font face="Gill Sans,Helvetica,Arial">GAP 4 manual<br>September 2006
</font></body></html>